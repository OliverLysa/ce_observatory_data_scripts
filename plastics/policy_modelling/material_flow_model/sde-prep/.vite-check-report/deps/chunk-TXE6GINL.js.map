{
  "version": 3,
  "sources": ["../../../node_modules/assert-never/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertNever = assertNever;\n/**\n * Helper function for exhaustive checks of discriminated unions.\n * https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html\n *\n * @example\n *\n *    type A = {type: 'a'};\n *    type B = {type: 'b'};\n *    type Union = A | B;\n *\n *    function doSomething(arg: Union) {\n *      if (arg.type === 'a') {\n *        return something;\n *      }\n *\n *      if (arg.type === 'b') {\n *        return somethingElse;\n *      }\n *\n *      // TS will error if there are other types in the union\n *      // Will throw an Error when called at runtime.\n *      // Use `assertNever(arg, true)` instead to fail silently.\n *      return assertNever(arg);\n *    }\n */\nfunction assertNever(value, errorMessageOrNoThrow) {\n    if (typeof errorMessageOrNoThrow === 'string') {\n        throw new Error(errorMessageOrNoThrow);\n    }\n    if (typeof errorMessageOrNoThrow === 'function') {\n        throw new Error(errorMessageOrNoThrow(value));\n    }\n    if (errorMessageOrNoThrow) {\n        return value;\n    }\n    throw new Error(\"Unhandled discriminated union member: \".concat(JSON.stringify(value)));\n}\nexports.default = assertNever;\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,cAAc;AA0BtB,aAAS,YAAY,OAAO,uBAAuB;AAC/C,UAAI,OAAO,0BAA0B,UAAU;AAC3C,cAAM,IAAI,MAAM,qBAAqB;AAAA,MACzC;AACA,UAAI,OAAO,0BAA0B,YAAY;AAC7C,cAAM,IAAI,MAAM,sBAAsB,KAAK,CAAC;AAAA,MAChD;AACA,UAAI,uBAAuB;AACvB,eAAO;AAAA,MACX;AACA,YAAM,IAAI,MAAM,yCAAyC,OAAO,KAAK,UAAU,KAAK,CAAC,CAAC;AAAA,IAC1F;AACA,YAAQ,UAAU;AAAA;AAAA;",
  "names": []
}

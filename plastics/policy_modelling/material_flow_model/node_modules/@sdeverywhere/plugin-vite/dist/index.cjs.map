{"version":3,"sources":["../src/index.ts","../src/plugin.ts"],"sourcesContent":["// Copyright (c) 2022 Climate Interactive / New Venture Fund\n\nexport type { VitePluginOptions } from './options'\nexport { vitePlugin } from './plugin'\n","// Copyright (c) 2022 Climate Interactive / New Venture Fund\n\nimport type { InlineConfig, ViteDevServer } from 'vite'\nimport { build, createServer } from 'vite'\n\nimport type { BuildContext, Plugin } from '@sdeverywhere/build'\n\nimport type { VitePluginOptions } from './options'\n\nexport function vitePlugin(options: VitePluginOptions): Plugin {\n  return new VitePlugin(options)\n}\n\nclass VitePlugin implements Plugin {\n  constructor(private readonly options: VitePluginOptions) {}\n\n  async postGenerate(context: BuildContext): Promise<boolean> {\n    // Only build if the plugin is configured to run for 'post-generate'\n    return this.buildIfNeeded(context, 'post-generate')\n  }\n\n  async postBuild(context: BuildContext): Promise<boolean> {\n    // Only build if the plugin is configured to run for 'post-build'\n    return this.buildIfNeeded(context, 'post-build')\n  }\n\n  private async buildIfNeeded(context: BuildContext, caller: 'post-generate' | 'post-build'): Promise<boolean> {\n    // The apply values default to 'post-build' when left undefined\n    const applyDev = this.options.apply?.development || 'post-build'\n    const applyProd = this.options.apply?.production || 'post-build'\n\n    // Run \"vite build\" only if configured for this mode\n    const shouldBuild =\n      (context.config.mode === 'development' && applyDev === caller) ||\n      (context.config.mode === 'production' && applyProd === caller)\n    if (shouldBuild) {\n      context.log('info', `Building ${this.options.name}`)\n      await build(this.options.config)\n      // context.log('info', 'Done!')\n    }\n    return true\n  }\n\n  async watch(): Promise<void> {\n    if (this.options.apply?.development === 'serve') {\n      // Run \"vite dev\", which starts the app in a local server and\n      // refreshes when source files are changed\n      const server: ViteDevServer = await createServer(this.options.config)\n      await server.listen()\n    } else if (this.options.apply?.development === 'watch') {\n      // Run \"vite build\" in watch mode so that it rebuilds when source\n      // files are changed\n      const config: InlineConfig = {\n        build: {\n          // Enable watch mode\n          // TODO: Only do this if not already set up in the given config?\n          watch: {}\n        },\n        ...this.options.config\n      }\n      await build(config)\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGA,kBAAoC;AAM7B,SAAS,WAAW,SAAoC;AAC7D,SAAO,IAAI,WAAW,OAAO;AAC/B;AAEA,IAAM,aAAN,MAAmC;AAAA,EACjC,YAA6B,SAA4B;AAA5B;AAAA,EAA6B;AAAA,EAE1D,MAAM,aAAa,SAAyC;AAE1D,WAAO,KAAK,cAAc,SAAS,eAAe;AAAA,EACpD;AAAA,EAEA,MAAM,UAAU,SAAyC;AAEvD,WAAO,KAAK,cAAc,SAAS,YAAY;AAAA,EACjD;AAAA,EAEA,MAAc,cAAc,SAAuB,QAA0D;AAE3G,UAAM,WAAW,KAAK,QAAQ,OAAO,eAAe;AACpD,UAAM,YAAY,KAAK,QAAQ,OAAO,cAAc;AAGpD,UAAM,cACH,QAAQ,OAAO,SAAS,iBAAiB,aAAa,UACtD,QAAQ,OAAO,SAAS,gBAAgB,cAAc;AACzD,QAAI,aAAa;AACf,cAAQ,IAAI,QAAQ,YAAY,KAAK,QAAQ,IAAI,EAAE;AACnD,gBAAM,mBAAM,KAAK,QAAQ,MAAM;AAAA,IAEjC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAuB;AAC3B,QAAI,KAAK,QAAQ,OAAO,gBAAgB,SAAS;AAG/C,YAAM,SAAwB,UAAM,0BAAa,KAAK,QAAQ,MAAM;AACpE,YAAM,OAAO,OAAO;AAAA,IACtB,WAAW,KAAK,QAAQ,OAAO,gBAAgB,SAAS;AAGtD,YAAM,SAAuB;AAAA,QAC3B,OAAO;AAAA;AAAA;AAAA,UAGL,OAAO,CAAC;AAAA,QACV;AAAA,QACA,GAAG,KAAK,QAAQ;AAAA,MAClB;AACA,gBAAM,mBAAM,MAAM;AAAA,IACpB;AAAA,EACF;AACF;","names":[]}
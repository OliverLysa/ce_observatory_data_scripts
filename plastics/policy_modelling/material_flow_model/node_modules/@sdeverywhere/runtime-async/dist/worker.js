// src/worker.ts
import { expose, Transfer } from "threads/worker";
import { BufferedRunModelParams, createRunnableModel } from "@sdeverywhere/runtime";
var initGeneratedModel;
var runnableModel;
var params = new BufferedRunModelParams();
var modelWorker = {
  async initModel() {
    if (runnableModel) {
      throw new Error("RunnableModel was already initialized");
    }
    const generatedModel = await initGeneratedModel();
    runnableModel = createRunnableModel(generatedModel);
    return {
      outputVarIds: runnableModel.outputVarIds,
      modelListing: runnableModel.modelListing,
      startTime: runnableModel.startTime,
      endTime: runnableModel.endTime,
      saveFreq: runnableModel.saveFreq,
      outputRowLength: runnableModel.numSavePoints
    };
  },
  runModel(ioBuffer) {
    if (!runnableModel) {
      throw new Error("RunnableModel must be initialized before running the model in worker");
    }
    params.updateFromEncodedBuffer(ioBuffer);
    runnableModel.runModel(params);
    return Transfer(ioBuffer);
  }
};
function exposeModelWorker(init) {
  initGeneratedModel = init;
  expose(modelWorker);
}
export {
  exposeModelWorker
};
//# sourceMappingURL=worker.js.map
{"version":3,"sources":["../src/worker.ts"],"sourcesContent":["// Copyright (c) 2020-2022 Climate Interactive / New Venture Fund\n\nimport type { TransferDescriptor } from 'threads'\nimport { expose, Transfer } from 'threads/worker'\n\nimport type { GeneratedModel, RunnableModel } from '@sdeverywhere/runtime'\nimport { BufferedRunModelParams, createRunnableModel } from '@sdeverywhere/runtime'\n\n/** @hidden */\nlet initGeneratedModel: () => Promise<GeneratedModel>\n\n/** @hidden */\nlet runnableModel: RunnableModel\n\n/**\n * Maintain a `BufferedRunModelParams` instance that wraps the transferable buffer\n * containing the I/O parameters.\n * @hidden\n */\nconst params = new BufferedRunModelParams()\n\ninterface InitResult {\n  outputVarIds: string[]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modelListing?: /*ModelListingSpecs*/ any\n  startTime: number\n  endTime: number\n  saveFreq: number\n  outputRowLength: number\n}\n\n/** @hidden */\nconst modelWorker = {\n  async initModel(): Promise<InitResult> {\n    if (runnableModel) {\n      throw new Error('RunnableModel was already initialized')\n    }\n\n    // Initialize the runnable model\n    const generatedModel = await initGeneratedModel()\n    runnableModel = createRunnableModel(generatedModel)\n\n    // Transfer the model metadata to the runner\n    return {\n      outputVarIds: runnableModel.outputVarIds,\n      modelListing: runnableModel.modelListing,\n      startTime: runnableModel.startTime,\n      endTime: runnableModel.endTime,\n      saveFreq: runnableModel.saveFreq,\n      outputRowLength: runnableModel.numSavePoints\n    }\n  },\n\n  runModel(ioBuffer: ArrayBuffer): TransferDescriptor<ArrayBuffer> {\n    if (!runnableModel) {\n      throw new Error('RunnableModel must be initialized before running the model in worker')\n    }\n\n    // Update the `BufferedRunModelParams` to use the values in the buffer that was transferred\n    // from the runner to the worker\n    params.updateFromEncodedBuffer(ioBuffer)\n\n    // Run the model synchronously on the worker thread using those I/O parameters\n    runnableModel.runModel(params)\n\n    // Transfer the buffer back to the runner\n    return Transfer(ioBuffer)\n  }\n}\n\n/**\n * Expose an object in the current worker thread that communicates with the\n * `ModelRunner` instance running in the main thread.  The exposed worker\n * object will take care of running the model on the worker thread and\n * sending the outputs back to the main thread.\n *\n * @param init The function that initializes the generated model instance that\n * is used in the worker thread.\n */\nexport function exposeModelWorker(init: () => Promise<GeneratedModel>): void {\n  // Save the initializer, which will be used when the runner calls `initModel`\n  // on the worker\n  initGeneratedModel = init\n\n  // Expose the worker implementation to `threads.js`\n  expose(modelWorker)\n}\n"],"mappings":";AAGA,SAAS,QAAQ,gBAAgB;AAGjC,SAAS,wBAAwB,2BAA2B;AAG5D,IAAI;AAGJ,IAAI;AAOJ,IAAM,SAAS,IAAI,uBAAuB;AAa1C,IAAM,cAAc;AAAA,EAClB,MAAM,YAAiC;AACrC,QAAI,eAAe;AACjB,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAGA,UAAM,iBAAiB,MAAM,mBAAmB;AAChD,oBAAgB,oBAAoB,cAAc;AAGlD,WAAO;AAAA,MACL,cAAc,cAAc;AAAA,MAC5B,cAAc,cAAc;AAAA,MAC5B,WAAW,cAAc;AAAA,MACzB,SAAS,cAAc;AAAA,MACvB,UAAU,cAAc;AAAA,MACxB,iBAAiB,cAAc;AAAA,IACjC;AAAA,EACF;AAAA,EAEA,SAAS,UAAwD;AAC/D,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,sEAAsE;AAAA,IACxF;AAIA,WAAO,wBAAwB,QAAQ;AAGvC,kBAAc,SAAS,MAAM;AAG7B,WAAO,SAAS,QAAQ;AAAA,EAC1B;AACF;AAWO,SAAS,kBAAkB,MAA2C;AAG3E,uBAAqB;AAGrB,SAAO,WAAW;AACpB;","names":[]}
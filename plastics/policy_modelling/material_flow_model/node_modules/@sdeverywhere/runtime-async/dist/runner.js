// src/runner.ts
import { BlobWorker, spawn, Thread, Transfer, Worker } from "threads";
import { BufferedRunModelParams, ModelListing, Outputs } from "@sdeverywhere/runtime";
async function spawnAsyncModelRunner(workerSpec) {
  if (workerSpec["path"]) {
    return spawnAsyncModelRunnerWithWorker(new Worker(workerSpec["path"]));
  } else {
    return spawnAsyncModelRunnerWithWorker(BlobWorker.fromText(workerSpec["source"]));
  }
}
async function spawnAsyncModelRunnerWithWorker(worker) {
  const modelWorker = await spawn(worker);
  const initResult = await modelWorker.initModel();
  const modelListing = initResult.modelListing ? new ModelListing(initResult.modelListing) : void 0;
  const params = new BufferedRunModelParams(modelListing);
  let running = false;
  let terminated = false;
  return {
    createOutputs: () => {
      return new Outputs(initResult.outputVarIds, initResult.startTime, initResult.endTime, initResult.saveFreq);
    },
    runModel: async (inputs, outputs, options) => {
      if (terminated) {
        throw new Error("Async model runner has already been terminated");
      } else if (running) {
        throw new Error("Async model runner only supports one `runModel` call at a time");
      } else {
        running = true;
      }
      params.updateFromParams(inputs, outputs, options);
      let ioBuffer;
      try {
        ioBuffer = await modelWorker.runModel(Transfer(params.getEncodedBuffer()));
      } finally {
        running = false;
      }
      params.updateFromEncodedBuffer(ioBuffer);
      params.finalizeOutputs(outputs);
      return outputs;
    },
    terminate: () => {
      if (terminated) {
        return Promise.resolve();
      } else {
        terminated = true;
        return Thread.terminate(modelWorker);
      }
    }
  };
}
export {
  spawnAsyncModelRunner
};
//# sourceMappingURL=runner.js.map
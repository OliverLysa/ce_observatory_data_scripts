var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/worker.ts
var worker_exports = {};
__export(worker_exports, {
  exposeModelWorker: () => exposeModelWorker
});
module.exports = __toCommonJS(worker_exports);
var import_worker = require("threads/worker");
var import_runtime = require("@sdeverywhere/runtime");
var initGeneratedModel;
var runnableModel;
var params = new import_runtime.BufferedRunModelParams();
var modelWorker = {
  async initModel() {
    if (runnableModel) {
      throw new Error("RunnableModel was already initialized");
    }
    const generatedModel = await initGeneratedModel();
    runnableModel = (0, import_runtime.createRunnableModel)(generatedModel);
    return {
      outputVarIds: runnableModel.outputVarIds,
      modelListing: runnableModel.modelListing,
      startTime: runnableModel.startTime,
      endTime: runnableModel.endTime,
      saveFreq: runnableModel.saveFreq,
      outputRowLength: runnableModel.numSavePoints
    };
  },
  runModel(ioBuffer) {
    if (!runnableModel) {
      throw new Error("RunnableModel must be initialized before running the model in worker");
    }
    params.updateFromEncodedBuffer(ioBuffer);
    runnableModel.runModel(params);
    return (0, import_worker.Transfer)(ioBuffer);
  }
};
function exposeModelWorker(init) {
  initGeneratedModel = init;
  (0, import_worker.expose)(modelWorker);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  exposeModelWorker
});
//# sourceMappingURL=worker.cjs.map
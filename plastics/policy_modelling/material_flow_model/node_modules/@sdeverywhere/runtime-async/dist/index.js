// src/runner.ts
import { BlobWorker, spawn, Thread, Transfer, Worker } from "threads";
import { BufferedRunModelParams, ModelListing, Outputs } from "@sdeverywhere/runtime";
async function spawnAsyncModelRunner(workerSpec) {
  if (workerSpec["path"]) {
    return spawnAsyncModelRunnerWithWorker(new Worker(workerSpec["path"]));
  } else {
    return spawnAsyncModelRunnerWithWorker(BlobWorker.fromText(workerSpec["source"]));
  }
}
async function spawnAsyncModelRunnerWithWorker(worker) {
  const modelWorker2 = await spawn(worker);
  const initResult = await modelWorker2.initModel();
  const modelListing = initResult.modelListing ? new ModelListing(initResult.modelListing) : void 0;
  const params2 = new BufferedRunModelParams(modelListing);
  let running = false;
  let terminated = false;
  return {
    createOutputs: () => {
      return new Outputs(initResult.outputVarIds, initResult.startTime, initResult.endTime, initResult.saveFreq);
    },
    runModel: async (inputs, outputs, options) => {
      if (terminated) {
        throw new Error("Async model runner has already been terminated");
      } else if (running) {
        throw new Error("Async model runner only supports one `runModel` call at a time");
      } else {
        running = true;
      }
      params2.updateFromParams(inputs, outputs, options);
      let ioBuffer;
      try {
        ioBuffer = await modelWorker2.runModel(Transfer(params2.getEncodedBuffer()));
      } finally {
        running = false;
      }
      params2.updateFromEncodedBuffer(ioBuffer);
      params2.finalizeOutputs(outputs);
      return outputs;
    },
    terminate: () => {
      if (terminated) {
        return Promise.resolve();
      } else {
        terminated = true;
        return Thread.terminate(modelWorker2);
      }
    }
  };
}

// src/worker.ts
import { expose, Transfer as Transfer2 } from "threads/worker";
import { BufferedRunModelParams as BufferedRunModelParams2, createRunnableModel } from "@sdeverywhere/runtime";
var initGeneratedModel;
var runnableModel;
var params = new BufferedRunModelParams2();
var modelWorker = {
  async initModel() {
    if (runnableModel) {
      throw new Error("RunnableModel was already initialized");
    }
    const generatedModel = await initGeneratedModel();
    runnableModel = createRunnableModel(generatedModel);
    return {
      outputVarIds: runnableModel.outputVarIds,
      modelListing: runnableModel.modelListing,
      startTime: runnableModel.startTime,
      endTime: runnableModel.endTime,
      saveFreq: runnableModel.saveFreq,
      outputRowLength: runnableModel.numSavePoints
    };
  },
  runModel(ioBuffer) {
    if (!runnableModel) {
      throw new Error("RunnableModel must be initialized before running the model in worker");
    }
    params.updateFromEncodedBuffer(ioBuffer);
    runnableModel.runModel(params);
    return Transfer2(ioBuffer);
  }
};
function exposeModelWorker(init) {
  initGeneratedModel = init;
  expose(modelWorker);
}
export {
  exposeModelWorker,
  spawnAsyncModelRunner
};
//# sourceMappingURL=index.js.map
#!/usr/bin/env sh
TOOLS_DIR=$(pwd)
ANTLR_VERSION=4.12.0
antlr4="java -jar /usr/local/lib/antlr-$ANTLR_VERSION-complete.jar"
grun='java org.antlr.v4.gui.TestRig'
help() {
  echo 'usage: a4 <command>'
  echo 'a4 clean'
  echo 'a4 generate'
  echo 'a4 tokens'
  echo 'a4 lex <model-file-pathname>'
  echo 'a4 tree <model-file-pathname>'
  exit
}
realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}
clean() {
  rm -rf ../java
}
generate() {
  clean
  $antlr4 -no-visitor -no-listener -Xexact-output-dir -o ../java ../grammar/Model.g4
  javac ../java/*.java
}
tokens() {
  cat ../java/Model.tokens
}
lex() {
  # $grun Model model -tokens $1
  $grun Model model -tokens $1 | node $TOOLS_DIR/print-tokens.js
}
tree() {
  $grun Model model -tree $1 | node $TOOLS_DIR/print-tree.js
}
# With no arguments or the usual help args, print usage and exit.
if [ "$#" = "0" -o "$1" = "-h" -o "$1" = "help" -o "$1" = "--help" ]; then
  help
elif [ "$1" = "clean" ]; then
  # Clean  files built by dev tools.
  clean
  exit
elif [ "$1" = "generate" ]; then
  # Generate the lexer and parser in Java before running other commands.
  generate
  exit
elif [ "$1" = "tokens" ]; then
  # The tokens command lists lexer tokens.
  tokens
  exit
fi
# The remaining commands need a model file.
if [ "$#" -lt "2" ]; then
  help
fi
if [ "$1" = "lex" -o "$1" = "tree" ]; then
  # Resolve the absolute pathname of the model file.
  mdl=$(realpath "$2")
  # Run the lexer or parser in the java directory and display the result.
  pushd ../java >/dev/null
  if [ "$1" = "lex" ]; then
    lex "$mdl"
  elif [ "$1" = "tree" ]; then
    tree "$mdl"
  fi
  popd >/dev/null
else
  # Print usage when an unknown command is given.
  help
fi

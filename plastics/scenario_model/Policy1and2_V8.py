"""
Python model 'Policy1and2_V8.py'
Translated using PySD
"""

from pathlib import Path
import numpy as np

from pysd.py_backend.functions import if_then_else, step
from pysd.py_backend.statefuls import Smooth, Integ
from pysd import Component

__pysd_version__ = "3.11.0"

__data = {"scope": None, "time": lambda: 0}

_root = Path(__file__).parent


component = Component()

#######################################################################
#                          CONTROL VARIABLES                          #
#######################################################################

_control_vars = {
    "initial_time": lambda: 2014,
    "final_time": lambda: 2042,
    "time_step": lambda: 1,
    "saveper": lambda: 1,
}


def _init_outer_references(data):
    for key in data:
        __data[key] = data[key]


@component.add(name="Time")
def time():
    """
    Current time of the model.
    """
    return __data["time"]()


@component.add(
    name="FINAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def final_time():
    """
    The final time for the simulation.
    """
    return __data["time"].final_time()


@component.add(
    name="INITIAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def initial_time():
    """
    The initial time for the simulation.
    """
    return __data["time"].initial_time()


@component.add(
    name="SAVEPER",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def saveper():
    """
    The frequency with which output is stored.
    """
    return __data["time"].saveper()


@component.add(
    name="TIME STEP",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_step():
    """
    The time step for the simulation.
    """
    return __data["time"].time_step()


#######################################################################
#                           MODEL VARIABLES                           #
#######################################################################


@component.add(
    name="illegal collection data pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pvc_bottle": 1,
        "to_waste_generated_pvc_bottle": 1,
    },
)
def illegal_collection_data_pvc_bottle():
    return rate_to_illegal_collection_pvc_bottle() * to_waste_generated_pvc_bottle()


@component.add(
    name="illegal collection data pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pvc_film": 1,
        "to_waste_generated_pvc_film": 1,
    },
)
def illegal_collection_data_pvc_film():
    return rate_to_illegal_collection_pvc_film() * to_waste_generated_pvc_film()


@component.add(
    name="illegal collection data other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_other_film": 1,
        "to_waste_generated_other_film": 1,
    },
)
def illegal_collection_data_other_film():
    return rate_to_illegal_collection_other_film() * to_waste_generated_other_film()


@component.add(
    name="illegal collection data pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pvc_ptt": 1,
        "to_waste_generated_pvc_ptt": 1,
    },
)
def illegal_collection_data_pvc_ptt():
    return rate_to_illegal_collection_pvc_ptt() * to_waste_generated_pvc_ptt()


@component.add(
    name="Sent for residual treatment ps ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_ps_ptt": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_ptt": 1,
    },
)
def sent_for_residual_treatment_ps_ptt():
    return (
        residual_rate_ps_ptt()
        * waste_collected_sent_to_formal_domestic_treatment_ps_ptt()
    )


@component.add(
    name="Sent for residual treatment other film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_other_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_other_film": 1,
    },
)
def sent_for_residual_treatment_other_film():
    return (
        residual_rate_other_film()
        * waste_collected_sent_to_formal_domestic_treatment_other_film()
    )


@component.add(
    name="littering idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ldpe_film": 1, "to_waste_generated_idpe_film": 1},
)
def littering_idpe_film():
    return littering_rate_ldpe_film() * to_waste_generated_idpe_film()


@component.add(
    name="littering ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ps_bottle": 1, "to_waste_generated_ps_bottle": 1},
)
def littering_ps_bottle():
    return littering_rate_ps_bottle() * to_waste_generated_ps_bottle()


@component.add(
    name="Sent for residual treatment pvc ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_pvc_ptt": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_ptt": 1,
    },
)
def sent_for_residual_treatment_pvc_ptt():
    return (
        residual_rate_pvc_ptt()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_ptt()
    )


@component.add(
    name="littering ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ps_film": 1, "to_waste_generated_ps_film": 1},
)
def littering_ps_film():
    return littering_rate_ps_film() * to_waste_generated_ps_film()


@component.add(
    name="Formal Waste Collection hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_hdpe_film": 1,
        "actual_rvm_collected_hdpe_film": 1,
        "actual_wmc_collected_hdpe_film": 1,
        "to_waste_generated_hdpe_film": 1,
    },
)
def formal_waste_collection_hdpe_film():
    return (
        actual_la_collected_hdpe_film()
        + actual_rvm_collected_hdpe_film()
        + actual_wmc_collected_hdpe_film()
    ) * to_waste_generated_hdpe_film()


@component.add(
    name="littering other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_other_film": 1, "to_waste_generated_other_film": 1},
)
def littering_other_film():
    return littering_rate_other_film() * to_waste_generated_other_film()


@component.add(
    name="littering pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pvc_film": 1, "to_waste_generated_pvc_film": 1},
)
def littering_pvc_film():
    return littering_rate_pvc_film() * to_waste_generated_pvc_film()


@component.add(
    name="Formal Waste Collection idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ldpe_film": 1,
        "actual_rvm_collected_ldpe_film": 1,
        "actual_wmc_collected_ldpe_film": 1,
        "to_waste_generated_idpe_film": 1,
    },
)
def formal_waste_collection_idpe_film():
    return (
        actual_la_collected_ldpe_film()
        + actual_rvm_collected_ldpe_film()
        + actual_wmc_collected_ldpe_film()
    ) * to_waste_generated_idpe_film()


@component.add(
    name="Sent for residual treatment pet film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_pet_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pet_film": 1,
    },
)
def sent_for_residual_treatment_pet_film():
    return (
        residual_rate_pet_film()
        * waste_collected_sent_to_formal_domestic_treatment_pet_film()
    )


@component.add(
    name="Overseas treament rate ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ps_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="illegal collection data idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ldpe_film": 1,
        "to_waste_generated_idpe_film": 1,
    },
)
def illegal_collection_data_idpe_film():
    return rate_to_illegal_collection_ldpe_film() * to_waste_generated_idpe_film()


@component.add(
    name="Sent for residual treatment pp film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_pp_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pp_film": 1,
    },
)
def sent_for_residual_treatment_pp_film():
    return (
        residual_rate_pp_film()
        * waste_collected_sent_to_formal_domestic_treatment_pp_film()
    )


@component.add(
    name="Formal Waste Collection other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_other_film": 1,
        "actual_rvm_collected_other_film": 1,
        "actual_wmc_collected_other_film": 1,
        "to_waste_generated_other_film": 1,
    },
)
def formal_waste_collection_other_film():
    return (
        actual_la_collected_other_film()
        + actual_rvm_collected_other_film()
        + actual_wmc_collected_other_film()
    ) * to_waste_generated_other_film()


@component.add(
    name="Formal Waste Collection pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pvc_film": 1,
        "actual_rvm_collected_pvc_film": 1,
        "actual_wmc_collected_pvc_film": 1,
        "to_waste_generated_pvc_film": 1,
    },
)
def formal_waste_collection_pvc_film():
    return (
        actual_la_collected_pvc_film()
        + actual_rvm_collected_pvc_film()
        + actual_wmc_collected_pvc_film()
    ) * to_waste_generated_pvc_film()


@component.add(
    name="Sent for residual treatment ps bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_ps_bottle": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_bottle": 1,
    },
)
def sent_for_residual_treatment_ps_bottle():
    return (
        residual_rate_ps_bottle()
        * waste_collected_sent_to_formal_domestic_treatment_ps_bottle()
    )


@component.add(
    name="Formal Waste Collection pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pvc_ptt": 1,
        "actual_rvm_collected_pvc_ptt": 1,
        "actual_wmc_collected_pvc_ptt": 1,
        "to_waste_generated_pvc_ptt": 1,
    },
)
def formal_waste_collection_pvc_ptt():
    return (
        actual_la_collected_pvc_ptt()
        + actual_rvm_collected_pvc_ptt()
        + actual_wmc_collected_pvc_ptt()
    ) * to_waste_generated_pvc_ptt()


@component.add(
    name="Sent for residual treatment ps film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_ps_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_film": 1,
    },
)
def sent_for_residual_treatment_ps_film():
    return (
        residual_rate_ps_film()
        * waste_collected_sent_to_formal_domestic_treatment_ps_film()
    )


@component.add(
    name="littering hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_hdpe_film": 1, "to_waste_generated_hdpe_film": 1},
)
def littering_hdpe_film():
    return littering_rate_hdpe_film() * to_waste_generated_hdpe_film()


@component.add(
    name="Sent for residual treatment pvc bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_pvc_bottle": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_bottle": 1,
    },
)
def sent_for_residual_treatment_pvc_bottle():
    return (
        residual_rate_pvc_bottle()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_bottle()
    )


@component.add(
    name="Sent for residual treatment pvc film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_pvc_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_film": 1,
    },
)
def sent_for_residual_treatment_pvc_film():
    return (
        residual_rate_pvc_film()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_film()
    )


@component.add(
    name="littering pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pvc_ptt": 1, "to_waste_generated_pvc_ptt": 1},
)
def littering_pvc_ptt():
    return littering_rate_pvc_ptt() * to_waste_generated_pvc_ptt()


@component.add(
    name="Formal Waste Collection ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ps_ptt": 1,
        "actual_rvm_collected_ps_ptt": 1,
        "actual_wmc_collected_ps_ptt": 1,
        "to_waste_generated_ps_ptt": 1,
    },
)
def formal_waste_collection_ps_ptt():
    return (
        actual_la_collected_ps_ptt()
        + actual_rvm_collected_ps_ptt()
        + actual_wmc_collected_ps_ptt()
    ) * to_waste_generated_ps_ptt()


@component.add(
    name="Formal Waste Collection pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pvc_bottle": 1,
        "actual_rvm_collected_pvc_bottle": 1,
        "actual_wmc_collected_pvc_bottle": 1,
        "to_waste_generated_pvc_bottle": 1,
    },
)
def formal_waste_collection_pvc_bottle():
    return (
        actual_la_collected_pvc_bottle()
        + actual_rvm_collected_pvc_bottle()
        + actual_wmc_collected_pvc_bottle()
    ) * to_waste_generated_pvc_bottle()


@component.add(
    name="littering ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ps_ptt": 1, "to_waste_generated_ps_ptt": 1},
)
def littering_ps_ptt():
    return littering_rate_ps_ptt() * to_waste_generated_ps_ptt()


@component.add(
    name="Formal Waste Collection pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pp_film": 1,
        "actual_rvm_collected_pp_film": 1,
        "actual_wmc_collected_pp_film": 1,
        "to_waste_generated_pp_film": 1,
    },
)
def formal_waste_collection_pp_film():
    return (
        actual_la_collected_pp_film()
        + actual_rvm_collected_pp_film()
        + actual_wmc_collected_pp_film()
    ) * to_waste_generated_pp_film()


@component.add(
    name="littering pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pvc_bottle": 1, "to_waste_generated_pvc_bottle": 1},
)
def littering_pvc_bottle():
    return littering_rate_pvc_bottle() * to_waste_generated_pvc_bottle()


@component.add(
    name="illegal collection data ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_to_illegal_collection_ps_ptt": 1, "to_waste_generated_ps_ptt": 1},
)
def illegal_collection_data_ps_ptt():
    return rate_to_illegal_collection_ps_ptt() * to_waste_generated_ps_ptt()


@component.add(
    name="Formal Waste Collection ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ps_bottle": 1,
        "actual_rvm_collected_ps_bottle": 1,
        "actual_wmc_collected_ps_bottle": 1,
        "to_waste_generated_ps_bottle": 1,
    },
)
def formal_waste_collection_ps_bottle():
    return (
        actual_la_collected_ps_bottle()
        + actual_rvm_collected_ps_bottle()
        + actual_wmc_collected_ps_bottle()
    ) * to_waste_generated_ps_bottle()


@component.add(
    name="Formal Waste Collection ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ps_film": 1,
        "actual_rvm_collected_ps_film": 1,
        "actual_wmc_collected_ps_film": 1,
        "to_waste_generated_ps_film": 1,
    },
)
def formal_waste_collection_ps_film():
    return (
        actual_la_collected_ps_film()
        + actual_rvm_collected_ps_film()
        + actual_wmc_collected_ps_film()
    ) * to_waste_generated_ps_film()


@component.add(
    name="littering pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pp_film": 1, "to_waste_generated_pp_film": 1},
)
def littering_pp_film():
    return littering_rate_pp_film() * to_waste_generated_pp_film()


@component.add(
    name="illegal collection data pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pp_film": 1,
        "to_waste_generated_pp_film": 1,
    },
)
def illegal_collection_data_pp_film():
    return rate_to_illegal_collection_pp_film() * to_waste_generated_pp_film()


@component.add(
    name="Sent for overseas treatment ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ps_film": 1, "sent_for_sorting_ps_film": 1},
)
def sent_for_overseas_treatment_ps_film():
    return overseas_treament_rate_ps_film() * sent_for_sorting_ps_film()


@component.add(
    name="Waste collected sent to formal domestic treatment pp film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_pp_film": 1,
        "sent_for_formal_domestic_pp_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pp_film():
    return formal_waste_collection_pp_film() * sent_for_formal_domestic_pp_film()


@component.add(
    name="Sent for residual treatment idpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "residual_rate_ldpe_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_idpe_film": 1,
    },
)
def sent_for_residual_treatment_idpe_film():
    return (
        residual_rate_ldpe_film()
        * waste_collected_sent_to_formal_domestic_treatment_idpe_film()
    )


@component.add(
    name="illegal collection data ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ps_film": 1,
        "to_waste_generated_ps_film": 1,
    },
)
def illegal_collection_data_ps_film():
    return rate_to_illegal_collection_ps_film() * to_waste_generated_ps_film()


@component.add(
    name="illegal collection data hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_hdpe_film": 1,
        "to_waste_generated_hdpe_film": 1,
    },
)
def illegal_collection_data_hdpe_film():
    return rate_to_illegal_collection_hdpe_film() * to_waste_generated_hdpe_film()


@component.add(
    name="illegal collection data ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ps_bottle": 1,
        "to_waste_generated_ps_bottle": 1,
    },
)
def illegal_collection_data_ps_bottle():
    return rate_to_illegal_collection_ps_bottle() * to_waste_generated_ps_bottle()


@component.add(
    name="littering pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pet_film": 1, "to_waste_generated_pet_film": 1},
)
def littering_pet_film():
    return littering_rate_pet_film() * to_waste_generated_pet_film()


@component.add(
    name="illegal collection data pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pet_film": 1,
        "to_waste_generated_pet_film": 1,
    },
)
def illegal_collection_data_pet_film():
    return rate_to_illegal_collection_pet_film() * to_waste_generated_pet_film()


@component.add(
    name="Formal Waste Collection pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pet_film": 1,
        "actual_rvm_collected_pet_film": 1,
        "actual_wmc_collected_pet_film": 1,
        "to_waste_generated_pet_film": 1,
    },
)
def formal_waste_collection_pet_film():
    return (
        actual_la_collected_pet_film()
        + actual_rvm_collected_pet_film()
        + actual_wmc_collected_pet_film()
    ) * to_waste_generated_pet_film()


@component.add(
    name="Waste collected sent to formal domestic treatment idpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_idpe_film": 1,
        "sent_for_formal_domestic_ldpe_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_idpe_film():
    return formal_waste_collection_idpe_film() * sent_for_formal_domestic_ldpe_film()


@component.add(
    name="Waste collected sent to formal domestic treatment other film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_other_film": 1,
        "sent_for_formal_domestic_other_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_other_film():
    return formal_waste_collection_other_film() * sent_for_formal_domestic_other_film()


@component.add(
    name="Waste collected sent to formal domestic treatment ps film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_ps_film": 1,
        "sent_for_formal_domestic_ps_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_ps_film():
    return formal_waste_collection_ps_film() * sent_for_formal_domestic_ps_film()


@component.add(
    name="Waste collected sent to formal domestic treatment pet film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_pet_film": 1,
        "sent_for_formal_domestic_pet_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pet_film():
    return formal_waste_collection_pet_film() * sent_for_formal_domestic_pet_film()


@component.add(
    name="Waste collected sent to formal domestic treatment ps ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_ps_ptt": 1,
        "sent_for_formal_domestic_ps_ptt": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_ps_ptt():
    return formal_waste_collection_ps_ptt() * sent_for_formal_domestic_ps_ptt()


@component.add(
    name="Waste collected sent to formal domestic treatment hdpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_waste_collection_hdpe_film": 1,
        "sent_for_formal_domestic_hdpe_film": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_hdpe_film():
    return formal_waste_collection_hdpe_film() * sent_for_formal_domestic_hdpe_film()


@component.add(
    name="sent for sorting pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pvc_ptt": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_ptt": 1,
    },
)
def sent_for_sorting_pvc_ptt():
    return (
        actual_sent_for_sorting_rate_pvc_ptt()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_ptt()
    )


@component.add(
    name="sent for sorting hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_hdpe_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_hdpe_film": 1,
    },
)
def sent_for_sorting_hdpe_film():
    return (
        actual_sent_for_sorting_rate_hdpe_film()
        * waste_collected_sent_to_formal_domestic_treatment_hdpe_film()
    )


@component.add(
    name="sent for sorting ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_ps_ptt": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_ptt": 1,
    },
)
def sent_for_sorting_ps_ptt():
    return (
        actual_sent_for_sorting_rate_ps_ptt()
        * waste_collected_sent_to_formal_domestic_treatment_ps_ptt()
    )


@component.add(
    name="sent for sorting ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_ps_bottle": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_bottle": 1,
    },
)
def sent_for_sorting_ps_bottle():
    return (
        actual_sent_for_sorting_rate_ps_bottle()
        * waste_collected_sent_to_formal_domestic_treatment_ps_bottle()
    )


@component.add(
    name="sent for sorting ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_ps_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_film": 1,
    },
)
def sent_for_sorting_ps_film():
    return (
        actual_sent_for_sorting_rate_ps_film()
        * waste_collected_sent_to_formal_domestic_treatment_ps_film()
    )


@component.add(
    name="sent for sorting ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_ps_other": 1,
        "waste_collected_sent_to_formal_domestic_treatment_ps_other": 1,
    },
)
def sent_for_sorting_ps_other():
    return (
        actual_sent_for_sorting_rate_ps_other()
        * waste_collected_sent_to_formal_domestic_treatment_ps_other()
    )


@component.add(
    name="sent for sorting other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_other_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_other_film": 1,
    },
)
def sent_for_sorting_other_film():
    return (
        actual_sent_for_sorting_rate_other_film()
        * waste_collected_sent_to_formal_domestic_treatment_other_film()
    )


@component.add(
    name="sent for sorting pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pvc_bottle": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_bottle": 1,
    },
)
def sent_for_sorting_pvc_bottle():
    return (
        actual_sent_for_sorting_rate_pvc_bottle()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_bottle()
    )


@component.add(
    name="sent for sorting pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pvc_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_film": 1,
    },
)
def sent_for_sorting_pvc_film():
    return (
        actual_sent_for_sorting_rate_pvc_film()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_film()
    )


@component.add(
    name="sent for sorting pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pp_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pp_film": 1,
    },
)
def sent_for_sorting_pp_film():
    return (
        actual_sent_for_sorting_rate_pp_film()
        * waste_collected_sent_to_formal_domestic_treatment_pp_film()
    )


@component.add(
    name="sent for sorting idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_ldpe_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_idpe_film": 1,
    },
)
def sent_for_sorting_idpe_film():
    return (
        actual_sent_for_sorting_rate_ldpe_film()
        * waste_collected_sent_to_formal_domestic_treatment_idpe_film()
    )


@component.add(
    name="sent for sorting PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pvc_other": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pvc_other": 1,
    },
)
def sent_for_sorting_pvc_other():
    return (
        actual_sent_for_sorting_rate_pvc_other()
        * waste_collected_sent_to_formal_domestic_treatment_pvc_other()
    )


@component.add(
    name="sent for sorting pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pet_film": 1,
        "waste_collected_sent_to_formal_domestic_treatment_pet_film": 1,
    },
)
def sent_for_sorting_pet_film():
    return (
        actual_sent_for_sorting_rate_pet_film()
        * waste_collected_sent_to_formal_domestic_treatment_pet_film()
    )


@component.add(
    name="pom percentage change after policy introduction pet film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_pet_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pet_film": {
            "initial": {"time": 1, "epr_2a_pom_reduction_percentage_pet_film": 1},
            "step": {"time": 1, "epr_2a_pom_reduction_percentage_pet_film": 1},
        }
    },
)
def pom_percentage_change_after_policy_introduction_pet_film():
    return _smooth_pom_percentage_change_after_policy_introduction_pet_film()


_smooth_pom_percentage_change_after_policy_introduction_pet_film = Smooth(
    lambda: if_then_else(
        time() > 2042, lambda: 1 - epr_2a_pom_reduction_percentage_pet_film(), lambda: 1
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > 2042, lambda: 1 - epr_2a_pom_reduction_percentage_pet_film(), lambda: 1
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pet_film",
)


@component.add(
    name="to waste generated pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pe_bottle": 1},
)
def to_waste_generated_pe_bottle():
    return total_pom_pe_bottle()


@component.add(
    name="Formulation sent for sorting rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"epr_2a_target_percent_sent_for_sorting_pet_film": 1},
)
def formulation_sent_for_sorting_rate_pet_film():
    return epr_2a_target_percent_sent_for_sorting_pet_film()


@component.add(
    name="Total POM pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_pet_ptt": 1, "physical_trade_balance_pet_ptt": 1},
)
def total_pom_pet_ptt():
    return domestic_production_pet_ptt() + physical_trade_balance_pet_ptt()


@component.add(
    name="to waste generated pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pet_ptt": 1},
)
def to_waste_generated_pet_ptt():
    return total_pom_pet_ptt()


@component.add(
    name="Total POM pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_pe_bottle": 1,
        "physical_trade_balance_pe_bottle": 1,
    },
)
def total_pom_pe_bottle():
    return domestic_production_pe_bottle() + physical_trade_balance_pe_bottle()


@component.add(
    name="Actual sent for sorting rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy2_introduction_time": 1,
        "formulation_sent_for_sorting_rate_pet_film": 1,
        "sent_for_sorting_rate_pet_film": 1,
    },
)
def actual_sent_for_sorting_rate_pet_film():
    return if_then_else(
        time() > policy2_introduction_time(),
        lambda: formulation_sent_for_sorting_rate_pet_film(),
        lambda: sent_for_sorting_rate_pet_film(),
    )


@component.add(
    name="domestic production pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pet_ptt": 1,
        "domestic_production_recycled_pet_ptt": 1,
    },
)
def domestic_production_pet_ptt():
    return domestic_production_new_pet_ptt() + domestic_production_recycled_pet_ptt()


@component.add(
    name="to waste generated pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pvc_ptt": 1},
)
def to_waste_generated_pvc_ptt():
    return total_pom_pvc_ptt()


@component.add(
    name="Total POM pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_pvc_film": 1,
        "physical_trade_balance_pvc_film": 1,
    },
)
def total_pom_pvc_film():
    return domestic_production_pvc_film() + physical_trade_balance_pvc_film()


@component.add(
    name="POM pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pet_film": 1},
    other_deps={
        "_integ_pom_pet_film": {
            "initial": {"total_pom_pet_film": 1},
            "step": {
                "domestic_production_pet_film": 1,
                "physical_trade_balance_pet_film": 1,
                "to_waste_generated_pet_film": 1,
            },
        }
    },
)
def pom_pet_film():
    return _integ_pom_pet_film()


_integ_pom_pet_film = Integ(
    lambda: domestic_production_pet_film()
    + physical_trade_balance_pet_film()
    - to_waste_generated_pet_film(),
    lambda: total_pom_pet_film(),
    "_integ_pom_pet_film",
)


@component.add(
    name="Total POM pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_pp_film": 1, "physical_trade_balance_pp_film": 1},
)
def total_pom_pp_film():
    return domestic_production_pp_film() + physical_trade_balance_pp_film()


@component.add(
    name="to waste generated ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ps_film": 1},
)
def to_waste_generated_ps_film():
    return total_pom_ps_film()


@component.add(
    name="to waste generated pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pet_film": 1},
)
def to_waste_generated_pet_film():
    return total_pom_pet_film()


@component.add(
    name="Total POM ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_ps_film": 1, "physical_trade_balance_ps_film": 1},
)
def total_pom_ps_film():
    return domestic_production_ps_film() + physical_trade_balance_ps_film()


@component.add(
    name="Total POM ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_ps_other": 1,
        "physical_trade_balance_ps_other": 1,
    },
)
def total_pom_ps_other():
    return domestic_production_ps_other() + physical_trade_balance_ps_other()


@component.add(
    name="Total POM ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_ps_ptt": 1, "physical_trade_balance_ps_ptt": 1},
)
def total_pom_ps_ptt():
    return domestic_production_ps_ptt() + physical_trade_balance_ps_ptt()


@component.add(
    name="to waste generated pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pp_film": 1},
)
def to_waste_generated_pp_film():
    return total_pom_pp_film()


@component.add(
    name="to waste generated other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_other_film": 1},
)
def to_waste_generated_other_film():
    return total_pom_other_film()


@component.add(
    name="Total POM PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_pvc_other": 1,
        "physical_trade_balance_pvc_other": 1,
    },
)
def total_pom_pvc_other():
    return domestic_production_pvc_other() + physical_trade_balance_pvc_other()


@component.add(
    name="to waste generated ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ps_bottle": 1},
)
def to_waste_generated_ps_bottle():
    return total_pom_ps_bottle()


@component.add(
    name="to waste generated pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pvc_film": 1},
)
def to_waste_generated_pvc_film():
    return total_pom_pvc_film()


@component.add(
    name="to waste generated ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ps_other": 1},
)
def to_waste_generated_ps_other():
    return total_pom_ps_other()


@component.add(
    name="to waste generated ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ps_ptt": 1},
)
def to_waste_generated_ps_ptt():
    return total_pom_ps_ptt()


@component.add(
    name="to waste generated pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pvc_bottle": 1},
)
def to_waste_generated_pvc_bottle():
    return total_pom_pvc_bottle()


@component.add(
    name="Total POM hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_hdpe_film": 1,
        "physical_trade_balance_hdpe_film": 1,
    },
)
def total_pom_hdpe_film():
    return domestic_production_hdpe_film() + physical_trade_balance_hdpe_film()


@component.add(
    name="to waste generated PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pvc_other": 1},
)
def to_waste_generated_pvc_other():
    return total_pom_pvc_other()


@component.add(
    name="Total POM pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_pet_film": 1,
        "physical_trade_balance_pet_film": 1,
    },
)
def total_pom_pet_film():
    return domestic_production_pet_film() + physical_trade_balance_pet_film()


@component.add(
    name="Total pom other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_other_film": 1,
        "physical_trade_balance_other_film": 1,
    },
)
def total_pom_other_film():
    return domestic_production_other_film() + physical_trade_balance_other_film()


@component.add(
    name="Total POM ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_ps_bottle": 1,
        "physical_trade_balance_ps_bottle": 1,
    },
)
def total_pom_ps_bottle():
    return domestic_production_ps_bottle() + physical_trade_balance_ps_bottle()


@component.add(
    name="to waste generated hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_hdpe_film": 1},
)
def to_waste_generated_hdpe_film():
    return total_pom_hdpe_film()


@component.add(
    name="to waste generated idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_idpe_film": 1},
)
def to_waste_generated_idpe_film():
    return total_pom_idpe_film()


@component.add(
    name="Total POM idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_ldpe_film": 1,
        "physical_trade_balance_idpe_film": 1,
    },
)
def total_pom_idpe_film():
    return domestic_production_ldpe_film() + physical_trade_balance_idpe_film()


@component.add(
    name="Total POM pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_pvc_ptt": 1, "physical_trade_balance_pvc_ptt": 1},
)
def total_pom_pvc_ptt():
    return domestic_production_pvc_ptt() + physical_trade_balance_pvc_ptt()


@component.add(
    name="Total POM pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_pvc_bottle": 1,
        "physical_trade_balance_pvc_bottle": 1,
    },
)
def total_pom_pvc_bottle():
    return domestic_production_pvc_bottle() + physical_trade_balance_pvc_bottle()


@component.add(
    name="residual rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_pet_ptt": 2},
)
def residual_rate_pet_ptt():
    return if_then_else(
        1 - actual_sent_for_sorting_rate_pet_ptt() > 0,
        lambda: 1 - actual_sent_for_sorting_rate_pet_ptt(),
        lambda: 0,
    )


@component.add(
    name="Actual sent for sorting rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_sorting_rate_pet_ptt": 1},
)
def actual_sent_for_sorting_rate_pet_ptt():
    return sent_for_sorting_rate_pet_ptt()


@component.add(
    name="Littering rate pet bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "littering_rate_historical_data_pet_bottle": 1,
        "drs_impact_on_pet_bottle": 1,
    },
)
def littering_rate_pet_bottle():
    """
    IF THEN ELSE ( Time>policy1 introduction time pet bottle, littering rate historical data pet bottle*DRS impact on pet bottle*THIRD impact on pet bottle, IF THEN ELSE ( Time>policy3 introduction time pet bottle, littering rate historical data pet bottle*DRS impact on pet bottle*THIRD impact on pet bottle, littering rate historical data pet bottle ) )
    """
    return (
        time() * 0
        + drs_impact_on_pet_bottle() * littering_rate_historical_data_pet_bottle()
    )


@component.add(
    name="Formulation sent for sorting rate ps ptt",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_ps_ptt": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_ps_ptt": {
            "initial": {
                "epr_2b_target_percent_sent_for_sorting_ps_ptt": 1,
                "sent_for_sorting_rate_ps_ptt": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2b_target_percent_sent_for_sorting_ps_ptt": 1,
                "sent_for_sorting_rate_ps_ptt": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_ps_ptt():
    return _smooth_formulation_sent_for_sorting_rate_ps_ptt()


_smooth_formulation_sent_for_sorting_rate_ps_ptt = Smooth(
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_ptt()
        - sent_for_sorting_rate_ps_ptt(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_ptt()
        - sent_for_sorting_rate_ps_ptt(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_ps_ptt",
)


@component.add(
    name="Formulation sent for sorting rate hdpe film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_hdpe_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_hdpe_film": {
            "initial": {
                "epr_2a_target_percent_sent_for_sorting_hdpe_film": 1,
                "sent_for_sorting_rate_hdpe_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_for_sorting_hdpe_film": 1,
                "sent_for_sorting_rate_hdpe_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_hdpe_film():
    return _smooth_formulation_sent_for_sorting_rate_hdpe_film()


_smooth_formulation_sent_for_sorting_rate_hdpe_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_hdpe_film()
        - sent_for_sorting_rate_hdpe_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_hdpe_film()
        - sent_for_sorting_rate_hdpe_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_hdpe_film",
)


@component.add(
    name="Formulation sent for sorting rate ldpe film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_ldpe_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_ldpe_film": {
            "initial": {
                "epr_2a_target_percent_sent_for_sorting_ldpe_film": 1,
                "sent_for_sorting_rate_ldpe_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_for_sorting_ldpe_film": 1,
                "sent_for_sorting_rate_ldpe_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_ldpe_film():
    return _smooth_formulation_sent_for_sorting_rate_ldpe_film()


_smooth_formulation_sent_for_sorting_rate_ldpe_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_ldpe_film()
        - sent_for_sorting_rate_ldpe_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_ldpe_film()
        - sent_for_sorting_rate_ldpe_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_ldpe_film",
)


@component.add(
    name="Formulation sent for sorting rate other film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"time": 1, "_smooth_formulation_sent_for_sorting_rate_other_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_other_film": {
            "initial": {
                "epr_2a_target_percent_sent_of_for_sorting_other_film": 1,
                "sent_for_sorting_rate_other_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_of_for_sorting_other_film": 1,
                "sent_for_sorting_rate_other_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_other_film():
    return time() * 0 + _smooth_formulation_sent_for_sorting_rate_other_film()


_smooth_formulation_sent_for_sorting_rate_other_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_of_for_sorting_other_film()
        - sent_for_sorting_rate_other_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_of_for_sorting_other_film()
        - sent_for_sorting_rate_other_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_other_film",
)


@component.add(
    name="Formulation sent for sorting rate pp film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_pp_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_pp_film": {
            "initial": {
                "epr_2a_target_percent_sent_for_sorting_pp_film": 1,
                "sent_for_sorting_rate_pp_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_for_sorting_pp_film": 1,
                "sent_for_sorting_rate_pp_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_pp_film():
    return _smooth_formulation_sent_for_sorting_rate_pp_film()


_smooth_formulation_sent_for_sorting_rate_pp_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_pp_film()
        - sent_for_sorting_rate_pp_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_pp_film()
        - sent_for_sorting_rate_pp_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_pp_film",
)


@component.add(
    name="Formulation sent for sorting rate ps bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_ps_bottle": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_ps_bottle": {
            "initial": {
                "epr_2b_target_percent_sent_for_sorting_ps_bottle": 1,
                "sent_for_sorting_rate_ps_bottle": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2b_target_percent_sent_for_sorting_ps_bottle": 1,
                "sent_for_sorting_rate_ps_bottle": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_ps_bottle():
    return _smooth_formulation_sent_for_sorting_rate_ps_bottle()


_smooth_formulation_sent_for_sorting_rate_ps_bottle = Smooth(
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_bottle()
        - sent_for_sorting_rate_ps_bottle(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_bottle()
        - sent_for_sorting_rate_ps_bottle(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_ps_bottle",
)


@component.add(
    name="Formulation sent for sorting rate ps film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_ps_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_ps_film": {
            "initial": {
                "epr_2a_target_percent_sent_for_sorting_ps_film": 1,
                "sent_for_sorting_rate_ps_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_for_sorting_ps_film": 1,
                "sent_for_sorting_rate_ps_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_ps_film():
    return _smooth_formulation_sent_for_sorting_rate_ps_film()


_smooth_formulation_sent_for_sorting_rate_ps_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_ps_film()
        - sent_for_sorting_rate_ps_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_ps_film()
        - sent_for_sorting_rate_ps_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_ps_film",
)


@component.add(
    name="Formulation sent for sorting rate ps other",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_ps_other": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_ps_other": {
            "initial": {
                "epr_2b_target_percent_sent_for_sorting_ps_other": 1,
                "sent_for_sorting_rate_ps_other": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2b_target_percent_sent_for_sorting_ps_other": 1,
                "sent_for_sorting_rate_ps_other": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_ps_other():
    return _smooth_formulation_sent_for_sorting_rate_ps_other()


_smooth_formulation_sent_for_sorting_rate_ps_other = Smooth(
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_other()
        - sent_for_sorting_rate_ps_other(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2b_target_percent_sent_for_sorting_ps_other()
        - sent_for_sorting_rate_ps_other(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_ps_other",
)


@component.add(
    name="Formulation sent for sorting rate pvc ptt",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_pvc_ptt": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_pvc_ptt": {
            "initial": {
                "epr_2c_target_percent_sent_for_sorting_pvc_ptt": 1,
                "sent_for_sorting_rate_pvc_ptt": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2c_target_percent_sent_for_sorting_pvc_ptt": 1,
                "sent_for_sorting_rate_pvc_ptt": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_pvc_ptt():
    return _smooth_formulation_sent_for_sorting_rate_pvc_ptt()


_smooth_formulation_sent_for_sorting_rate_pvc_ptt = Smooth(
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_ptt()
        - sent_for_sorting_rate_pvc_ptt(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_ptt()
        - sent_for_sorting_rate_pvc_ptt(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_pvc_ptt",
)


@component.add(
    name="Formulation sent for sorting rate pvc bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_pvc_bottle": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_pvc_bottle": {
            "initial": {
                "epr_2c_target_percent_sent_for_sorting_pvc_film_pvc_bottle": 1,
                "sent_for_sorting_rate_pvc_bottle": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2c_target_percent_sent_for_sorting_pvc_film_pvc_bottle": 1,
                "sent_for_sorting_rate_pvc_bottle": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_pvc_bottle():
    return _smooth_formulation_sent_for_sorting_rate_pvc_bottle()


_smooth_formulation_sent_for_sorting_rate_pvc_bottle = Smooth(
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_film_pvc_bottle()
        - sent_for_sorting_rate_pvc_bottle(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_film_pvc_bottle()
        - sent_for_sorting_rate_pvc_bottle(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_pvc_bottle",
)


@component.add(
    name="Formulation sent for sorting rate pvc film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_pvc_film": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_pvc_film": {
            "initial": {
                "epr_2a_target_percent_sent_for_sorting_pvc_film": 1,
                "sent_for_sorting_rate_pvc_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2a_target_percent_sent_for_sorting_pvc_film": 1,
                "sent_for_sorting_rate_pvc_film": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_pvc_film():
    return _smooth_formulation_sent_for_sorting_rate_pvc_film()


_smooth_formulation_sent_for_sorting_rate_pvc_film = Smooth(
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_pvc_film()
        - sent_for_sorting_rate_pvc_film(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2a_target_percent_sent_for_sorting_pvc_film()
        - sent_for_sorting_rate_pvc_film(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_pvc_film",
)


@component.add(
    name="Formulation sent for sorting rate pvc other",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_formulation_sent_for_sorting_rate_pvc_other": 1},
    other_deps={
        "_smooth_formulation_sent_for_sorting_rate_pvc_other": {
            "initial": {
                "epr_2c_target_percent_sent_for_sorting_pvc_other": 1,
                "sent_for_sorting_rate_pvc_other": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
            "step": {
                "epr_2c_target_percent_sent_for_sorting_pvc_other": 1,
                "sent_for_sorting_rate_pvc_other": 1,
                "policy2_introduction_time": 1,
                "time": 1,
            },
        }
    },
)
def formulation_sent_for_sorting_rate_pvc_other():
    return _smooth_formulation_sent_for_sorting_rate_pvc_other()


_smooth_formulation_sent_for_sorting_rate_pvc_other = Smooth(
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_other()
        - sent_for_sorting_rate_pvc_other(),
        policy2_introduction_time(),
    ),
    lambda: 1.7,
    lambda: step(
        __data["time"],
        epr_2c_target_percent_sent_for_sorting_pvc_other()
        - sent_for_sorting_rate_pvc_other(),
        policy2_introduction_time(),
    ),
    lambda: 1,
    "_smooth_formulation_sent_for_sorting_rate_pvc_other",
)


@component.add(
    name="Actual sent for sorting rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_ldpe_film": 1,
        "sent_for_sorting_rate_ldpe_film": 1,
    },
)
def actual_sent_for_sorting_rate_ldpe_film():
    return (
        formulation_sent_for_sorting_rate_ldpe_film()
        + sent_for_sorting_rate_ldpe_film()
    )


@component.add(
    name="landfill rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="sent for sorting pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_sent_for_sorting_rate_pet_ptt": 1,
        "formal_domestic_treatment_pet_ptt": 1,
    },
)
def sent_for_sorting_pet_ptt():
    return actual_sent_for_sorting_rate_pet_ptt() * formal_domestic_treatment_pet_ptt()


@component.add(
    name="EPR 2A target percent sent for sorting central hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_hdpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting low ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_ldpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_other_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_pet_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_pp_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting central ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_central_ps_bottle():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_ps_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting central ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_central_ps_other():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting central ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_central_ps_ptt():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting central pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_central_pvc_bottle():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_pvc_film():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting central pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_central_pvc_other():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting central pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_central_pvc_ptt():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_hdpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_ldpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_other_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_pet_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_pp_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting high ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_high_ps_bottle():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_ps_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting high ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_high_ps_other():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting high ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_high_ps_ptt():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting high pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_high_pvc_bottle():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting high pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_high_pvc_film():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting high pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_high_pvc_other():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting high pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_high_pvc_ptt():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_low_ldpe_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_ldpe_film": 1,
        "epr_2a_target_percent_sent_for_sorting_central_ldpe_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_ldpe_film():
    return (
        epr_2a_target_percent_sent_for_sorting_low_ldpe_film()
        + epr_2a_target_percent_sent_for_sorting_high_ldpe_film()
        + epr_2a_target_percent_sent_for_sorting_central_ldpe_film()
    )


@component.add(
    name="EPR 2A target percent sent for sorting hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_hdpe_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_hdpe_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_hdpe_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_hdpe_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_hdpe_film()
        + epr_2a_target_percent_sent_for_sorting_high_hdpe_film()
        + epr_2a_target_percent_sent_for_sorting_low_hdpe_film()
    )


@component.add(
    name="EPR 2A target percent sent for sorting low hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_hdpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting central ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_central_ldpe_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting low other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_other_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting low pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_pet_film():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting low pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_pp_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting low ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_low_ps_bottle():
    return 0


@component.add(
    name="EPR 2A target percent sent for sorting low ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_ps_film():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting low ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_low_ps_other():
    return 0


@component.add(
    name="EPR 2B target percent sent for sorting low ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_target_percent_sent_for_sorting_low_ps_ptt():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting low pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_low_pvc_bottle():
    return 0


@component.add(
    name="Actual sent for sorting rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_pvc_ptt": 1,
        "sent_for_sorting_rate_pvc_ptt": 1,
    },
)
def actual_sent_for_sorting_rate_pvc_ptt():
    return formulation_sent_for_sorting_rate_pvc_ptt() + sent_for_sorting_rate_pvc_ptt()


@component.add(
    name="EPR 2B target percent sent for sorting ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_target_percent_sent_for_sorting_central_ps_ptt": 1,
        "epr_2b_target_percent_sent_for_sorting_high_ps_ptt": 1,
        "epr_2b_target_percent_sent_for_sorting_low_ps_ptt": 1,
    },
)
def epr_2b_target_percent_sent_for_sorting_ps_ptt():
    return (
        epr_2b_target_percent_sent_for_sorting_central_ps_ptt()
        + epr_2b_target_percent_sent_for_sorting_high_ps_ptt()
        + epr_2b_target_percent_sent_for_sorting_low_ps_ptt()
    )


@component.add(
    name="EPR 2A target percent sent for sorting pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_pvc_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_pvc_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_pvc_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_pvc_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_pvc_film()
        + epr_2a_target_percent_sent_for_sorting_high_pvc_film()
        + epr_2a_target_percent_sent_for_sorting_low_pvc_film()
    )


@component.add(
    name="EPR 2C target percent sent for sorting pvc film pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_target_percent_sent_for_sorting_central_pvc_bottle": 1,
        "epr_2c_target_percent_sent_for_sorting_high_pvc_bottle": 1,
        "epr_2c_target_percent_sent_for_sorting_low_pvc_bottle": 1,
    },
)
def epr_2c_target_percent_sent_for_sorting_pvc_film_pvc_bottle():
    return (
        epr_2c_target_percent_sent_for_sorting_central_pvc_bottle()
        + epr_2c_target_percent_sent_for_sorting_high_pvc_bottle()
        + epr_2c_target_percent_sent_for_sorting_low_pvc_bottle()
    )


@component.add(
    name="EPR 2C target percent sent for sorting pvc other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_target_percent_sent_for_sorting_central_pvc_other": 1,
        "epr_2c_target_percent_sent_for_sorting_high_pvc_other": 1,
        "epr_2c_target_percent_sent_for_sorting_low_pvc_other": 1,
    },
)
def epr_2c_target_percent_sent_for_sorting_pvc_other():
    return (
        epr_2c_target_percent_sent_for_sorting_central_pvc_other()
        + epr_2c_target_percent_sent_for_sorting_high_pvc_other()
        + epr_2c_target_percent_sent_for_sorting_low_pvc_other()
    )


@component.add(
    name="EPR 2C target percent sent for sorting pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_target_percent_sent_for_sorting_central_pvc_ptt": 1,
        "epr_2c_target_percent_sent_for_sorting_high_pvc_ptt": 1,
        "epr_2c_target_percent_sent_for_sorting_low_pvc_ptt": 1,
    },
)
def epr_2c_target_percent_sent_for_sorting_pvc_ptt():
    return (
        epr_2c_target_percent_sent_for_sorting_central_pvc_ptt()
        + epr_2c_target_percent_sent_for_sorting_high_pvc_ptt()
        + epr_2c_target_percent_sent_for_sorting_low_pvc_ptt()
    )


@component.add(
    name="Actual sent for sorting rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_other_film": 1,
        "sent_for_sorting_rate_other_film": 1,
    },
)
def actual_sent_for_sorting_rate_other_film():
    return (
        formulation_sent_for_sorting_rate_other_film()
        + sent_for_sorting_rate_other_film()
    )


@component.add(
    name="Actual sent for sorting rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_pp_film": 1,
        "sent_for_sorting_rate_pp_film": 1,
    },
)
def actual_sent_for_sorting_rate_pp_film():
    return formulation_sent_for_sorting_rate_pp_film() + sent_for_sorting_rate_pp_film()


@component.add(
    name="Actual sent for sorting rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_ps_bottle": 1,
        "sent_for_sorting_rate_ps_bottle": 1,
    },
)
def actual_sent_for_sorting_rate_ps_bottle():
    return (
        formulation_sent_for_sorting_rate_ps_bottle()
        + sent_for_sorting_rate_ps_bottle()
    )


@component.add(
    name="Actual sent for sorting rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_ps_film": 1,
        "sent_for_sorting_rate_ps_film": 1,
    },
)
def actual_sent_for_sorting_rate_ps_film():
    return formulation_sent_for_sorting_rate_ps_film() + sent_for_sorting_rate_ps_film()


@component.add(
    name="Actual sent for sorting rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_ps_other": 1,
        "sent_for_sorting_rate_ps_other": 1,
    },
)
def actual_sent_for_sorting_rate_ps_other():
    return (
        formulation_sent_for_sorting_rate_ps_other() + sent_for_sorting_rate_ps_other()
    )


@component.add(
    name="Actual sent for sorting rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_ps_ptt": 1,
        "sent_for_sorting_rate_ps_ptt": 1,
    },
)
def actual_sent_for_sorting_rate_ps_ptt():
    return formulation_sent_for_sorting_rate_ps_ptt() + sent_for_sorting_rate_ps_ptt()


@component.add(
    name="EPR 2A target percent sent for sorting low pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_target_percent_sent_for_sorting_low_pvc_film():
    return 0


@component.add(
    name="EPR 2C target percent sent for sorting low pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_low_pvc_other():
    return 0


@component.add(
    name="Actual sent for sorting rate pvc other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_pvc_other": 1,
        "sent_for_sorting_rate_pvc_other": 1,
    },
)
def actual_sent_for_sorting_rate_pvc_other():
    return (
        formulation_sent_for_sorting_rate_pvc_other()
        + sent_for_sorting_rate_pvc_other()
    )


@component.add(
    name="EPR 2C target percent sent for sorting low pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_target_percent_sent_for_sorting_low_pvc_ptt():
    return 0


@component.add(
    name="EPR 2A target percent sent of for sorting other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_other_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_other_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_other_film": 1,
    },
)
def epr_2a_target_percent_sent_of_for_sorting_other_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_other_film()
        + epr_2a_target_percent_sent_for_sorting_high_other_film()
        + epr_2a_target_percent_sent_for_sorting_low_other_film()
    )


@component.add(
    name="EPR 2A target percent sent for sorting pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_pet_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_pet_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_pet_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_pet_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_pet_film()
        + epr_2a_target_percent_sent_for_sorting_high_pet_film()
        + epr_2a_target_percent_sent_for_sorting_low_pet_film()
    )


@component.add(
    name="EPR 2A target percent sent for sorting pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_pp_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_pp_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_pp_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_pp_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_pp_film()
        + epr_2a_target_percent_sent_for_sorting_high_pp_film()
        + epr_2a_target_percent_sent_for_sorting_low_pp_film()
    )


@component.add(
    name="EPR 2B target percent sent for sorting ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_target_percent_sent_for_sorting_central_ps_bottle": 1,
        "epr_2b_target_percent_sent_for_sorting_high_ps_bottle": 1,
        "epr_2b_target_percent_sent_for_sorting_low_ps_bottle": 1,
    },
)
def epr_2b_target_percent_sent_for_sorting_ps_bottle():
    return (
        epr_2b_target_percent_sent_for_sorting_central_ps_bottle()
        + epr_2b_target_percent_sent_for_sorting_high_ps_bottle()
        + epr_2b_target_percent_sent_for_sorting_low_ps_bottle()
    )


@component.add(
    name="EPR 2A target percent sent for sorting ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_target_percent_sent_for_sorting_central_ps_film": 1,
        "epr_2a_target_percent_sent_for_sorting_high_ps_film": 1,
        "epr_2a_target_percent_sent_for_sorting_low_ps_film": 1,
    },
)
def epr_2a_target_percent_sent_for_sorting_ps_film():
    return (
        epr_2a_target_percent_sent_for_sorting_central_ps_film()
        + epr_2a_target_percent_sent_for_sorting_high_ps_film()
        + epr_2a_target_percent_sent_for_sorting_low_ps_film()
    )


@component.add(
    name="Actual sent for sorting rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_pvc_bottle": 1,
        "sent_for_sorting_rate_pvc_bottle": 1,
    },
)
def actual_sent_for_sorting_rate_pvc_bottle():
    return (
        formulation_sent_for_sorting_rate_pvc_bottle()
        + sent_for_sorting_rate_pvc_bottle()
    )


@component.add(
    name="Actual sent for sorting rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_pvc_film": 1,
        "sent_for_sorting_rate_pvc_film": 1,
    },
)
def actual_sent_for_sorting_rate_pvc_film():
    return (
        formulation_sent_for_sorting_rate_pvc_film() + sent_for_sorting_rate_pvc_film()
    )


@component.add(
    name="sent for sorting rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pvc_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pvc_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="EPR 2B target percent sent for sorting ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_target_percent_sent_for_sorting_central_ps_other": 1,
        "epr_2b_target_percent_sent_for_sorting_high_ps_other": 1,
        "epr_2b_target_percent_sent_for_sorting_low_ps_other": 1,
    },
)
def epr_2b_target_percent_sent_for_sorting_ps_other():
    return (
        epr_2b_target_percent_sent_for_sorting_central_ps_other()
        + epr_2b_target_percent_sent_for_sorting_high_ps_other()
        + epr_2b_target_percent_sent_for_sorting_low_ps_other()
    )


@component.add(
    name="sent for sorting rate pvc other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pvc_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="EPR 2C pom reduction percentage central pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_central_pvc_bottle():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage central pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_central_pvc_other():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage central pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_central_pvc_ptt():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage high pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_high_pvc_bottle():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage high pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_high_pvc_other():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage high pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_high_pvc_ptt():
    return 0


@component.add(
    name="Physical trade balance pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pet_film": 1,
        "physical_trade_new_pet_film": 1,
        "pom_percentage_change_after_policy_introduction_pet_film": 1,
    },
)
def physical_trade_balance_pet_film():
    return (
        physcial_trade_recycled_pet_film() + physical_trade_new_pet_film()
    ) * pom_percentage_change_after_policy_introduction_pet_film()


@component.add(
    name="EPR 2C pom reduction percentage low pvc other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_low_pvc_other():
    return 0


@component.add(
    name="EPR 2C pom reduction percentage low pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_low_pvc_ptt():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_pvc_film():
    return 0


@component.add(
    name="Physical trade balance pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pp_film": 1,
        "physical_trade_new_pp_film": 1,
        "pom_percentage_change_after_policy_introduction_pp_film": 1,
    },
)
def physical_trade_balance_pp_film():
    return (
        physcial_trade_recycled_pp_film() + physical_trade_new_pp_film()
    ) * pom_percentage_change_after_policy_introduction_pp_film()


@component.add(
    name="EPR 2A pom reduction percentage high ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_ldpe_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage high hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_hdpe_film():
    return 0


@component.add(
    name="Physical trade balance ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ps_bottle": 1,
        "physical_trade_new_ps_bottle": 1,
        "pom_percentage_change_after_policy_introduction_ps_bottle": 1,
    },
)
def physical_trade_balance_ps_bottle():
    return (
        physcial_trade_recycled_ps_bottle() + physical_trade_new_ps_bottle()
    ) * pom_percentage_change_after_policy_introduction_ps_bottle()


@component.add(
    name="Physical trade balance ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ps_film": 1,
        "physical_trade_new_ps_film": 1,
        "pom_percentage_change_after_policy_introduction_ps_film": 1,
    },
)
def physical_trade_balance_ps_film():
    return (
        physcial_trade_recycled_ps_film() + physical_trade_new_ps_film()
    ) * pom_percentage_change_after_policy_introduction_ps_film()


@component.add(
    name="Physical trade balance ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ps_other": 1,
        "physical_trade_new_ps_other": 1,
        "pom_percentage_change_after_policy_introduction_ps_other": 1,
    },
)
def physical_trade_balance_ps_other():
    return (
        physcial_trade_recycled_ps_other() + physical_trade_new_ps_other()
    ) * pom_percentage_change_after_policy_introduction_ps_other()


@component.add(
    name="Physical trade balance ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ps_ptt": 1,
        "physical_trade_new_ps_ptt": 1,
        "pom_percentage_change_after_policy_introduction_ps_ptt": 1,
    },
)
def physical_trade_balance_ps_ptt():
    return (
        physcial_trade_recycled_ps_ptt() + physical_trade_new_ps_ptt()
    ) * pom_percentage_change_after_policy_introduction_ps_ptt()


@component.add(
    name="Physical trade balance pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pvc_bottle": 1,
        "physical_trade_new_pvc_bottle": 1,
        "pom_percentage_change_after_policy_introduction_pvc_bottle": 1,
    },
)
def physical_trade_balance_pvc_bottle():
    return (
        physcial_trade_recycled_pvc_bottle() + physical_trade_new_pvc_bottle()
    ) * pom_percentage_change_after_policy_introduction_pvc_bottle()


@component.add(
    name="Physical trade balance pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pvc_film": 1,
        "physical_trade_new_pvc_film": 1,
        "pom_percentage_change_after_policy_introduction_pvc_film": 1,
    },
)
def physical_trade_balance_pvc_film():
    return (
        physcial_trade_recycled_pvc_film() + physical_trade_new_pvc_film()
    ) * pom_percentage_change_after_policy_introduction_pvc_film()


@component.add(
    name="Physical trade balance PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pvc_other": 1,
        "physical_trade_new_pvc_other": 1,
        "pom_percentage_change_after_policy_introduction_pvc_other": 1,
    },
)
def physical_trade_balance_pvc_other():
    return (
        physcial_trade_recycled_pvc_other() + physical_trade_new_pvc_other()
    ) * pom_percentage_change_after_policy_introduction_pvc_other()


@component.add(
    name="Physical trade balance pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pvc_ptt": 1,
        "physical_trade_new_pvc_ptt": 1,
        "pom_percentage_change_after_policy_introduction_pvc_ptt": 1,
    },
)
def physical_trade_balance_pvc_ptt():
    return (
        physcial_trade_recycled_pvc_ptt() + physical_trade_new_pvc_ptt()
    ) * pom_percentage_change_after_policy_introduction_pvc_ptt()


@component.add(
    name="EPR 2A pom reduction percentage low pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_pet_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage low pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_pp_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage low ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_ps_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage low pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_pvc_film():
    return 0


@component.add(
    name="domestic production other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_other_film": 1,
        "domestic_production_recycled_other_film": 1,
        "pom_percentage_change_after_policy_introduction_other_film": 1,
    },
)
def domestic_production_other_film():
    return (
        domestic_production_new_other_film() + domestic_production_recycled_other_film()
    ) * pom_percentage_change_after_policy_introduction_other_film()


@component.add(
    name="EPR 2A pom reduction percentage pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_pet_film": 1,
        "epr_2a_pom_reduction_percentage_high_pet_film": 1,
        "epr_2a_pom_reduction_percentage_central_pet_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_pet_film():
    return (
        epr_2a_pom_reduction_percentage_low_pet_film()
        + epr_2a_pom_reduction_percentage_high_pet_film()
        + epr_2a_pom_reduction_percentage_central_pet_film()
    )


@component.add(
    name="EPR 2A pom reduction percentage pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_pp_film": 1,
        "epr_2a_pom_reduction_percentage_high_pp_film": 1,
        "epr_2a_pom_reduction_percentage_central_pp_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_pp_film():
    return (
        epr_2a_pom_reduction_percentage_low_pp_film()
        + epr_2a_pom_reduction_percentage_high_pp_film()
        + epr_2a_pom_reduction_percentage_central_pp_film()
    )


@component.add(
    name="EPR 2A pom reduction percentage ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_ps_film": 1,
        "epr_2a_pom_reduction_percentage_high_ps_film": 1,
        "epr_2a_pom_reduction_percentage_central_ps_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_ps_film():
    return (
        epr_2a_pom_reduction_percentage_low_ps_film()
        + epr_2a_pom_reduction_percentage_high_ps_film()
        + epr_2a_pom_reduction_percentage_central_ps_film()
    )


@component.add(
    name="Physical trade balance hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_hdpe_film": 1,
        "physical_trade_new_hdpe_film": 1,
        "pom_percentage_change_after_policy_introduction_hdpe_film": 1,
    },
)
def physical_trade_balance_hdpe_film():
    return (
        physcial_trade_recycled_hdpe_film() + physical_trade_new_hdpe_film()
    ) * pom_percentage_change_after_policy_introduction_hdpe_film()


@component.add(
    name="EPR 2B pom reduction percentage central ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_central_ps_bottle():
    return 0


@component.add(
    name="EPR 2B pom reduction percentage central ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_central_ps_other():
    return 0


@component.add(
    name="Physical trade balance idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_idpe_film": 1,
        "physical_trade_new_idpe_film": 1,
        "pom_percentage_change_after_policy_introduction_ldpe_film": 1,
    },
)
def physical_trade_balance_idpe_film():
    return (
        physcial_trade_recycled_idpe_film() + physical_trade_new_idpe_film()
    ) * pom_percentage_change_after_policy_introduction_ldpe_film()


@component.add(
    name="domestic production pet film",
    units="fraction",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pet_film": 1,
        "domestic_production_recycled_pet_film": 1,
        "pom_percentage_change_after_policy_introduction_pet_film": 1,
    },
)
def domestic_production_pet_film():
    return (
        domestic_production_new_pet_film() + domestic_production_recycled_pet_film()
    ) * pom_percentage_change_after_policy_introduction_pet_film()


@component.add(
    name="EPR 2B pom reduction percentage high ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_high_ps_other():
    return 0


@component.add(
    name="EPR 2B pom reduction percentage high ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_high_ps_ptt():
    return 0


@component.add(
    name="EPR 2B pom reduction percentage low ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_low_ps_bottle():
    return 0


@component.add(
    name="domestic production pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pp_film": 1,
        "domestic_production_recycled_pp_film": 1,
        "pom_percentage_change_after_policy_introduction_pp_film": 1,
    },
)
def domestic_production_pp_film():
    return (
        domestic_production_new_pp_film() + domestic_production_recycled_pp_film()
    ) * pom_percentage_change_after_policy_introduction_pp_film()


@component.add(
    name="EPR 2B pom reduction percentage low ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_low_ps_ptt():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage low hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_hdpe_film():
    return 0


@component.add(
    name="domestic production ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ps_bottle": 1,
        "domestic_production_recycled_ps_bottle": 1,
        "pom_percentage_change_after_policy_introduction_ps_bottle": 1,
    },
)
def domestic_production_ps_bottle():
    return (
        domestic_production_new_ps_bottle() + domestic_production_recycled_ps_bottle()
    ) * pom_percentage_change_after_policy_introduction_ps_bottle()


@component.add(
    name="EPR 2A pom reduction percentage ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_ldpe_film": 1,
        "epr_2a_pom_reduction_percentage_high_ldpe_film": 1,
        "epr_2a_pom_reduction_percentage_central_ldpe_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_ldpe_film():
    return (
        epr_2a_pom_reduction_percentage_low_ldpe_film()
        + epr_2a_pom_reduction_percentage_high_ldpe_film()
        + epr_2a_pom_reduction_percentage_central_ldpe_film()
    )


@component.add(
    name="EPR 2A pom reduction percentage central ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_ldpe_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_hdpe_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_other_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_pet_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_pp_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage central ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_central_ps_film():
    return 0


@component.add(
    name="policy3 introduction time", comp_type="Constant", comp_subtype="Normal"
)
def policy3_introduction_time():
    return 2030


@component.add(
    name="EPR 2A pom reduction percentage hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_hdpe_film": 1,
        "epr_2a_pom_reduction_percentage_high_hdpe_film": 1,
        "epr_2a_pom_reduction_percentage_central_hdpe_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_hdpe_film():
    return (
        epr_2a_pom_reduction_percentage_low_hdpe_film()
        + epr_2a_pom_reduction_percentage_high_hdpe_film()
        + epr_2a_pom_reduction_percentage_central_hdpe_film()
    )


@component.add(
    name="policy4 introduction time",
    limits=(2014.0, 2042.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def policy4_introduction_time():
    return 2030


@component.add(
    name="pom percentage change after policy introduction hdpe film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_hdpe_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_hdpe_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_hdpe_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_hdpe_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_hdpe_film():
    return _smooth_pom_percentage_change_after_policy_introduction_hdpe_film()


_smooth_pom_percentage_change_after_policy_introduction_hdpe_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_hdpe_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_hdpe_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_hdpe_film",
)


@component.add(
    name="EPR 2A pom reduction percentage high other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_other_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage high pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_pet_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage high pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_pp_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage high ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_ps_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage high pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_high_pvc_film():
    return 0


@component.add(
    name="EPR 2A pom reduction percentage low ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_ldpe_film():
    return 0


@component.add(
    name="pom percentage change after policy introduction ps other",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_ps_other": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_ps_other": {
            "initial": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_other": 1,
            },
            "step": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_other": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_ps_other():
    return _smooth_pom_percentage_change_after_policy_introduction_ps_other()


_smooth_pom_percentage_change_after_policy_introduction_ps_other = Smooth(
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_other(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_other(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_ps_other",
)


@component.add(
    name="EPR 2A pom reduction percentage low other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2a_pom_reduction_percentage_low_other_film():
    return 0


@component.add(
    name="pom percentage change after policy introduction pvc film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_pvc_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pvc_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_pvc_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_pvc_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_pvc_film():
    return _smooth_pom_percentage_change_after_policy_introduction_pvc_film()


_smooth_pom_percentage_change_after_policy_introduction_pvc_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_pvc_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_pvc_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pvc_film",
)


@component.add(
    name="pom percentage change after policy introduction pvc other",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_pvc_other": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pvc_other": {
            "initial": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_other": 1,
            },
            "step": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_other": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_pvc_other():
    return _smooth_pom_percentage_change_after_policy_introduction_pvc_other()


_smooth_pom_percentage_change_after_policy_introduction_pvc_other = Smooth(
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_other(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_other(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pvc_other",
)


@component.add(
    name="domestic production hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_hdpe_film": 1,
        "domestic_production_recycled_hdpe_film": 1,
        "pom_percentage_change_after_policy_introduction_hdpe_film": 1,
    },
)
def domestic_production_hdpe_film():
    return (
        domestic_production_new_hdpe_film() + domestic_production_recycled_hdpe_film()
    ) * pom_percentage_change_after_policy_introduction_hdpe_film()


@component.add(
    name="domestic production ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ps_ptt": 1,
        "domestic_production_recycled_ps_ptt": 1,
        "pom_percentage_change_after_policy_introduction_ps_ptt": 1,
    },
)
def domestic_production_ps_ptt():
    return (
        domestic_production_new_ps_ptt() + domestic_production_recycled_ps_ptt()
    ) * pom_percentage_change_after_policy_introduction_ps_ptt()


@component.add(
    name="EPR 2A pom reduction percentage other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_other_film": 1,
        "epr_2a_pom_reduction_percentage_high_other_film": 1,
        "epr_2a_pom_reduction_percentage_central_other_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_other_film():
    return (
        epr_2a_pom_reduction_percentage_low_other_film()
        + epr_2a_pom_reduction_percentage_high_other_film()
        + epr_2a_pom_reduction_percentage_central_other_film()
    )


@component.add(
    name="domestic production ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ldpe_film": 1,
        "domestic_production_recycled_ldpe_film": 1,
        "pom_percentage_change_after_policy_introduction_ldpe_film": 1,
    },
)
def domestic_production_ldpe_film():
    return (
        domestic_production_new_ldpe_film() + domestic_production_recycled_ldpe_film()
    ) * pom_percentage_change_after_policy_introduction_ldpe_film()


@component.add(
    name="domestic production PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pvc_other": 1,
        "domestic_production_recycled_pvc_other": 1,
        "pom_percentage_change_after_policy_introduction_pvc_other": 1,
    },
)
def domestic_production_pvc_other():
    return (
        domestic_production_new_pvc_other() + domestic_production_recycled_pvc_other()
    ) * pom_percentage_change_after_policy_introduction_pvc_other()


@component.add(
    name="domestic production pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pvc_ptt": 1,
        "domestic_production_recycled_pvc_ptt": 1,
        "pom_percentage_change_after_policy_introduction_pvc_ptt": 1,
    },
)
def domestic_production_pvc_ptt():
    return (
        domestic_production_new_pvc_ptt() + domestic_production_recycled_pvc_ptt()
    ) * pom_percentage_change_after_policy_introduction_pvc_ptt()


@component.add(
    name="EPR 2A pom reduction percentage pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2a_pom_reduction_percentage_low_pvc_film": 1,
        "epr_2a_pom_reduction_percentage_high_pvc_film": 1,
        "epr_2a_pom_reduction_percentage_central_pvc_film": 1,
    },
)
def epr_2a_pom_reduction_percentage_pvc_film():
    return (
        epr_2a_pom_reduction_percentage_low_pvc_film()
        + epr_2a_pom_reduction_percentage_high_pvc_film()
        + epr_2a_pom_reduction_percentage_central_pvc_film()
    )


@component.add(
    name="pom percentage change after policy introduction ps ptt",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_ps_ptt": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_ps_ptt": {
            "initial": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_ptt": 1,
            },
            "step": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_ptt": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_ps_ptt():
    return _smooth_pom_percentage_change_after_policy_introduction_ps_ptt()


_smooth_pom_percentage_change_after_policy_introduction_ps_ptt = Smooth(
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_ptt(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_ptt(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_ps_ptt",
)


@component.add(
    name="pom percentage change after policy introduction pvc bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "_smooth_pom_percentage_change_after_policy_introduction_pvc_bottle": 1
    },
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pvc_bottle": {
            "initial": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_bottle": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_pvc_bottle():
    return _smooth_pom_percentage_change_after_policy_introduction_pvc_bottle()


_smooth_pom_percentage_change_after_policy_introduction_pvc_bottle = Smooth(
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_bottle(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_bottle(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pvc_bottle",
)


@component.add(
    name="EPR 2B pom reduction percentage central ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_central_ps_ptt():
    return 0


@component.add(
    name="EPR 2B pom reduction percentage high ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_high_ps_bottle():
    return 0


@component.add(
    name="pom percentage change after policy introduction pp film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_pp_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pp_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_pp_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_pp_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_pp_film():
    return _smooth_pom_percentage_change_after_policy_introduction_pp_film()


_smooth_pom_percentage_change_after_policy_introduction_pp_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_pp_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_pp_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pp_film",
)


@component.add(
    name="pom percentage change after policy introduction ps bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_ps_bottle": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_ps_bottle": {
            "initial": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy3_introduction_time": 1,
                "pom_reduction_percentage_ps_bottle": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_ps_bottle():
    return _smooth_pom_percentage_change_after_policy_introduction_ps_bottle()


_smooth_pom_percentage_change_after_policy_introduction_ps_bottle = Smooth(
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_bottle(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy3_introduction_time(),
        lambda: 1 - pom_reduction_percentage_ps_bottle(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_ps_bottle",
)


@component.add(
    name="Physical trade balance other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_other_film": 1,
        "physical_trade_new_other_film": 1,
        "pom_percentage_change_after_policy_introduction_other_film": 1,
    },
)
def physical_trade_balance_other_film():
    return (
        physcial_trade_recycled_other_film() + physical_trade_new_other_film()
    ) * pom_percentage_change_after_policy_introduction_other_film()


@component.add(
    name="EPR 2B pom reduction percentage low ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2b_pom_reduction_percentage_low_ps_other():
    return 0


@component.add(
    name="pom reduction percentage pvc other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_pom_reduction_percentage_low_pvc_other": 1,
        "epr_2c_pom_reduction_percentage_high_pvc_other": 1,
        "epr_2c_pom_reduction_percentage_central_pvc_other": 1,
    },
)
def pom_reduction_percentage_pvc_other():
    return (
        epr_2c_pom_reduction_percentage_low_pvc_other()
        + epr_2c_pom_reduction_percentage_high_pvc_other()
        + epr_2c_pom_reduction_percentage_central_pvc_other()
    )


@component.add(
    name="pom reduction percentage pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_pom_reduction_percentage_low_pvc_ptt": 1,
        "epr_2c_pom_reduction_percentage_high_pvc_ptt": 1,
        "epr_2c_pom_reduction_percentage_central_pvc_ptt": 1,
    },
)
def pom_reduction_percentage_pvc_ptt():
    return (
        epr_2c_pom_reduction_percentage_low_pvc_ptt()
        + epr_2c_pom_reduction_percentage_high_pvc_ptt()
        + epr_2c_pom_reduction_percentage_central_pvc_ptt()
    )


@component.add(
    name="domestic production ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ps_film": 1,
        "domestic_production_recycled_ps_film": 1,
        "pom_percentage_change_after_policy_introduction_ps_film": 1,
    },
)
def domestic_production_ps_film():
    return (
        domestic_production_new_ps_film() + domestic_production_recycled_ps_film()
    ) * pom_percentage_change_after_policy_introduction_ps_film()


@component.add(
    name="domestic production ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ps_other": 1,
        "domestic_production_recycled_ps_other": 1,
        "pom_percentage_change_after_policy_introduction_ps_other": 1,
    },
)
def domestic_production_ps_other():
    return (
        domestic_production_new_ps_other() + domestic_production_recycled_ps_other()
    ) * pom_percentage_change_after_policy_introduction_ps_other()


@component.add(
    name="pom percentage change after policy introduction pvc ptt",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_pvc_ptt": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_pvc_ptt": {
            "initial": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_ptt": 1,
            },
            "step": {
                "time": 1,
                "policy4_introduction_time": 1,
                "pom_reduction_percentage_pvc_ptt": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_pvc_ptt():
    return _smooth_pom_percentage_change_after_policy_introduction_pvc_ptt()


_smooth_pom_percentage_change_after_policy_introduction_pvc_ptt = Smooth(
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_ptt(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy4_introduction_time(),
        lambda: 1 - pom_reduction_percentage_pvc_ptt(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_pvc_ptt",
)


@component.add(
    name="domestic production pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pvc_bottle": 1,
        "domestic_production_recycled_pvc_bottle": 1,
        "pom_percentage_change_after_policy_introduction_pvc_bottle": 1,
    },
)
def domestic_production_pvc_bottle():
    return (
        domestic_production_new_pvc_bottle() + domestic_production_recycled_pvc_bottle()
    ) * pom_percentage_change_after_policy_introduction_pvc_bottle()


@component.add(
    name="EPR 2C pom reduction percentage low pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def epr_2c_pom_reduction_percentage_low_pvc_bottle():
    return 0


@component.add(
    name="domestic production pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_recycled_pvc_film": 1,
        "domestic_production_new_pvc_film": 1,
        "pom_percentage_change_after_policy_introduction_pvc_film": 1,
    },
)
def domestic_production_pvc_film():
    return (
        domestic_production_recycled_pvc_film() + domestic_production_new_pvc_film()
    ) * pom_percentage_change_after_policy_introduction_pvc_film()


@component.add(
    name="pom percentage change after policy introduction ps film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_ps_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_ps_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_ps_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_ps_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_ps_film():
    return _smooth_pom_percentage_change_after_policy_introduction_ps_film()


_smooth_pom_percentage_change_after_policy_introduction_ps_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_ps_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_ps_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_ps_film",
)


@component.add(
    name="pom reduction percentage pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2c_pom_reduction_percentage_low_pvc_bottle": 1,
        "epr_2c_pom_reduction_percentage_high_pvc_bottle": 1,
        "epr_2c_pom_reduction_percentage_central_pvc_bottle": 1,
    },
)
def pom_reduction_percentage_pvc_bottle():
    return (
        epr_2c_pom_reduction_percentage_low_pvc_bottle()
        + epr_2c_pom_reduction_percentage_high_pvc_bottle()
        + epr_2c_pom_reduction_percentage_central_pvc_bottle()
    )


@component.add(
    name="pom reduction percentage ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_pom_reduction_percentage_low_ps_bottle": 1,
        "epr_2b_pom_reduction_percentage_high_ps_bottle": 1,
        "epr_2b_pom_reduction_percentage_central_ps_bottle": 1,
    },
)
def pom_reduction_percentage_ps_bottle():
    return (
        epr_2b_pom_reduction_percentage_low_ps_bottle()
        + epr_2b_pom_reduction_percentage_high_ps_bottle()
        + epr_2b_pom_reduction_percentage_central_ps_bottle()
    )


@component.add(
    name="pom reduction percentage ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_pom_reduction_percentage_low_ps_other": 1,
        "epr_2b_pom_reduction_percentage_high_ps_other": 1,
        "epr_2b_pom_reduction_percentage_central_ps_other": 1,
    },
)
def pom_reduction_percentage_ps_other():
    return (
        epr_2b_pom_reduction_percentage_low_ps_other()
        + epr_2b_pom_reduction_percentage_high_ps_other()
        + epr_2b_pom_reduction_percentage_central_ps_other()
    )


@component.add(
    name="pom reduction percentage ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "epr_2b_pom_reduction_percentage_low_ps_ptt": 1,
        "epr_2b_pom_reduction_percentage_high_ps_ptt": 1,
        "epr_2b_pom_reduction_percentage_central_ps_ptt": 1,
    },
)
def pom_reduction_percentage_ps_ptt():
    return (
        epr_2b_pom_reduction_percentage_low_ps_ptt()
        + epr_2b_pom_reduction_percentage_high_ps_ptt()
        + epr_2b_pom_reduction_percentage_central_ps_ptt()
    )


@component.add(
    name="pom percentage change after policy introduction other film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "_smooth_pom_percentage_change_after_policy_introduction_other_film": 1
    },
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_other_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_other_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_other_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_other_film():
    return _smooth_pom_percentage_change_after_policy_introduction_other_film()


_smooth_pom_percentage_change_after_policy_introduction_other_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_other_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_other_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_other_film",
)


@component.add(
    name="DRS formulation for la collected pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "drs_formulation_for_la_collected_low_pet_bottle": 1,
        "drs_formulation_for_la_collected_high_pet_bottle": 1,
        "drs_formulation_for_la_collected_central_pet_bottle": 1,
    },
)
def drs_formulation_for_la_collected_pet_bottle():
    return (
        drs_formulation_for_la_collected_low_pet_bottle()
        + drs_formulation_for_la_collected_high_pet_bottle()
        + drs_formulation_for_la_collected_central_pet_bottle()
    )


@component.add(
    name="DRS formulation for recycling rate central pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_recycling_rate_central_pet_bottle():
    """
    0.03
    """
    return 0


@component.add(
    name="DRS formulation for recycling rate high pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_recycling_rate_high_pet_bottle():
    """
    0.03
    """
    return 0


@component.add(
    name="DRS formulation for recycling rate low pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_recycling_rate_low_pet_bottle():
    """
    0.03
    """
    return 0


@component.add(
    name="DRS formulation for recycling rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "drs_formulation_for_recycling_rate_low_pet_bottle": 1,
        "drs_formulation_for_recycling_rate_high_pet_bottle": 1,
        "drs_formulation_for_recycling_rate_central_pet_bottle": 1,
    },
)
def drs_formulation_for_recycling_rate_pet_bottle():
    """
    0.03
    """
    return (
        drs_formulation_for_recycling_rate_low_pet_bottle()
        + drs_formulation_for_recycling_rate_high_pet_bottle()
        + drs_formulation_for_recycling_rate_central_pet_bottle()
    )


@component.add(
    name="DRS wmc collected formulation central pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_wmc_collected_formulation_central_pet_bottle():
    """
    0.355872
    """
    return 0


@component.add(
    name="DRS wmc collected formulation high pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_wmc_collected_formulation_high_pet_bottle():
    return 0


@component.add(
    name="Actual la collected pet bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_actual_la_collected_pet_bottle": 1},
    other_deps={
        "_smooth_actual_la_collected_pet_bottle": {
            "initial": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_formulation_for_la_collected_pet_bottle": 1,
                "historical_data_for_la_collected_pet_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_formulation_for_la_collected_pet_bottle": 1,
                "historical_data_for_la_collected_pet_bottle": 1,
            },
        }
    },
)
def actual_la_collected_pet_bottle():
    """
    IF THEN ELSE ( Time>policy1 introduction time pet bottle, historical data for la collected pet bottle*DRS formulation for la collected pet bottle*Impact formulation for la collected pet bottle , IF THEN ELSE ( Time>policy4 introduction time, historical data for la collected pet bottle*DRS formulation for la collected pet bottle*Impact formulation for la collected pet bottle , historical data for la collected pet bottle ) )
    """
    return _smooth_actual_la_collected_pet_bottle()


_smooth_actual_la_collected_pet_bottle = Smooth(
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_formulation_for_la_collected_pet_bottle(),
        lambda: historical_data_for_la_collected_pet_bottle(),
    ),
    lambda: 1.7,
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_formulation_for_la_collected_pet_bottle(),
        lambda: historical_data_for_la_collected_pet_bottle(),
    ),
    lambda: 1,
    "_smooth_actual_la_collected_pet_bottle",
)


@component.add(
    name="DRS wmc collected formulation pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "drs_wmc_collected_formulation_low_pet_bottle": 1,
        "drs_wmc_collected_formulation_central_pet_bottle": 1,
        "drs_wmc_collected_formulation_high_pet_bottle": 1,
    },
)
def drs_wmc_collected_formulation_pet_bottle():
    return (
        drs_wmc_collected_formulation_low_pet_bottle()
        + drs_wmc_collected_formulation_central_pet_bottle()
        + drs_wmc_collected_formulation_high_pet_bottle()
    )


@component.add(
    name="Actual rvm collected pet bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_actual_rvm_collected_pet_bottle": 1},
    other_deps={
        "_smooth_actual_rvm_collected_pet_bottle": {
            "initial": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_rvm_collected_formulation_pet_bottle": 1,
                "rvm_historical_pet_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_rvm_collected_formulation_pet_bottle": 1,
                "rvm_historical_pet_bottle": 1,
            },
        }
    },
)
def actual_rvm_collected_pet_bottle():
    """
    IF THEN ELSE ( Time>policy1 introduction time pet bottle, rvm historical pet bottle+DRS rvm collected formulation pet bottle*Impact rvm collected formulation pet bottle , IF THEN ELSE ( Time>policy4 introduction time, rvm historical pet bottle+DRS rvm collected formulation pet bottle*Impact rvm collected formulation pet bottle , rvm historical pet bottle ) )
    """
    return _smooth_actual_rvm_collected_pet_bottle()


_smooth_actual_rvm_collected_pet_bottle = Smooth(
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_rvm_collected_formulation_pet_bottle(),
        lambda: rvm_historical_pet_bottle(),
    ),
    lambda: 1.7,
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_rvm_collected_formulation_pet_bottle(),
        lambda: rvm_historical_pet_bottle(),
    ),
    lambda: 1,
    "_smooth_actual_rvm_collected_pet_bottle",
)


@component.add(
    name="DRS rvm collected formulation central pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_rvm_collected_formulation_central_pet_bottle():
    return 0


@component.add(
    name="DRS rvm collected formulation high pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_rvm_collected_formulation_high_pet_bottle():
    return 0


@component.add(
    name="DRS rvm collected formulation low pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_rvm_collected_formulation_low_pet_bottle():
    return 0


@component.add(
    name="DRS rvm collected formulation pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "drs_rvm_collected_formulation_central_pet_bottle": 1,
        "drs_rvm_collected_formulation_high_pet_bottle": 1,
        "drs_rvm_collected_formulation_low_pet_bottle": 1,
    },
)
def drs_rvm_collected_formulation_pet_bottle():
    return (
        drs_rvm_collected_formulation_central_pet_bottle()
        + drs_rvm_collected_formulation_high_pet_bottle()
        + drs_rvm_collected_formulation_low_pet_bottle()
    )


@component.add(
    name="Actual wmc collected pet bottle",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_actual_wmc_collected_pet_bottle": 1},
    other_deps={
        "_smooth_actual_wmc_collected_pet_bottle": {
            "initial": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_wmc_collected_formulation_pet_bottle": 1,
                "wmc_historical_pet_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "drs_wmc_collected_formulation_pet_bottle": 1,
                "wmc_historical_pet_bottle": 1,
            },
        }
    },
)
def actual_wmc_collected_pet_bottle():
    """
    IF THEN ELSE ( Time>policy1 introduction time pet bottle, wmc historical pet bottle*DRS wmc collected formulation pet bottle*Impact wmc collected formulation pet bottle , IF THEN ELSE ( Time>policy4 introduction time, wmc historical pet bottle*DRS wmc collected formulation pet bottle*Impact wmc collected formulation pet bottle , wmc historical pet bottle ) )
    """
    return _smooth_actual_wmc_collected_pet_bottle()


_smooth_actual_wmc_collected_pet_bottle = Smooth(
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_wmc_collected_formulation_pet_bottle(),
        lambda: wmc_historical_pet_bottle(),
    ),
    lambda: 1.7,
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_wmc_collected_formulation_pet_bottle(),
        lambda: wmc_historical_pet_bottle(),
    ),
    lambda: 1,
    "_smooth_actual_wmc_collected_pet_bottle",
)


@component.add(
    name="DRS formulation for la collected high pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_la_collected_high_pet_bottle():
    return 0


@component.add(
    name="DRS formulation for la collected low pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_la_collected_low_pet_bottle():
    return 0


@component.add(
    name="DRS formulation for la collected central pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_formulation_for_la_collected_central_pet_bottle():
    return 0


@component.add(
    name="DRS wmc collected formulation low pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_wmc_collected_formulation_low_pet_bottle():
    return 0


@component.add(
    name="rate of recycling reject pet bottle",
    units="1/Quarter",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rate_of_recycling_reject_pet_bottle": 1},
    other_deps={
        "_smooth_rate_of_recycling_reject_pet_bottle": {
            "initial": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "historical_on_recycling_pet_bottle": 2,
                "drs_formulation_for_recycling_rate_pet_bottle": 1,
            },
            "step": {
                "time": 1,
                "policy1_introduction_time_pet_bottle": 1,
                "historical_on_recycling_pet_bottle": 2,
                "drs_formulation_for_recycling_rate_pet_bottle": 1,
            },
        }
    },
)
def rate_of_recycling_reject_pet_bottle():
    """
    IF THEN ELSE ( Time>policy1 introduction time pet bottle, historical on recycling pet bottle*Impact formulation for recycling rate pet bottle*DRS formulation for recycling rate pet bottle , IF THEN ELSE ( Time>policy4 introduction time, historical on recycling pet bottle*Impact formulation for recycling rate pet bottle*DRS formulation for recycling rate pet bottle , historical on recycling pet bottle ) )
    """
    return _smooth_rate_of_recycling_reject_pet_bottle()


_smooth_rate_of_recycling_reject_pet_bottle = Smooth(
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_formulation_for_recycling_rate_pet_bottle()
        * historical_on_recycling_pet_bottle(),
        lambda: historical_on_recycling_pet_bottle(),
    ),
    lambda: 1.7,
    lambda: if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: drs_formulation_for_recycling_rate_pet_bottle()
        * historical_on_recycling_pet_bottle(),
        lambda: historical_on_recycling_pet_bottle(),
    ),
    lambda: 1,
    "_smooth_rate_of_recycling_reject_pet_bottle",
)


@component.add(
    name="DRS littering rate formulation central pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_littering_rate_formulation_central_pet_bottle():
    return 0


@component.add(
    name="DRS littering rate formulation high pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_littering_rate_formulation_high_pet_bottle():
    return 0


@component.add(
    name="DRS littering rate formulation low pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def drs_littering_rate_formulation_low_pet_bottle():
    return 0


@component.add(
    name="DRS littering rate formulation pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "drs_littering_rate_formulation_central_pet_bottle": 1,
        "drs_littering_rate_formulation_high_pet_bottle": 1,
        "drs_littering_rate_formulation_low_pet_bottle": 1,
    },
)
def drs_littering_rate_formulation_pet_bottle():
    return (
        drs_littering_rate_formulation_central_pet_bottle()
        + drs_littering_rate_formulation_high_pet_bottle()
        + drs_littering_rate_formulation_low_pet_bottle()
    )


@component.add(
    name="littering rate historical data pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def littering_rate_historical_data_pet_bottle():
    return np.interp(time(), [2014.0, 2020.0], [0.04, 0.04])


@component.add(
    name="DRS impact on pet bottle",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_drs_impact_on_pet_bottle": 1},
    other_deps={
        "_smooth_drs_impact_on_pet_bottle": {
            "initial": {
                "policy1_introduction_time_pet_bottle": 1,
                "time": 1,
                "drs_littering_rate_formulation_pet_bottle": 1,
            },
            "step": {
                "policy1_introduction_time_pet_bottle": 1,
                "time": 1,
                "drs_littering_rate_formulation_pet_bottle": 1,
            },
        }
    },
)
def drs_impact_on_pet_bottle():
    return _smooth_drs_impact_on_pet_bottle()


_smooth_drs_impact_on_pet_bottle = Smooth(
    lambda: if_then_else(
        policy1_introduction_time_pet_bottle() < time(),
        lambda: 1 - drs_littering_rate_formulation_pet_bottle(),
        lambda: 1,
    ),
    lambda: 1.5,
    lambda: if_then_else(
        policy1_introduction_time_pet_bottle() < time(),
        lambda: 1 - drs_littering_rate_formulation_pet_bottle(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_drs_impact_on_pet_bottle",
)


@component.add(
    name="Rate of chemical recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_of_chemical_recycling_pet_ptt():
    return np.interp(time(), [2014, 2016, 2018, 2020], [0, 0, 0, 0])


@component.add(
    name="rate of mechanical recycling pet ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_of_mechanical_recycling_pet_ptt():
    return np.interp(time(), [2014, 2018], [1, 1])


@component.add(
    name="littering rate historical data pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def littering_rate_historical_data_pet_ptt():
    return np.interp(time(), [2014.0, 2019.0], [0.04, 0.04])


@component.add(
    name="sent for formal domestic pet ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_formal_domestic_pet_ptt():
    """
    0.4
    """
    return np.interp(
        time(),
        [2014.0, 2015.0, 2016.0, 2017.0, 2017.0],
        [0.994, 0.994, 0.994, 0.994, 0.994],
    )


@component.add(
    name="rate to illegal collection pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_to_illegal_collection_pet_ptt():
    return np.interp(time(), [2014.0, 2020.0], [0.006, 0.006])


@component.add(
    name="historical on recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_recycling_pet_ptt():
    return np.interp(time(), [2014.0, 2020.0], [0.103, 0.103])


@component.add(
    name="rvm historical pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rvm_historical_pet_ptt():
    return np.interp(time(), [2014, 2020], [0, 0])


@component.add(
    name="physcial trade recycled idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_idpe_film": 1},
)
def physcial_trade_recycled_idpe_film():
    return trade_data_idpe_film() / 2


@component.add(
    name="physcial trade recycled idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_other": 1},
)
def physcial_trade_recycled_idpe_other():
    return trade_data_ldpe_other() / 2


@component.add(
    name="physcial trade recycled ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_ptt": 1},
)
def physcial_trade_recycled_ldpe_ptt():
    return trade_data_ldpe_ptt() / 2


@component.add(
    name="physcial trade recycled other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_bottle": 1},
)
def physcial_trade_recycled_other_bottle():
    return trade_data_other_bottle() / 2


@component.add(
    name="physcial trade recycled other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_film": 1},
)
def physcial_trade_recycled_other_film():
    return trade_data_other_film() / 2


@component.add(
    name="physcial trade recycled other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_other": 1},
)
def physcial_trade_recycled_other_other():
    return trade_data_other_other() / 2


@component.add(
    name="physcial trade recycled Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_ptt": 1},
)
def physcial_trade_recycled_other_ptt():
    return trade_data_other_ptt() / 2


@component.add(
    name="physcial trade recycled pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"data_to_physical_trade_pe_bottle": 1},
)
def physcial_trade_recycled_pe_bottle():
    return data_to_physical_trade_pe_bottle() / 2


@component.add(
    name="physcial trade recycled pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_film": 1},
)
def physcial_trade_recycled_pe_film():
    return trade_data_pe_film() / 2


@component.add(
    name="physcial trade recycled pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_other": 1},
)
def physcial_trade_recycled_pe_other():
    return trade_data_pe_other() / 2


@component.add(
    name="physcial trade recycled pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_ptt": 1},
)
def physcial_trade_recycled_pe_ptt():
    return trade_data_pe_ptt() / 2


@component.add(
    name="physcial trade recycled pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_bottle": 1},
)
def physcial_trade_recycled_pet_bottle():
    return trade_data_pet_bottle() / 2


@component.add(
    name="physcial trade recycled pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_film": 1},
)
def physcial_trade_recycled_pet_film():
    return trade_data_pet_film() / 2


@component.add(
    name="physcial trade recycled Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_other": 1},
)
def physcial_trade_recycled_pet_other():
    return trade_data_pet_other() / 2


@component.add(
    name="domestic production new Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pet_other": 1,
        "domestic_production_recycled_pet_other": 1,
    },
)
def domestic_production_new_pet_other():
    return placed_on_market_pet_other() / 2 - domestic_production_recycled_pet_other()


@component.add(
    name="physcial trade recycled pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_bottle": 1},
)
def physcial_trade_recycled_pp_bottle():
    return trade_data_pp_bottle() / 2


@component.add(
    name="physcial trade recycled pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_film": 1},
)
def physcial_trade_recycled_pp_film():
    return trade_data_pp_film() / 2


@component.add(
    name="physcial trade recycled pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_other": 1},
)
def physcial_trade_recycled_pp_other():
    return trade_data_pp_other() / 2


@component.add(
    name="physcial trade recycled pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_ptt": 1},
)
def physcial_trade_recycled_pp_ptt():
    return trade_data_pp_ptt() / 2


@component.add(
    name="physcial trade recycled ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_bottle": 1},
)
def physcial_trade_recycled_ps_bottle():
    return trade_data_ps_bottle() / 2


@component.add(
    name="physcial trade recycled ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_film": 1},
)
def physcial_trade_recycled_ps_film():
    return trade_data_ps_film() / 2


@component.add(
    name="physcial trade recycled ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_other": 1},
)
def physcial_trade_recycled_ps_other():
    return trade_data_ps_other() / 2


@component.add(
    name="physcial trade recycled ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_ptt": 1},
)
def physcial_trade_recycled_ps_ptt():
    return trade_data_ps_ptt() / 2


@component.add(
    name="physcial trade recycled pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_bottle": 1},
)
def physcial_trade_recycled_pvc_bottle():
    return trade_data_pvc_bottle() / 2


@component.add(
    name="physcial trade recycled pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_film": 1},
)
def physcial_trade_recycled_pvc_film():
    return trade_data_pvc_film() / 2


@component.add(
    name="physcial trade recycled PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_other": 1},
)
def physcial_trade_recycled_pvc_other():
    return trade_data_pvc_other() / 2


@component.add(
    name="physcial trade recycled pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_ptt": 1},
)
def physcial_trade_recycled_pvc_ptt():
    return trade_data_pvc_ptt() / 2


@component.add(
    name="placed on market pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            470.75,
            479.22,
            479.22,
            479.22,
            762.27,
            1080.42,
            5249.89,
            9631.39,
            539.4,
            584.5,
            588.05,
            590.95,
            593.17,
            594.7,
            596.14,
            597.49,
            598.75,
            599.92,
            601.01,
            602.01,
            602.93,
            603.8,
            604.62,
            605.4,
            606.14,
            606.86,
            607.54,
            608.18,
            608.78,
        ],
    )


@component.add(
    name="placed on market pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            48486.9,
            49359.6,
            49359.6,
            49359.6,
            53612.9,
            58342.7,
            62446.1,
            66853.2,
            76056.0,
            82414.5,
            82915.6,
            83323.4,
            83636.3,
            83852.5,
            84055.7,
            84246.0,
            84423.6,
            84588.8,
            84741.9,
            84883.3,
            85013.8,
            85135.5,
            85250.8,
            85360.7,
            85465.9,
            85566.7,
            85662.6,
            85753.2,
            85838.5,
        ],
    )


@component.add(
    name="placed on market pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            470.75,
            479.22,
            479.22,
            479.22,
            1016.36,
            1620.63,
            2763.1,
            3965.87,
            3775.83,
            4091.5,
            4116.38,
            4136.62,
            4152.16,
            4162.89,
            4172.98,
            4182.43,
            4191.24,
            4199.45,
            4207.05,
            4214.06,
            4220.54,
            4226.58,
            4232.31,
            4237.77,
            4243.0,
            4247.99,
            4252.76,
            4257.25,
            4261.48,
        ],
    )


@component.add(
    name="placed on market pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
        ],
        [
            5648.96,
            5750.64,
            5750.64,
            5750.64,
            4065.43,
            2160.84,
            2486.79,
            2832.76,
            1078.81,
            1169.0,
            1176.11,
            1181.89,
            1186.33,
            1189.4,
            1192.28,
            1194.98,
            1199.84,
            1202.01,
            1204.02,
            1205.87,
            1207.6,
            1209.23,
            1210.79,
            1212.28,
            1213.71,
            1215.07,
            1216.36,
            1217.57,
        ],
    )


@component.add(
    name="placed on market pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pet_bottle():
    return np.interp(
        time(),
        [
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
        ],
        [
            208070,
            211815,
            211815,
            211815,
            225886,
            241474,
            231271,
            220955,
            216301,
            234385,
            235810,
            236969,
            237859,
            238474,
            239052,
            239593,
            240098,
            240568,
            241004,
            241406,
            241777,
            242123,
            242451,
            242764,
            243063,
            243349,
            243622,
            243880,
            244122,
        ],
    )


@component.add(
    name="placed on market pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pet_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            14593.1,
            14855.8,
            14855.8,
            14855.8,
            19056.7,
            23769.2,
            22381.1,
            20962.4,
            17800.3,
            19288.5,
            19405.8,
            19501.2,
            19574.5,
            19625.0,
            19672.6,
            19717.2,
            19758.7,
            19797.4,
            19833.2,
            19866.3,
            19896.8,
            19925.3,
            19952.3,
            19978.0,
            20002.7,
            20026.2,
            20048.7,
            20069.9,
            20089.9,
        ],
    )


@component.add(
    name="placed on market pet other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pet_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            14028.0,
            14113.3,
            14182.7,
            14236.0,
            14272.8,
            14307.4,
            14339.8,
            14370.0,
            14398.1,
            14424.2,
            14448.2,
            14470.4,
            14491.1,
            14510.8,
            14529.5,
            14547.4,
            14564.5,
            14580.9,
            14596.3,
            14610.8,
            18829.9,
            19168.8,
            19168.8,
            19168.8,
            21343.5,
            23769.2,
            26249.4,
            28894.2,
            12945.7,
        ],
    )


@component.add(
    name="physical trade new pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_film": 1},
)
def physical_trade_new_pe_film():
    return trade_data_pe_film() / 2


@component.add(
    name="placed on market pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pp_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
        ],
        [
            5648.96,
            5750.64,
            5750.64,
            5750.64,
            4065.43,
            2160.84,
            2486.79,
            2832.76,
            1078.81,
            1169.0,
            1176.11,
            1181.89,
            1186.33,
            1189.4,
            1192.28,
            1194.98,
            1199.84,
            1202.01,
            1204.02,
            1205.87,
            1207.6,
            1209.23,
            1210.79,
            1212.28,
            1213.71,
            1215.07,
            1216.36,
            1217.57,
        ],
    )


@component.add(
    name="placed on market pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pp_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            62609.3,
            63736.2,
            63736.2,
            63736.2,
            59202.9,
            54021.0,
            72393.2,
            91781.5,
            64189.1,
            69555.5,
            69978.4,
            70322.5,
            70586.7,
            70769.1,
            70940.7,
            71101.3,
            71251.1,
            71390.6,
            71519.8,
            71639.1,
            71749.2,
            71851.9,
            71949.3,
            72042.0,
            72130.8,
            72215.9,
            72296.8,
            72373.3,
            72445.2,
        ],
    )


@component.add(
    name="placed on market pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pp_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            37189.0,
            37858.4,
            37858.4,
            37858.4,
            40400.2,
            43216.8,
            50288.4,
            57788.4,
            26430.8,
            28640.5,
            28814.7,
            28956.3,
            29065.1,
            29140.2,
            29210.9,
            29277.0,
            29338.7,
            29396.1,
            29449.3,
            29498.4,
            29543.8,
            29586.1,
            29626.2,
            29664.4,
            29700.9,
            29735.9,
            29769.3,
            29800.8,
            29830.4,
        ],
    )


@component.add(
    name="placed on market pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pp_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            76260.9,
            77633.6,
            77633.6,
            77633.6,
            82325.0,
            87514.0,
            89800.7,
            92348.1,
            102487.0,
            111055.0,
            111730.0,
            112280.0,
            112701.0,
            112993.0,
            113267.0,
            113523.0,
            113762.0,
            113985.0,
            114191.0,
            114382.0,
            114558.0,
            114722.0,
            114877.0,
            115025.0,
            115167.0,
            115303.0,
            115432.0,
            115554.0,
            115669.0,
        ],
    )


@component.add(
    name="placed on market ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ps_bottle():
    return np.interp(
        time(),
        [
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
    )


@component.add(
    name="placed on market ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ps_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            941.493,
            958.439,
            958.439,
            958.439,
            1778.63,
            2701.05,
            2763.1,
            2832.76,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ],
    )


@component.add(
    name="placed on market ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ps_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            1882.99,
            1916.88,
            1916.88,
            1916.88,
            1524.54,
            1080.42,
            2486.79,
            3965.87,
            7012.25,
            7598.5,
            7644.7,
            7682.29,
            7711.15,
            7731.08,
            7749.82,
            7767.37,
            7783.73,
            7798.97,
            7813.08,
            7826.12,
            7838.15,
            7849.37,
            7860.0,
            7870.14,
            7879.83,
            7889.13,
            7897.97,
            7906.33,
            7914.19,
        ],
    )


@component.add(
    name="placed on market ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ps_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            26832.5,
            27315.5,
            27315.5,
            27315.5,
            27441.7,
            27550.7,
            23486.3,
            19262.8,
            18339.7,
            19873.0,
            19993.8,
            20092.2,
            20167.6,
            20219.7,
            20268.8,
            20314.6,
            20357.5,
            20397.3,
            20434.2,
            20468.3,
            20499.8,
            20529.1,
            20556.9,
            20583.4,
            20608.8,
            20633.1,
            20656.2,
            20678.1,
            20698.6,
        ],
    )


@component.add(
    name="placed on market pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pvc_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            276.31,
            566.552,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ],
    )


@component.add(
    name="placed on market pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pvc_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            4236.72,
            4312.98,
            4312.98,
            4312.98,
            3049.07,
            1620.63,
            1381.55,
            1133.1,
            4315.23,
            4676.0,
            4704.43,
            4727.57,
            4745.32,
            4757.59,
            4769.12,
            4779.92,
            4789.99,
            4799.37,
            4808.05,
            4816.07,
            4823.48,
            4830.38,
            4836.93,
            4843.16,
            4849.13,
            4854.85,
            4860.29,
            4865.43,
            4870.27,
        ],
    )


@component.add(
    name="placed on market pvc other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pvc_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            1412.24,
            1437.66,
            1437.66,
            1437.66,
            1016.36,
            540.21,
            1105.24,
            1699.66,
            539.404,
            584.5,
            588.054,
            590.946,
            593.165,
            594.698,
            596.14,
            597.49,
            598.749,
            599.921,
            601.006,
            602.009,
            602.934,
            603.798,
            604.616,
            605.395,
            606.141,
            606.856,
            607.536,
            608.179,
            608.784,
        ],
    )


@component.add(
    name="placed on market pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pvc_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            6119.7,
            6229.86,
            6229.86,
            6229.86,
            4319.52,
            2160.84,
            2486.79,
            2832.76,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ],
    )


@component.add(
    name="trade data other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_other_film": 1},
)
def trade_data_other_film():
    return placed_on_market_other_film() / 2


@component.add(
    name="trade data other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_other_other": 1},
)
def trade_data_other_other():
    return placed_on_market_other_other() / 2


@component.add(
    name="trade data Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_other_ptt": 1},
)
def trade_data_other_ptt():
    return placed_on_market_other_ptt() / 2


@component.add(
    name="trade data pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pe_film": 1},
)
def trade_data_pe_film():
    return placed_on_market_pe_film() / 2


@component.add(
    name="trade data pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pe_other": 1},
)
def trade_data_pe_other():
    return placed_on_market_pe_other() / 2


@component.add(
    name="trade data pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pe_ptt": 1},
)
def trade_data_pe_ptt():
    return placed_on_market_pe_ptt() / 2


@component.add(
    name="trade data pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pet_bottle": 1},
)
def trade_data_pet_bottle():
    return placed_on_market_pet_bottle() / 2


@component.add(
    name="trade data pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pet_film": 1},
)
def trade_data_pet_film():
    return placed_on_market_pet_film() / 2


@component.add(
    name="trade data Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pet_other": 1},
)
def trade_data_pet_other():
    return placed_on_market_pet_other() / 2


@component.add(
    name="placed on market hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_hdpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            12239.4,
            12459.7,
            12459.7,
            12459.7,
            16261.7,
            20528.0,
            17960.1,
            15296.9,
            9709.3,
            10521.0,
            10585.0,
            10637.0,
            10677.0,
            10704.6,
            10730.5,
            10754.8,
            10777.5,
            10798.6,
            10818.1,
            10836.2,
            10852.8,
            10868.4,
            10883.1,
            10897.1,
            10910.5,
            10923.4,
            10935.7,
            10947.2,
            10958.1,
        ],
    )


@component.add(
    name="trade data pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pp_bottle": 1},
)
def trade_data_pp_bottle():
    return placed_on_market_pp_bottle() / 2


@component.add(
    name="trade data pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pp_film": 1},
)
def trade_data_pp_film():
    return placed_on_market_pp_film() / 2


@component.add(
    name="physical trade new hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_bottle": 1},
)
def physical_trade_new_hdpe_bottle():
    return trade_data_hdpe_bottle() / 2


@component.add(
    name="physical trade new hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_film": 1},
)
def physical_trade_new_hdpe_film():
    return trade_data_hdpe_film() / 2


@component.add(
    name="physical trade new hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_other": 1},
)
def physical_trade_new_hdpe_other():
    return trade_data_hdpe_other() / 2


@component.add(
    name="physical trade new hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_ptt": 1},
)
def physical_trade_new_hdpe_ptt():
    return trade_data_hdpe_ptt() / 2


@component.add(
    name="physical trade new ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_bottle": 1},
)
def physical_trade_new_ldpe_bottle():
    return trade_data_ldpe_bottle() / 2


@component.add(
    name="physical trade new idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_idpe_film": 1},
)
def physical_trade_new_idpe_film():
    return trade_data_idpe_film() / 2


@component.add(
    name="physical trade new idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_other": 1},
)
def physical_trade_new_idpe_other():
    return trade_data_ldpe_other() / 2


@component.add(
    name="physical trade new ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_ptt": 1},
)
def physical_trade_new_ldpe_ptt():
    return trade_data_ldpe_ptt() / 2


@component.add(
    name="physical trade new other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_bottle": 1},
)
def physical_trade_new_other_bottle():
    return trade_data_other_bottle() / 2


@component.add(
    name="physical trade new other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_film": 1},
)
def physical_trade_new_other_film():
    return trade_data_other_film() / 2


@component.add(
    name="physical trade new other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_other": 1},
)
def physical_trade_new_other_other():
    return trade_data_other_other() / 2


@component.add(
    name="physical trade new Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_other_ptt": 1},
)
def physical_trade_new_other_ptt():
    return trade_data_other_ptt() / 2


@component.add(
    name="physical trade new pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"data_to_physical_trade_pe_bottle": 1},
)
def physical_trade_new_pe_bottle():
    return data_to_physical_trade_pe_bottle() / 2


@component.add(
    name="domestic production new data pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pvc_ptt": 1,
        "domestic_production_recycled_pvc_ptt": 1,
    },
)
def domestic_production_new_data_pvc_ptt():
    return placed_on_market_pvc_ptt() / 2 - domestic_production_recycled_pvc_ptt()


@component.add(
    name="physical trade new pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_other": 1},
)
def physical_trade_new_pe_other():
    return trade_data_pe_other() / 2


@component.add(
    name="physical trade new pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pe_ptt": 1},
)
def physical_trade_new_pe_ptt():
    return trade_data_pe_ptt() / 2


@component.add(
    name="physical trade new pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_bottle": 1},
)
def physical_trade_new_pet_bottle():
    return trade_data_pet_bottle() / 2


@component.add(
    name="physical trade new pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_film": 1},
)
def physical_trade_new_pet_film():
    return trade_data_pet_film() / 2


@component.add(
    name="physical trade new Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_other": 1},
)
def physical_trade_new_pet_other():
    return trade_data_pet_other() / 2


@component.add(
    name="domestic production new ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ldpe_film": 1,
        "domestic_production_recycled_ldpe_film": 1,
    },
)
def domestic_production_new_ldpe_film():
    return placed_on_market_ldpe_film() / 2 - domestic_production_recycled_ldpe_film()


@component.add(
    name="physical trade new pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_bottle": 1},
)
def physical_trade_new_pp_bottle():
    return trade_data_pp_bottle() / 2


@component.add(
    name="physical trade new pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_film": 1},
)
def physical_trade_new_pp_film():
    return trade_data_pp_film() / 2


@component.add(
    name="physical trade new pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_other": 1},
)
def physical_trade_new_pp_other():
    return trade_data_pp_other() / 2


@component.add(
    name="physical trade new pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pp_ptt": 1},
)
def physical_trade_new_pp_ptt():
    return trade_data_pp_ptt() / 2


@component.add(
    name="physical trade new ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_bottle": 1},
)
def physical_trade_new_ps_bottle():
    return trade_data_ps_bottle() / 2


@component.add(
    name="physical trade new ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_film": 1},
)
def physical_trade_new_ps_film():
    return trade_data_ps_film() / 2


@component.add(
    name="physical trade new ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_other": 1},
)
def physical_trade_new_ps_other():
    return trade_data_ps_other() / 2


@component.add(
    name="physical trade new ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ps_ptt": 1},
)
def physical_trade_new_ps_ptt():
    return trade_data_ps_ptt() / 2


@component.add(
    name="physical trade new pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_bottle": 1},
)
def physical_trade_new_pvc_bottle():
    return trade_data_pvc_bottle() / 2


@component.add(
    name="physical trade new pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_film": 1},
)
def physical_trade_new_pvc_film():
    return trade_data_pvc_film() / 2


@component.add(
    name="physical trade new PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_other": 1},
)
def physical_trade_new_pvc_other():
    return trade_data_pvc_other() / 2


@component.add(
    name="physical trade new pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pvc_ptt": 1},
)
def physical_trade_new_pvc_ptt():
    return trade_data_pvc_ptt() / 2


@component.add(
    name="placed on market hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_hdpe_bottle():
    return np.interp(
        time(),
        [
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
        ],
        [
            228312,
            232422,
            232422,
            232422,
            253327,
            276587,
            267744,
            258914,
            193646,
            209836,
            211111,
            212150,
            212946,
            213497,
            214014,
            214499,
            214951,
            215372,
            215761,
            216121,
            216453,
            216763,
            217057,
            217337,
            217605,
            217861,
            218106,
            218336,
            218553,
        ],
    )


@component.add(
    name="placed on market hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_hdpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            46133.1,
            46963.5,
            46963.5,
            46963.5,
            30998.9,
            12965.0,
            11052.4,
            9064.84,
            10248.7,
            11105.5,
            11173.0,
            11228.0,
            11270.1,
            11299.3,
            11326.7,
            11352.3,
            11376.2,
            11398.5,
            11419.1,
            11438.2,
            11455.8,
            11472.2,
            11487.7,
            11502.5,
            11516.7,
            11530.3,
            11543.2,
            11555.4,
            11566.9,
        ],
    )


@component.add(
    name="placed on market hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_hdpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            29186.3,
            29711.6,
            29711.6,
            29711.6,
            28458.0,
            27010.5,
            27631.0,
            28327.6,
            8091.06,
            8767.5,
            8820.81,
            8864.19,
            8897.48,
            8920.48,
            8942.1,
            8962.34,
            8981.23,
            8998.81,
            9015.1,
            9030.14,
            9044.02,
            9056.97,
            9069.24,
            9080.93,
            9092.12,
            9102.84,
            9113.05,
            9122.69,
            9131.75,
        ],
    )


@component.add(
    name="domestic production new pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pp_other": 1,
        "domestic_production_recycled_pp_other": 1,
    },
)
def domestic_production_new_pp_other():
    return placed_on_market_pp_other() / 2 - domestic_production_recycled_pp_other()


@component.add(
    name="placed on market ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ldpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            276.3,
            566.6,
            539.4,
            584.5,
            588.1,
            590.9,
            593.2,
            594.7,
            596.1,
            597.5,
            598.7,
            599.9,
            601.0,
            602.0,
            602.9,
            603.8,
            604.6,
            605.4,
            606.1,
            606.9,
            607.5,
            608.2,
            608.8,
        ],
    )


@component.add(
    name="placed on market ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ldpe_film():
    return np.interp(
        time(),
        [
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
        ],
        [
            171352,
            174436,
            174436,
            174436,
            176592,
            178809,
            175733,
            172798,
            165058,
            178857,
            179944,
            180829,
            181509,
            181978,
            182419,
            182832,
            183217,
            183576,
            183908,
            184215,
            184498,
            184762,
            185012,
            185251,
            185479,
            185698,
            185906,
            186103,
            186288,
        ],
    )


@component.add(
    name="placed on market ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ldpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            10827.2,
            11022.1,
            11022.1,
            11022.1,
            11179.9,
            11344.4,
            8565.6,
            5665.5,
            2157.6,
            2338.0,
            2352.2,
            2363.8,
            2372.7,
            2378.8,
            2384.6,
            2389.9,
            2395.0,
            2399.7,
            2404.0,
            2408.0,
            2411.7,
            2415.2,
            2418.5,
            2421.6,
            2424.6,
            2427.4,
            2430.1,
            2432.7,
            2435.1,
        ],
    )


@component.add(
    name="placed on market ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_ldpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            470.75,
            479.22,
            479.22,
            479.22,
            508.18,
            540.21,
            6078.82,
            11897.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ],
    )


@component.add(
    name="placed on market other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_other_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            254.09,
            540.21,
            276.31,
            0.0,
            539.4,
            584.5,
            588.05,
            590.95,
            593.17,
            594.7,
            596.14,
            597.49,
            598.75,
            599.92,
            601.01,
            602.01,
            602.93,
            603.8,
            604.62,
            605.4,
            606.14,
            606.86,
            607.54,
            608.18,
            608.78,
        ],
    )


@component.add(
    name="placed on market other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_other_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            8944.18,
            9105.17,
            9105.17,
            9105.17,
            18040.4,
            28090.9,
            20170.6,
            11897.6,
            44231.1,
            47929.0,
            48220.4,
            48457.6,
            48639.6,
            48765.3,
            48883.5,
            48994.1,
            49097.4,
            49193.5,
            49282.5,
            49364.8,
            49440.6,
            49511.4,
            49578.5,
            49642.4,
            49703.6,
            49762.2,
            49818.0,
            49870.7,
            49920.2,
        ],
    )


@component.add(
    name="placed on market other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_other_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            508.18,
            1080.42,
            2210.48,
            3399.32,
            5394.04,
            5845.0,
            5880.54,
            5909.46,
            5931.65,
            5946.98,
            5961.4,
            5974.9,
            5987.49,
            5999.21,
            6010.06,
            6020.09,
            6029.34,
            6037.98,
            6046.16,
            6053.95,
            6061.41,
            6068.56,
            6075.36,
            6081.79,
            6087.83,
        ],
    )


@component.add(
    name="placed on market other ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_other_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
        ],
        [
            941.49,
            958.44,
            958.44,
            958.44,
            1524.54,
            2160.84,
            4973.58,
            7931.74,
            2697.02,
            2922.5,
            2940.27,
            2954.73,
            2965.83,
            2973.49,
            2980.7,
            2987.45,
            2993.74,
            2999.6,
            3005.03,
            3010.05,
            3014.67,
            3018.99,
            3023.08,
            3026.98,
            3030.71,
            3034.28,
            3037.68,
            3040.9,
            3043.92,
        ],
    )


@component.add(
    name="trade data pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pvc_bottle": 1},
)
def trade_data_pvc_bottle():
    return placed_on_market_pvc_bottle() / 2


@component.add(
    name="trade data pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pvc_film": 1},
)
def trade_data_pvc_film():
    return placed_on_market_pvc_film() / 2


@component.add(
    name="trade data PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pvc_other": 1},
)
def trade_data_pvc_other():
    return placed_on_market_pvc_other() / 2


@component.add(
    name="trade data pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pvc_ptt": 1},
)
def trade_data_pvc_ptt():
    return placed_on_market_pvc_ptt() / 2


@component.add(
    name="domestic production new pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pe_ptt": 1, "domestic_production_recycled_pe_ptt": 1},
)
def domestic_production_new_pe_ptt():
    return placed_on_market_pe_ptt() / 2 - domestic_production_recycled_pe_ptt()


@component.add(
    name="domestic production new pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pet_film": 1,
        "domestic_production_recycled_pet_film": 1,
    },
)
def domestic_production_new_pet_film():
    return placed_on_market_pet_film() / 2 - domestic_production_recycled_pet_film()


@component.add(
    name="domestic production new data pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pet_bottle": 1,
        "domestic_production_recycled_pet_bottle": 1,
    },
)
def domestic_production_new_data_pet_bottle():
    return placed_on_market_pet_bottle() / 2 - domestic_production_recycled_pet_bottle()


@component.add(
    name="physcial trade recycled hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_film": 1},
)
def physcial_trade_recycled_hdpe_film():
    return trade_data_hdpe_film() / 2


@component.add(
    name="domestic production new hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_hdpe_bottle": 1,
        "domestic_production_recycled_hdpe_bottle": 1,
    },
)
def domestic_production_new_hdpe_bottle():
    return (
        placed_on_market_hdpe_bottle() / 2 - domestic_production_recycled_hdpe_bottle()
    )


@component.add(
    name="domestic production new hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_hdpe_film": 1,
        "domestic_production_recycled_hdpe_film": 1,
    },
)
def domestic_production_new_hdpe_film():
    return placed_on_market_hdpe_film() / 2 - domestic_production_recycled_hdpe_film()


@component.add(
    name="domestic production new hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_hdpe_other": 1,
        "domestic_production_recycled_hdpe_other": 1,
    },
)
def domestic_production_new_hdpe_other():
    return placed_on_market_hdpe_other() / 2 - domestic_production_recycled_hdpe_other()


@component.add(
    name="trade data hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_hdpe_bottle": 1},
)
def trade_data_hdpe_bottle():
    return placed_on_market_hdpe_bottle() / 2


@component.add(
    name="trade data hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_hdpe_film": 1},
)
def trade_data_hdpe_film():
    return placed_on_market_hdpe_film() / 2


@component.add(
    name="trade data hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_hdpe_other": 1},
)
def trade_data_hdpe_other():
    return placed_on_market_hdpe_other() / 2


@component.add(
    name="trade data hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_hdpe_ptt": 1},
)
def trade_data_hdpe_ptt():
    return placed_on_market_hdpe_ptt() / 2


@component.add(
    name="trade data ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ldpe_bottle": 1},
)
def trade_data_ldpe_bottle():
    return placed_on_market_ldpe_bottle() / 2


@component.add(
    name="trade data idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ldpe_film": 1},
)
def trade_data_idpe_film():
    return placed_on_market_ldpe_film() / 2


@component.add(
    name="trade data ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ldpe_other": 1},
)
def trade_data_ldpe_other():
    return placed_on_market_ldpe_other() / 2


@component.add(
    name="trade data ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ldpe_ptt": 1},
)
def trade_data_ldpe_ptt():
    return placed_on_market_ldpe_ptt() / 2


@component.add(
    name="trade data other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_other_bottle": 1},
)
def trade_data_other_bottle():
    return placed_on_market_other_bottle() / 2


@component.add(
    name="domestic production new pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pe_bottle": 1,
        "domestic_production_recycled_pe_bottle": 1,
    },
)
def domestic_production_new_pe_bottle():
    return placed_on_market_pe_bottle() / 2 - domestic_production_recycled_pe_bottle()


@component.add(
    name="domestic production new pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pe_film": 1,
        "domestic_production_recycled_pe_film": 1,
    },
)
def domestic_production_new_pe_film():
    return placed_on_market_pe_film() / 2 - domestic_production_recycled_pe_film()


@component.add(
    name="domestic production new pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pe_other": 1,
        "domestic_production_recycled_pe_other": 1,
    },
)
def domestic_production_new_pe_other():
    return placed_on_market_pe_other() / 2 - domestic_production_recycled_pe_other()


@component.add(
    name="trade data pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pp_other": 1},
)
def trade_data_pp_other():
    return placed_on_market_pp_other() / 2


@component.add(
    name="trade data pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pp_ptt": 1},
)
def trade_data_pp_ptt():
    return placed_on_market_pp_ptt() / 2


@component.add(
    name="physcial trade recycled hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_bottle": 1},
)
def physcial_trade_recycled_hdpe_bottle():
    return trade_data_hdpe_bottle() / 2


@component.add(
    name="data to physical trade pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pe_bottle": 1},
)
def data_to_physical_trade_pe_bottle():
    return placed_on_market_pe_bottle() / 2


@component.add(
    name="domestic production new pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pp_bottle": 1,
        "domestic_production_recycled_pp_bottle": 1,
    },
)
def domestic_production_new_pp_bottle():
    return placed_on_market_pp_bottle() / 2 - domestic_production_recycled_pp_bottle()


@component.add(
    name="domestic production new pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pp_film": 1,
        "domestic_production_recycled_pp_film": 1,
    },
)
def domestic_production_new_pp_film():
    return placed_on_market_pp_film() / 2 - domestic_production_recycled_pp_film()


@component.add(
    name="physcial trade recycled ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_ldpe_bottle": 1},
)
def physcial_trade_recycled_ldpe_bottle():
    return trade_data_ldpe_bottle() / 2


@component.add(
    name="domestic production new pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pp_ptt": 1, "domestic_production_recycled_pp_ptt": 1},
)
def domestic_production_new_pp_ptt():
    return placed_on_market_pp_ptt() / 2 - domestic_production_recycled_pp_ptt()


@component.add(
    name="domestic production new ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ps_bottle": 1,
        "domestic_production_recycled_ps_bottle": 1,
    },
)
def domestic_production_new_ps_bottle():
    return placed_on_market_ps_bottle() / 2 - domestic_production_recycled_ps_bottle()


@component.add(
    name="domestic production new ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ldpe_bottle": 1,
        "domestic_production_recycled_ldpe_bottle": 1,
    },
)
def domestic_production_new_ldpe_bottle():
    return (
        placed_on_market_ldpe_bottle() / 2 - domestic_production_recycled_ldpe_bottle()
    )


@component.add(
    name="domestic production new ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ps_film": 1,
        "domestic_production_recycled_ps_film": 1,
    },
)
def domestic_production_new_ps_film():
    return placed_on_market_ps_film() / 2 - domestic_production_recycled_ps_film()


@component.add(
    name="trade data ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ps_bottle": 1},
)
def trade_data_ps_bottle():
    return placed_on_market_ps_bottle() / 2


@component.add(
    name="domestic production new ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ldpe_ptt": 1,
        "domestic_production_recycled_ldpe_ptt": 1,
    },
)
def domestic_production_new_ldpe_ptt():
    return placed_on_market_ldpe_ptt() / 2 - domestic_production_recycled_ldpe_ptt()


@component.add(
    name="trade data ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ps_other": 1},
)
def trade_data_ps_other():
    return placed_on_market_ps_other() / 2


@component.add(
    name="trade data ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ps_ptt": 1},
)
def trade_data_ps_ptt():
    return placed_on_market_ps_ptt() / 2


@component.add(
    name="domestic production new Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_other_ptt": 1,
        "domestic_production_recycled_other_ptt": 1,
    },
)
def domestic_production_new_other_ptt():
    return placed_on_market_other_ptt() / 2 - domestic_production_recycled_other_ptt()


@component.add(
    name="domestic production new PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pvc_other": 1,
        "domestic_production_recycled_pvc_other": 1,
    },
)
def domestic_production_new_pvc_other():
    return placed_on_market_pvc_other() / 2 - domestic_production_recycled_pvc_other()


@component.add(
    name="domestic production new hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_hdpe_ptt": 1,
        "domestic_production_recycled_hdpe_ptt": 1,
    },
)
def domestic_production_new_hdpe_ptt():
    return placed_on_market_hdpe_ptt() / 2 - domestic_production_recycled_hdpe_ptt()


@component.add(
    name="domestic production new other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_other_bottle": 1,
        "domestic_production_recycled_other_bottle": 1,
    },
)
def domestic_production_new_other_bottle():
    return (
        placed_on_market_other_bottle() / 2
        - domestic_production_recycled_other_bottle()
    )


@component.add(
    name="physcial trade recycled hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_other": 1},
)
def physcial_trade_recycled_hdpe_other():
    return trade_data_hdpe_other() / 2


@component.add(
    name="domestic production new ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ldpe_other": 1,
        "domestic_production_recycled_idpe_other": 1,
    },
)
def domestic_production_new_ldpe_other():
    return placed_on_market_ldpe_other() / 2 - domestic_production_recycled_idpe_other()


@component.add(
    name="domestic production new ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_ps_other": 1,
        "domestic_production_recycled_ps_other": 1,
    },
)
def domestic_production_new_ps_other():
    return placed_on_market_ps_other() / 2 - domestic_production_recycled_ps_other()


@component.add(
    name="domestic production new pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pvc_film": 1,
        "domestic_production_recycled_pvc_film": 1,
    },
)
def domestic_production_new_pvc_film():
    return placed_on_market_pvc_film() / 2 - domestic_production_recycled_pvc_film()


@component.add(
    name="domestic production new ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ps_ptt": 1, "domestic_production_recycled_ps_ptt": 1},
)
def domestic_production_new_ps_ptt():
    return placed_on_market_ps_ptt() / 2 - domestic_production_recycled_ps_ptt()


@component.add(
    name="physcial trade recycled hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_hdpe_ptt": 1},
)
def physcial_trade_recycled_hdpe_ptt():
    return trade_data_hdpe_ptt() / 2


@component.add(
    name="domestic production new other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_other_other": 1,
        "domestic_production_recycled_other_other": 1,
    },
)
def domestic_production_new_other_other():
    return (
        placed_on_market_other_other() / 2 - domestic_production_recycled_other_other()
    )


@component.add(
    name="domestic production new other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_other_film": 1,
        "domestic_production_recycled_other_film": 1,
    },
)
def domestic_production_new_other_film():
    return placed_on_market_other_film() / 2 - domestic_production_recycled_other_film()


@component.add(
    name="trade data ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_ps_film": 1},
)
def trade_data_ps_film():
    return placed_on_market_ps_film() / 2


@component.add(
    name="domestic production new pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pvc_bottle": 1,
        "domestic_production_recycled_pvc_bottle": 1,
    },
)
def domestic_production_new_pvc_bottle():
    return placed_on_market_pvc_bottle() / 2 - domestic_production_recycled_pvc_bottle()


@component.add(
    name="Physical trade balance Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pet_other": 1,
        "physical_trade_new_pet_other": 1,
    },
)
def physical_trade_balance_pet_other():
    return physcial_trade_recycled_pet_other() + physical_trade_new_pet_other()


@component.add(
    name="Physical trade balance pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"physcial_trade_recycled_pet_ptt": 1, "physical_trade_new_pet_ptt": 1},
)
def physical_trade_balance_pet_ptt():
    return physcial_trade_recycled_pet_ptt() + physical_trade_new_pet_ptt()


@component.add(
    name="Physical trade balance pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pp_bottle": 1,
        "physical_trade_new_pp_bottle": 1,
    },
)
def physical_trade_balance_pp_bottle():
    return physcial_trade_recycled_pp_bottle() + physical_trade_new_pp_bottle()


@component.add(
    name="Physical trade balance pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pp_other": 1,
        "physical_trade_new_pp_other": 1,
    },
)
def physical_trade_balance_pp_other():
    return physcial_trade_recycled_pp_other() + physical_trade_new_pp_other()


@component.add(
    name="Physical trade balance pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"physcial_trade_recycled_pp_ptt": 1, "physical_trade_new_pp_ptt": 1},
)
def physical_trade_balance_pp_ptt():
    return physcial_trade_recycled_pp_ptt() + physical_trade_new_pp_ptt()


@component.add(
    name="policy2 introduction time pet film",
    limits=(2014.0, 2042.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def policy2_introduction_time_pet_film():
    return 2030


@component.add(
    name="pom percentage change after policy introduction ldpe film",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pom_percentage_change_after_policy_introduction_ldpe_film": 1},
    other_deps={
        "_smooth_pom_percentage_change_after_policy_introduction_ldpe_film": {
            "initial": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_ldpe_film": 1,
            },
            "step": {
                "time": 1,
                "policy2_introduction_time": 1,
                "epr_2a_pom_reduction_percentage_ldpe_film": 1,
            },
        }
    },
)
def pom_percentage_change_after_policy_introduction_ldpe_film():
    return _smooth_pom_percentage_change_after_policy_introduction_ldpe_film()


_smooth_pom_percentage_change_after_policy_introduction_ldpe_film = Smooth(
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_ldpe_film(),
        lambda: 1,
    ),
    lambda: 2,
    lambda: if_then_else(
        time() > policy2_introduction_time(),
        lambda: 1 - epr_2a_pom_reduction_percentage_ldpe_film(),
        lambda: 1,
    ),
    lambda: 1,
    "_smooth_pom_percentage_change_after_policy_introduction_ldpe_film",
)


@component.add(
    name="domestic production other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_other_bottle": 1,
        "domestic_production_recycled_other_bottle": 1,
    },
)
def domestic_production_other_bottle():
    return (
        domestic_production_new_other_bottle()
        + domestic_production_recycled_other_bottle()
    )


@component.add(
    name="domestic production other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_other_other": 1,
        "domestic_production_recycled_other_other": 1,
    },
)
def domestic_production_other_other():
    return (
        domestic_production_new_other_other()
        + domestic_production_recycled_other_other()
    )


@component.add(
    name="domestic production Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_other_ptt": 1,
        "domestic_production_recycled_other_ptt": 1,
    },
)
def domestic_production_other_ptt():
    return (
        domestic_production_new_other_ptt() + domestic_production_recycled_other_ptt()
    )


@component.add(
    name="domestic production pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pe_bottle": 1,
        "domestic_production_recycled_pe_bottle": 1,
    },
)
def domestic_production_pe_bottle():
    return (
        domestic_production_new_pe_bottle() + domestic_production_recycled_pe_bottle()
    )


@component.add(
    name="domestic production pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pe_film": 1,
        "domestic_production_recycled_pe_film": 1,
    },
)
def domestic_production_pe_film():
    return domestic_production_new_pe_film() + domestic_production_recycled_pe_film()


@component.add(
    name="domestic production pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pe_other": 1,
        "domestic_production_recycled_pe_other": 1,
    },
)
def domestic_production_pe_other():
    return domestic_production_new_pe_other() + domestic_production_recycled_pe_other()


@component.add(
    name="domestic production pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pe_ptt": 1,
        "domestic_production_recycled_pe_ptt": 1,
    },
)
def domestic_production_pe_ptt():
    return domestic_production_new_pe_ptt() + domestic_production_recycled_pe_ptt()


@component.add(
    name="domestic production pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_data_pet_bottle": 1,
        "domestic_production_recycled_pet_bottle": 1,
    },
)
def domestic_production_pet_bottle():
    return (
        domestic_production_new_data_pet_bottle()
        + domestic_production_recycled_pet_bottle()
    )


@component.add(
    name="domestic production Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pet_other": 1,
        "domestic_production_recycled_pet_other": 1,
    },
)
def domestic_production_pet_other():
    return (
        domestic_production_new_pet_other() + domestic_production_recycled_pet_other()
    )


@component.add(
    name="residual rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_pet_film": 1},
)
def residual_rate_pet_film():
    return 1 - actual_sent_for_sorting_rate_pet_film()


@component.add(
    name="Physical trade balance hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_hdpe_bottle": 1,
        "physical_trade_new_hdpe_bottle": 1,
    },
)
def physical_trade_balance_hdpe_bottle():
    return physcial_trade_recycled_hdpe_bottle() + physical_trade_new_hdpe_bottle()


@component.add(
    name="Physical trade balance hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_hdpe_other": 1,
        "physical_trade_new_hdpe_other": 1,
    },
)
def physical_trade_balance_hdpe_other():
    return physcial_trade_recycled_hdpe_other() + physical_trade_new_hdpe_other()


@component.add(
    name="Physical trade balance hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_hdpe_ptt": 1,
        "physical_trade_new_hdpe_ptt": 1,
    },
)
def physical_trade_balance_hdpe_ptt():
    return physcial_trade_recycled_hdpe_ptt() + physical_trade_new_hdpe_ptt()


@component.add(
    name="Physical trade balance ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ldpe_bottle": 1,
        "physical_trade_new_ldpe_bottle": 1,
    },
)
def physical_trade_balance_ldpe_bottle():
    return physcial_trade_recycled_ldpe_bottle() + physical_trade_new_ldpe_bottle()


@component.add(
    name="Actual sent for sorting rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formulation_sent_for_sorting_rate_hdpe_film": 1,
        "sent_for_sorting_rate_hdpe_film": 1,
    },
)
def actual_sent_for_sorting_rate_hdpe_film():
    return (
        formulation_sent_for_sorting_rate_hdpe_film()
        + sent_for_sorting_rate_hdpe_film()
    )


@component.add(
    name="Physical trade balance pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"physcial_trade_recycled_pe_ptt": 1, "physical_trade_new_pe_ptt": 1},
)
def physical_trade_balance_pe_ptt():
    return physcial_trade_recycled_pe_ptt() + physical_trade_new_pe_ptt()


@component.add(
    name="Physical trade balance pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pet_bottle": 1,
        "physical_trade_new_pet_bottle": 1,
    },
)
def physical_trade_balance_pet_bottle():
    return physcial_trade_recycled_pet_bottle() + physical_trade_new_pet_bottle()


@component.add(
    name="residual rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_pp_film": 1},
)
def residual_rate_pp_film():
    return 1 - actual_sent_for_sorting_rate_pp_film()


@component.add(
    name="domestic production pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pp_bottle": 1,
        "domestic_production_recycled_pp_bottle": 1,
    },
)
def domestic_production_pp_bottle():
    return (
        domestic_production_new_pp_bottle() + domestic_production_recycled_pp_bottle()
    )


@component.add(
    name="domestic production pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pp_other": 1,
        "domestic_production_recycled_pp_other": 1,
    },
)
def domestic_production_pp_other():
    return domestic_production_new_pp_other() + domestic_production_recycled_pp_other()


@component.add(
    name="sent for sorting rate pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pet_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="residual rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ldpe_film": 1},
)
def residual_rate_ldpe_film():
    return 1 - actual_sent_for_sorting_rate_ldpe_film()


@component.add(
    name="residual rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_other_film": 1},
)
def residual_rate_other_film():
    return 1 - actual_sent_for_sorting_rate_other_film()


@component.add(
    name="sent for sorting rate pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pp_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Physical trade balance pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"physcial_trade_recycled_pe_film": 1, "physical_trade_new_pe_film": 1},
)
def physical_trade_balance_pe_film():
    return physcial_trade_recycled_pe_film() + physical_trade_new_pe_film()


@component.add(
    name="sent for sorting rate ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ps_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="residual rate hdpe film ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ldpe_film": 1},
)
def residual_rate_hdpe_film_ldpe_film():
    return 1 - actual_sent_for_sorting_rate_ldpe_film()


@component.add(
    name="residual rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ps_bottle": 1},
)
def residual_rate_ps_bottle():
    return 1 - actual_sent_for_sorting_rate_ps_bottle()


@component.add(
    name="sent for sorting rate other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_other_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="residual rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ps_ptt": 1},
)
def residual_rate_ps_ptt():
    return 1 - actual_sent_for_sorting_rate_ps_ptt()


@component.add(
    name="Physical trade balance pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pe_bottle": 1,
        "physical_trade_new_pe_bottle": 1,
    },
)
def physical_trade_balance_pe_bottle():
    return physcial_trade_recycled_pe_bottle() + physical_trade_new_pe_bottle()


@component.add(
    name="domestic production pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_pp_ptt": 1,
        "domestic_production_recycled_pp_ptt": 1,
    },
)
def domestic_production_pp_ptt():
    return domestic_production_new_pp_ptt() + domestic_production_recycled_pp_ptt()


@component.add(
    name="residual rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_hdpe_film": 1},
)
def residual_rate_hdpe_film():
    return 1 - actual_sent_for_sorting_rate_hdpe_film()


@component.add(
    name="sent for sorting rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ps_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ps_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="residual rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ps_film": 1},
)
def residual_rate_ps_film():
    return 1 - actual_sent_for_sorting_rate_ps_film()


@component.add(
    name="Physical trade balance pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_pe_other": 1,
        "physical_trade_new_pe_other": 1,
    },
)
def physical_trade_balance_pe_other():
    return physcial_trade_recycled_pe_other() + physical_trade_new_pe_other()


@component.add(
    name="domestic production hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_hdpe_other": 1,
        "domestic_production_recycled_hdpe_other": 1,
    },
)
def domestic_production_hdpe_other():
    return (
        domestic_production_new_hdpe_other() + domestic_production_recycled_hdpe_other()
    )


@component.add(
    name="domestic production hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_hdpe_ptt": 1,
        "domestic_production_recycled_hdpe_ptt": 1,
    },
)
def domestic_production_hdpe_ptt():
    return domestic_production_new_hdpe_ptt() + domestic_production_recycled_hdpe_ptt()


@component.add(
    name="domestic production ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ldpe_bottle": 1,
        "domestic_production_recycled_ldpe_bottle": 1,
    },
)
def domestic_production_ldpe_bottle():
    return (
        domestic_production_new_ldpe_bottle()
        + domestic_production_recycled_ldpe_bottle()
    )


@component.add(
    name="domestic production ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ldpe_ptt": 1,
        "domestic_production_recycled_ldpe_ptt": 1,
    },
)
def domestic_production_ldpe_ptt():
    return domestic_production_new_ldpe_ptt() + domestic_production_recycled_ldpe_ptt()


@component.add(
    name="sent for sorting rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pvc_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="domestic production hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_recycled_hdpe_bottle": 1,
        "domestic_production_new_hdpe_bottle": 1,
    },
)
def domestic_production_hdpe_bottle():
    return (
        domestic_production_recycled_hdpe_bottle()
        + domestic_production_new_hdpe_bottle()
    )


@component.add(
    name="Sent for residual treatment ps other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_ps_other": 1, "residual_rate_ps_other": 1},
)
def sent_for_residual_treatment_ps_other():
    return formal_domestic_treatment_ps_other() * residual_rate_ps_other()


@component.add(
    name="domestic production ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_production_new_ldpe_other": 1,
        "domestic_production_recycled_idpe_other": 1,
    },
)
def domestic_production_ldpe_other():
    return (
        domestic_production_new_ldpe_other() + domestic_production_recycled_idpe_other()
    )


@component.add(
    name="Physical trade balance other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_other_other": 1,
        "physical_trade_new_other_other": 1,
    },
)
def physical_trade_balance_other_other():
    return physcial_trade_recycled_other_other() + physical_trade_new_other_other()


@component.add(
    name="Physical trade balance Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_other_ptt": 1,
        "physical_trade_new_other_ptt": 1,
    },
)
def physical_trade_balance_other_ptt():
    return physcial_trade_recycled_other_ptt() + physical_trade_new_other_ptt()


@component.add(
    name="residual rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_ps_other": 1},
)
def residual_rate_ps_other():
    return 1 - actual_sent_for_sorting_rate_ps_other()


@component.add(
    name="sent for sorting rate ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ps_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_hdpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ldpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Physical trade balance other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_other_bottle": 1,
        "physical_trade_new_other_bottle": 1,
    },
)
def physical_trade_balance_other_bottle():
    return physcial_trade_recycled_other_bottle() + physical_trade_new_other_bottle()


@component.add(
    name="Physical trade balance ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_idpe_other": 1,
        "physical_trade_new_idpe_other": 1,
    },
)
def physical_trade_balance_ldpe_other():
    return physcial_trade_recycled_idpe_other() + physical_trade_new_idpe_other()


@component.add(
    name="Physical trade balance ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "physcial_trade_recycled_ldpe_ptt": 1,
        "physical_trade_new_ldpe_ptt": 1,
    },
)
def physical_trade_balance_ldpe_ptt():
    return physcial_trade_recycled_ldpe_ptt() + physical_trade_new_ldpe_ptt()


@component.add(
    name="residual rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_sent_for_sorting_rate_pvc_film": 1},
)
def residual_rate_pvc_film():
    return 1 - actual_sent_for_sorting_rate_pvc_film()


@component.add(
    name="Sent for residual treatment hdpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_hdpe_bottle": 1,
        "residual_rate_hdpe_bottle": 1,
    },
)
def sent_for_residual_treatment_hdpe_bottle():
    return formal_domestic_treatment_hdpe_bottle() * residual_rate_hdpe_bottle()


@component.add(
    name="Sent for residual treatment hdpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_hdpe_film": 1, "residual_rate_hdpe_film": 1},
)
def sent_for_residual_treatment_hdpe_film():
    return formal_domestic_treatment_hdpe_film() * residual_rate_hdpe_film()


@component.add(
    name="Sent for residual treatment hdpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_hdpe_other": 1,
        "residual_rate_hdpe_other": 1,
    },
)
def sent_for_residual_treatment_hdpe_other():
    return formal_domestic_treatment_hdpe_other() * residual_rate_hdpe_other()


@component.add(
    name="residual rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_sorting_rate_pet_other": 1},
)
def residual_rate_pet_other():
    return 1 - sent_for_sorting_rate_pet_other()


@component.add(
    name="residual rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_sorting_rate_hdpe_bottle": 1},
)
def residual_rate_hdpe_bottle():
    return 1 - sent_for_sorting_rate_hdpe_bottle()


@component.add(
    name="residual rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_sorting_rate_hdpe_other": 1},
)
def residual_rate_hdpe_other():
    return 1 - sent_for_sorting_rate_hdpe_other()


@component.add(
    name="placed on market pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def placed_on_market_pet_ptt():
    return np.interp(
        time(),
        [
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
        ],
        [
            159112,
            161976,
            161976,
            161976,
            174814,
            189073,
            188443,
            188095,
            250284,
            271208,
            272857,
            274199,
            275229,
            275940,
            276609,
            277235,
            277819,
            278363,
            278867,
            279332,
            279762,
            280162,
            280542,
            280903,
            281249,
            281581,
            281897,
            282195,
            282476,
        ],
    )


@component.add(
    name="Sent for residual treatment pe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pe_bottle": 1, "residual_rate_pe_bottle": 1},
)
def sent_for_residual_treatment_pe_bottle():
    return formal_domestic_treatment_pe_bottle() * residual_rate_pe_bottle()


@component.add(
    name="residual rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_sorting_rate_pe_bottle": 1},
)
def residual_rate_pe_bottle():
    return 1 - sent_for_sorting_rate_pe_bottle()


@component.add(
    name="Sent for residual treatment pet ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pet_ptt": 1, "residual_rate_pet_ptt": 1},
)
def sent_for_residual_treatment_pet_ptt():
    return formal_domestic_treatment_pet_ptt() * residual_rate_pet_ptt()


@component.add(
    name="Sent for residual treatment Pet Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pet_other": 1, "residual_rate_pet_other": 1},
)
def sent_for_residual_treatment_pet_other():
    return formal_domestic_treatment_pet_other() * residual_rate_pet_other()


@component.add(
    name="Littering rate pp other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "littering_rate_formulation_pp_other": 1,
        "littering_rate_historical_data_pp_other": 1,
    },
)
def littering_rate_pp_other():
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: littering_rate_formulation_pp_other(),
        lambda: littering_rate_historical_data_pp_other(),
    )


@component.add(
    name="Littering rate ldpe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "littering_rate_formulation_ldpe_bottle": 1,
        "littering_rate_historical_data_ldpe_bottle": 1,
    },
)
def littering_rate_ldpe_bottle():
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: littering_rate_formulation_ldpe_bottle(),
        lambda: littering_rate_historical_data_ldpe_bottle(),
    )


@component.add(
    name="Littering rate ldpe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "littering_rate_formulation_idpe_film": 1,
        "littering_rate_historical_data_ldpe_film": 1,
    },
)
def littering_rate_ldpe_film():
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: littering_rate_formulation_idpe_film(),
        lambda: littering_rate_historical_data_ldpe_film(),
    )


@component.add(
    name="Littering rate ldpe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "littering_rate_formulation_idpe_other": 1,
        "littering_rate_historical_data_ldpe_other": 1,
    },
)
def littering_rate_ldpe_other():
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: littering_rate_formulation_idpe_other(),
        lambda: littering_rate_historical_data_ldpe_other(),
    )


@component.add(
    name="Littering rate ldpe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "littering_rate_formulation_ldpe_ptt": 1,
        "littering_rate_historical_data_ldpe_ptt": 1,
    },
)
def littering_rate_ldpe_ptt():
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: littering_rate_formulation_ldpe_ptt(),
        lambda: littering_rate_historical_data_ldpe_ptt(),
    )


@component.add(
    name="Littering rate other bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "littering_rate_formulation_other_bottle": 1,
        "littering_rate_historical_data_other_bottle": 1,
    },
)
def littering_rate_other_bottle():
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: littering_rate_formulation_other_bottle(),
        lambda: littering_rate_historical_data_other_bottle(),
    )


@component.add(
    name="Littering rate other film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "littering_rate_formulation_other_film": 1,
        "littering_rate_historical_data_other_film": 1,
    },
)
def littering_rate_other_film():
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: littering_rate_formulation_other_film(),
        lambda: littering_rate_historical_data_other_film(),
    )


@component.add(
    name="Littering rate other other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "littering_rate_formulation_other_other": 1,
        "littering_rate_historical_data_other_other": 1,
    },
)
def littering_rate_other_other():
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: littering_rate_formulation_other_other(),
        lambda: littering_rate_historical_data_other_other(),
    )


@component.add(
    name="Littering rate Other PTT",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "littering_rate_formulation_other_ptt": 1,
        "littering_rate_historical_data_other_ptt": 1,
    },
)
def littering_rate_other_ptt():
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: littering_rate_formulation_other_ptt(),
        lambda: littering_rate_historical_data_other_ptt(),
    )


@component.add(
    name="Littering rate pe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "littering_rate_formulation_pe_bottle": 1,
        "littering_rate_historical_data_pe_bottle": 1,
    },
)
def littering_rate_pe_bottle():
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: littering_rate_formulation_pe_bottle(),
        lambda: littering_rate_historical_data_pe_bottle(),
    )


@component.add(
    name="Littering rate pe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "littering_rate_formulation_pe_film": 1,
        "littering_rate_historical_data_pe_film": 1,
    },
)
def littering_rate_pe_film():
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: littering_rate_formulation_pe_film(),
        lambda: littering_rate_historical_data_pe_film(),
    )


@component.add(
    name="Littering rate pe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "littering_rate_formulation_pe_other": 1,
        "littering_rate_historical_data_pe_other": 1,
    },
)
def littering_rate_pe_other():
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: littering_rate_formulation_pe_other(),
        lambda: littering_rate_historical_data_pe_other(),
    )


@component.add(
    name="Littering rate pe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "littering_rate_formulation_pe_ptt": 1,
        "littering_rate_historical_data_pe_ptt": 1,
    },
)
def littering_rate_pe_ptt():
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: littering_rate_formulation_pe_ptt(),
        lambda: littering_rate_historical_data_pe_ptt(),
    )


@component.add(
    name="Littering rate ps other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "littering_rate_formulation_ps_other": 1,
        "littering_rate_historical_data_ps_other": 1,
    },
)
def littering_rate_ps_other():
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: littering_rate_formulation_ps_other(),
        lambda: littering_rate_historical_data_ps_other(),
    )


@component.add(
    name="Littering rate Pet Other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "littering_rate_formulation_pet_other": 1,
        "littering_rate_historical_data_pet_other": 1,
    },
)
def littering_rate_pet_other():
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: littering_rate_formulation_pet_other(),
        lambda: littering_rate_historical_data_pet_other(),
    )


@component.add(
    name="Littering rate pp film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "littering_rate_formulation_pp_film": 1,
        "littering_rate_historical_data_pp_film": 1,
    },
)
def littering_rate_pp_film():
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: littering_rate_formulation_pp_film(),
        lambda: littering_rate_historical_data_pp_film(),
    )


@component.add(
    name="Littering rate pp ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "littering_rate_formulation_pp_ptt": 1,
        "littering_rate_historical_data_pp_ptt": 1,
    },
)
def littering_rate_pp_ptt():
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: littering_rate_formulation_pp_ptt(),
        lambda: littering_rate_historical_data_pp_ptt(),
    )


@component.add(
    name="Littering rate ps bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "littering_rate_formulation_ps_bottle": 1,
        "littering_rate_historical_data_ps_bottle": 1,
    },
)
def littering_rate_ps_bottle():
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: littering_rate_formulation_ps_bottle(),
        lambda: littering_rate_historical_data_ps_bottle(),
    )


@component.add(
    name="Littering rate ps film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "littering_rate_formulation_ps_film": 1,
        "littering_rate_historical_data_ps_film": 1,
    },
)
def littering_rate_ps_film():
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: littering_rate_formulation_ps_film(),
        lambda: littering_rate_historical_data_ps_film(),
    )


@component.add(
    name="Impact of policy2 on litering pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_policy2_on_litering_pet_ptt():
    """
    IF THEN ELSE( policy2 introduction time pet ptt<Time, 0.75, 1 )
    """
    return 1


@component.add(
    name="Littering rate ps ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "littering_rate_formulation_ps_ptt": 1,
        "littering_rate_historical_data_ps_ptt": 1,
    },
)
def littering_rate_ps_ptt():
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: littering_rate_formulation_ps_ptt(),
        lambda: littering_rate_historical_data_ps_ptt(),
    )


@component.add(
    name="Littering rate pvc bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "littering_rate_formulation_pvc_bottle": 1,
        "littering_rate_historical_data_pvc_bottle": 1,
    },
)
def littering_rate_pvc_bottle():
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: littering_rate_formulation_pvc_bottle(),
        lambda: littering_rate_historical_data_pvc_bottle(),
    )


@component.add(
    name="Littering rate pvc film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "littering_rate_formulation_pvc_film": 1,
        "littering_rate_historical_data_pvc_film": 1,
    },
)
def littering_rate_pvc_film():
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: littering_rate_formulation_pvc_film(),
        lambda: littering_rate_historical_data_pvc_film(),
    )


@component.add(
    name="Littering rate PVC Other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "littering_rate_formulation_pvc_other": 1,
        "littering_rate_historical_data_pvc_other": 1,
    },
)
def littering_rate_pvc_other():
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: littering_rate_formulation_pvc_other(),
        lambda: littering_rate_historical_data_pvc_other(),
    )


@component.add(
    name="Littering rate pvc ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "littering_rate_formulation_pvc_ptt": 1,
        "littering_rate_historical_data_pvc_ptt": 1,
    },
)
def littering_rate_pvc_ptt():
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: littering_rate_formulation_pvc_ptt(),
        lambda: littering_rate_historical_data_pvc_ptt(),
    )


@component.add(
    name="Impact of policy2 on litering pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_policy2_on_litering_pet_film():
    return 1


@component.add(
    name="Littering rate hdpe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "littering_rate_formulation_hdpe_bottle": 1,
        "littering_rate_historical_data_hdpe_bottle": 1,
    },
)
def littering_rate_hdpe_bottle():
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: littering_rate_formulation_hdpe_bottle(),
        lambda: littering_rate_historical_data_hdpe_bottle(),
    )


@component.add(
    name="Littering rate hdpe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "littering_rate_formulation_hdpe_film": 1,
        "littering_rate_historical_data_hdpe_film": 1,
    },
)
def littering_rate_hdpe_film():
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: littering_rate_formulation_hdpe_film(),
        lambda: littering_rate_historical_data_hdpe_film(),
    )


@component.add(
    name="Littering rate hdpe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "littering_rate_formulation_hdpe_other": 1,
        "littering_rate_historical_data_hdpe_other": 1,
    },
)
def littering_rate_hdpe_other():
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: littering_rate_formulation_hdpe_other(),
        lambda: littering_rate_historical_data_hdpe_other(),
    )


@component.add(
    name="Littering rate hdpe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "littering_rate_formulation_hdpe_ptt": 1,
        "littering_rate_historical_data_hdpe_ptt": 1,
    },
)
def littering_rate_hdpe_ptt():
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: littering_rate_formulation_hdpe_ptt(),
        lambda: littering_rate_historical_data_hdpe_ptt(),
    )


@component.add(
    name="Littering rate pp bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "littering_rate_formulation_pp_bottle": 1,
        "littering_rate_historical_data_pp_bottle": 1,
    },
)
def littering_rate_pp_bottle():
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: littering_rate_formulation_pp_bottle(),
        lambda: littering_rate_historical_data_pp_bottle(),
    )


@component.add(
    name="rvm collected formulation pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pet_film():
    return 0.6


@component.add(
    name="rvm collected formulation Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pet_other():
    return 0.6


@component.add(
    name="rvm collected formulation hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_hdpe_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_hdpe_film():
    return 0.6


@component.add(
    name="rvm collected formulation hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_hdpe_other():
    return 0.6


@component.add(
    name="rvm collected formulation hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_hdpe_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ldpe_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation idpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_idpe_film():
    return 0.6


@component.add(
    name="rvm collected formulation ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ldpe_other():
    return 0.6


@component.add(
    name="rvm collected formulation ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ldpe_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_other_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_other_film():
    return 0.6


@component.add(
    name="rvm collected formulation other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_other_other():
    return 0.6


@component.add(
    name="rvm collected formulation Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_other_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pvc_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pe_film():
    return 0.6


@component.add(
    name="rvm collected formulation pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pe_other():
    return 0.6


@component.add(
    name="rvm collected formulation pe ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_collected_formulation_pe_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ps_other():
    return 0.6


@component.add(
    name="rvm collected formulation ps ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_collected_formulation_ps_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pp_bottle():
    return 0.6


@component.add(
    name="policy1 introduction time ps film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ps_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="rvm collected formulation pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pp_film():
    return 0.6


@component.add(
    name="rvm collected formulation pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pp_other():
    return 0.6


@component.add(
    name="rvm collected formulation pp ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_collected_formulation_pp_ptt():
    return 0.6


@component.add(
    name="rvm collected formulation ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ps_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_ps_film():
    return 0.6


@component.add(
    name="rvm collected formulation pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pvc_film():
    return 0.6


@component.add(
    name="rvm collected formulation PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pvc_other():
    return 0.6


@component.add(
    name="policy1 introduction time pe bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pe_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="rvm collected formulation pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pvc_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pe_bottle():
    return 0.6


@component.add(
    name="rvm collected formulation pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rvm_collected_formulation_pet_ptt():
    return 0.6


@component.add(
    name="policy2 introduction time pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time": 1},
)
def policy2_introduction_time_pp_bottle():
    return policy2_introduction_time()


@component.add(
    name="policy2 introduction time other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time": 1},
)
def policy2_introduction_time_other_bottle():
    return policy2_introduction_time()


@component.add(
    name="policy2 introduction time pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time": 1},
)
def policy2_introduction_time_pe_bottle():
    return policy2_introduction_time()


@component.add(
    name="Waste generated other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_other_film": 1},
    other_deps={
        "_integ_waste_generated_other_film": {
            "initial": {},
            "step": {
                "to_waste_generated_other_film": 1,
                "formal_waste_collection_other_film": 1,
                "illegal_collection_data_other_film": 1,
                "littering_other_film": 1,
            },
        }
    },
)
def waste_generated_other_film():
    return _integ_waste_generated_other_film()


_integ_waste_generated_other_film = Integ(
    lambda: to_waste_generated_other_film()
    - formal_waste_collection_other_film()
    - illegal_collection_data_other_film()
    - littering_other_film(),
    lambda: 17888.4,
    "_integ_waste_generated_other_film",
)


@component.add(
    name="policy2 introduction time pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time": 1},
)
def policy2_introduction_time_pp_film():
    return policy2_introduction_time()


@component.add(
    name="pom other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_other_film": 1},
    other_deps={
        "_integ_pom_other_film": {
            "initial": {},
            "step": {
                "domestic_production_other_film": 1,
                "physical_trade_balance_other_film": 1,
                "to_waste_generated_other_film": 1,
            },
        }
    },
)
def pom_other_film():
    return _integ_pom_other_film()


_integ_pom_other_film = Integ(
    lambda: domestic_production_other_film()
    + physical_trade_balance_other_film()
    - to_waste_generated_other_film(),
    lambda: 17888.4,
    "_integ_pom_other_film",
)


@component.add(
    name="landfill rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Actual wmc collected pe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_pe_bottle": 1,
        "wmc_historical_pe_bottle": 1,
    },
)
def actual_wmc_collected_pe_bottle():
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: wmc_collected_formulation_pe_bottle(),
        lambda: wmc_historical_pe_bottle(),
    )


@component.add(
    name="historical rate for domestic pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Waste collected pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pe_bottle": 1},
    other_deps={
        "_integ_waste_collected_pe_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_pe_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pe_bottle": 1,
            },
        }
    },
)
def waste_collected_pe_bottle():
    return _integ_waste_collected_pe_bottle()


_integ_waste_collected_pe_bottle = Integ(
    lambda: formal_waste_collection_pe_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_pe_bottle(),
    lambda: 898,
    "_integ_waste_collected_pe_bottle",
)


@component.add(
    name="Domestic Residual treatment pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pe_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pe_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pe_bottle": 1,
                "sent_to_incineration_pe_bottle": 1,
                "sent_to_landfill_pe_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_pe_bottle():
    return _integ_domestic_residual_treatment_pe_bottle()


_integ_domestic_residual_treatment_pe_bottle = Integ(
    lambda: sent_for_residual_treatment_pe_bottle()
    - sent_to_incineration_pe_bottle()
    - sent_to_landfill_pe_bottle(),
    lambda: 483,
    "_integ_domestic_residual_treatment_pe_bottle",
)


@component.add(
    name="domestic production new pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "placed_on_market_pet_ptt": 1,
        "domestic_production_recycled_pet_ptt": 1,
    },
)
def domestic_production_new_pet_ptt():
    return placed_on_market_pet_ptt() / 2 - domestic_production_recycled_pet_ptt()


@component.add(
    name="rate to illegal collection pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pe_bottle():
    return 0.006


@component.add(
    name="sent for sorting rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Domestic Recycling pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pe_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_pe_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_pe_bottle": 1,
                "mechanical_recycling_pe_bottle": 1,
                "chemical_recycling_pe_bottle": 1,
            },
        }
    },
)
def domestic_recycling_pe_bottle():
    return _integ_domestic_recycling_pe_bottle()


_integ_domestic_recycling_pe_bottle = Integ(
    lambda: sent_for_recycling_pe_bottle()
    - mechanical_recycling_pe_bottle()
    - chemical_recycling_pe_bottle(),
    lambda: 142,
    "_integ_domestic_recycling_pe_bottle",
)


@component.add(
    name="Incineration rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_bottle": 1},
)
def incineration_rate_pe_bottle():
    return 1 - landfill_rate_pe_bottle()


@component.add(
    name="Overseas treatment pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pe_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_pe_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pe_bottle": 1},
        }
    },
)
def overseas_treatment_pe_bottle():
    return _integ_overseas_treatment_pe_bottle()


_integ_overseas_treatment_pe_bottle = Integ(
    lambda: sent_for_overseas_treatment_pe_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_pe_bottle",
)


@component.add(
    name="Actual la collected pe bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_pe_bottle": 1,
        "historical_data_for_la_collected_pe_bottle": 1,
    },
)
def actual_la_collected_pe_bottle():
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: formulation_for_la_collected_pe_bottle(),
        lambda: historical_data_for_la_collected_pe_bottle(),
    )


@component.add(
    name="historical on recycling pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pe_bottle():
    return 0.103


@component.add(
    name="POM pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pe_bottle": 1},
    other_deps={
        "_integ_pom_pe_bottle": {
            "initial": {},
            "step": {
                "domestic_production_pe_bottle": 1,
                "physical_trade_balance_pe_bottle": 1,
                "to_waste_generated_pe_bottle": 1,
            },
        }
    },
)
def pom_pe_bottle():
    return _integ_pom_pe_bottle()


_integ_pom_pe_bottle = Integ(
    lambda: domestic_production_pe_bottle()
    + physical_trade_balance_pe_bottle()
    - to_waste_generated_pe_bottle(),
    lambda: 941.493,
    "_integ_pom_pe_bottle",
)


@component.add(
    name="Domestic production recycled pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pe_bottle": 1},
)
def domestic_production_recycled_pe_bottle():
    return mechanical_recycling_pe_bottle()


@component.add(
    name="formulation for domestic rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_bottle": 1,
        "historical_rate_for_domestic_pe_bottle": 1,
    },
)
def formulation_for_domestic_rate_pe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pe_bottle(),
        lambda: historical_rate_for_domestic_pe_bottle(),
        lambda: 0,
    )


@component.add(
    name="littering rate formulation pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pe_bottle():
    return 0.01


@component.add(
    name="sent for sorting rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pet_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="recycling rejects rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pe_bottle": 1, "sorting_pe_bottle": 1},
)
def recycling_rejects_rate_pe_bottle():
    return rate_of_recycling_reject_pe_bottle() * sorting_pe_bottle()


@component.add(
    name="historical data for la collected pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="Sorting pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pe_bottle": 1},
    other_deps={
        "_integ_sorting_pe_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_pe_bottle": 1,
                "sent_for_recycling_pe_bottle": 1,
                "recycling_rejects_rate_pe_bottle": 1,
                "sent_for_overseas_treatment_pe_bottle": 1,
            },
        }
    },
)
def sorting_pe_bottle():
    return _integ_sorting_pe_bottle()


_integ_sorting_pe_bottle = Integ(
    lambda: sent_for_sorting_pe_bottle()
    - sent_for_recycling_pe_bottle()
    - recycling_rejects_rate_pe_bottle()
    - sent_for_overseas_treatment_pe_bottle(),
    lambda: 408,
    "_integ_sorting_pe_bottle",
)


@component.add(
    name="Illegal collection pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pe_bottle": 1},
    other_deps={
        "_integ_illegal_collection_pe_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_pe_bottle": 1,
                "mismanagement_pe_bottle": 1,
            },
        }
    },
)
def illegal_collection_pe_bottle():
    return _integ_illegal_collection_pe_bottle()


_integ_illegal_collection_pe_bottle = Integ(
    lambda: illegal_collection_data_pe_bottle() - mismanagement_pe_bottle(),
    lambda: 0,
    "_integ_illegal_collection_pe_bottle",
)


@component.add(
    name="Formal domestic treatment pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pe_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pe_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pe_bottle": 1,
                "sent_for_sorting_pe_bottle": 1,
                "sent_for_residual_treatment_pe_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_pe_bottle():
    return _integ_formal_domestic_treatment_pe_bottle()


_integ_formal_domestic_treatment_pe_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pe_bottle()
    - sent_for_sorting_pe_bottle()
    - sent_for_residual_treatment_pe_bottle(),
    lambda: 892,
    "_integ_formal_domestic_treatment_pe_bottle",
)


@component.add(
    name="Littered pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pe_bottle": 1},
    other_deps={
        "_integ_littered_pe_bottle": {"initial": {}, "step": {"littering_pe_bottle": 1}}
    },
)
def littered_pe_bottle():
    return _integ_littered_pe_bottle()


_integ_littered_pe_bottle = Integ(
    lambda: littering_pe_bottle(), lambda: 0, "_integ_littered_pe_bottle"
)


@component.add(
    name="Recycling rejects pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pe_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_pe_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_pe_bottle": 1},
        }
    },
)
def recycling_rejects_pe_bottle():
    return _integ_recycling_rejects_pe_bottle()


_integ_recycling_rejects_pe_bottle = Integ(
    lambda: recycling_rejects_rate_pe_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_pe_bottle",
)


@component.add(
    name="Chemical recycling pe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pe_bottle": 1,
        "domestic_recycling_pe_bottle": 1,
    },
)
def chemical_recycling_pe_bottle():
    return rate_of_chemical_recycling_pe_bottle() * domestic_recycling_pe_bottle()


@component.add(
    name="illegal collection data pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pe_bottle": 1,
        "waste_generated_pe_bottle": 1,
    },
)
def illegal_collection_data_pe_bottle():
    return rate_to_illegal_collection_pe_bottle() * waste_generated_pe_bottle()


@component.add(
    name="Waste collected sent to formal domestic treatment pe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pe_bottle": 1,
        "waste_collected_pe_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pe_bottle():
    return sent_for_formal_domestic_pe_bottle() * waste_collected_pe_bottle()


@component.add(
    name="Dumped pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pe_bottle": 1},
    other_deps={
        "_integ_dumped_pe_bottle": {
            "initial": {},
            "step": {"mismanagement_pe_bottle": 1},
        }
    },
)
def dumped_pe_bottle():
    return _integ_dumped_pe_bottle()


_integ_dumped_pe_bottle = Integ(
    lambda: mismanagement_pe_bottle(), lambda: 0, "_integ_dumped_pe_bottle"
)


@component.add(
    name="formulation for recycling rate pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pe_bottle():
    """
    0.03
    """
    return 0.05


@component.add(
    name="physical trade new pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_ptt": 1},
)
def physical_trade_new_pet_ptt():
    return trade_data_pet_ptt() / 2


@component.add(
    name="Sent to incineration pe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pe_bottle": 1,
        "domestic_residual_treatment_pe_bottle": 1,
    },
)
def sent_to_incineration_pe_bottle():
    return incineration_rate_pe_bottle() * domestic_residual_treatment_pe_bottle()


@component.add(
    name="POM pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pet_ptt": 1},
    other_deps={
        "_integ_pom_pet_ptt": {
            "initial": {},
            "step": {
                "domestic_production_pet_ptt": 1,
                "physical_trade_balance_pet_ptt": 1,
                "to_waste_generated_pet_ptt": 1,
            },
        }
    },
)
def pom_pet_ptt():
    return _integ_pom_pet_ptt()


_integ_pom_pet_ptt = Integ(
    lambda: domestic_production_pet_ptt()
    + physical_trade_balance_pet_ptt()
    - to_waste_generated_pet_ptt(),
    lambda: 159112,
    "_integ_pom_pet_ptt",
)


@component.add(
    name="Formal Waste Collection pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pe_bottle": 1,
        "actual_rvm_collected_pe_bottle": 1,
        "actual_wmc_collected_pe_bottle": 1,
        "waste_generated_pe_bottle": 1,
    },
)
def formal_waste_collection_pe_bottle():
    return (
        actual_la_collected_pe_bottle()
        + actual_rvm_collected_pe_bottle()
        + actual_wmc_collected_pe_bottle()
    ) * waste_generated_pe_bottle()


@component.add(
    name="Landfill pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pe_bottle": 1},
    other_deps={
        "_integ_landfill_pe_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_pe_bottle": 1},
        }
    },
)
def landfill_pe_bottle():
    return _integ_landfill_pe_bottle()


_integ_landfill_pe_bottle = Integ(
    lambda: sent_to_landfill_pe_bottle(), lambda: 0, "_integ_landfill_pe_bottle"
)


@component.add(
    name="Actual rvm collected pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_pe_bottle": 1,
        "rvm_historical_pe_bottle": 1,
    },
)
def actual_rvm_collected_pe_bottle():
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: rvm_collected_formulation_pe_bottle(),
        lambda: rvm_historical_pe_bottle(),
    )


@component.add(
    name="historical overseas rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="rate dumped pe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pe_bottle():
    return 0.006


@component.add(
    name="Waste generated pe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pe_bottle": 1},
    other_deps={
        "_integ_waste_generated_pe_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_pe_bottle": 1,
                "illegal_collection_data_pe_bottle": 2,
                "littering_pe_bottle": 1,
                "formal_waste_collection_pe_bottle": 1,
            },
        }
    },
)
def waste_generated_pe_bottle():
    return _integ_waste_generated_pe_bottle()


_integ_waste_generated_pe_bottle = Integ(
    lambda: to_waste_generated_pe_bottle()
    - illegal_collection_data_pe_bottle()
    - littering_pe_bottle()
    - formal_waste_collection_pe_bottle()
    - illegal_collection_data_pe_bottle(),
    lambda: 941.493,
    "_integ_waste_generated_pe_bottle",
)


@component.add(
    name="formulation for la collected pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pe_bottle():
    return 0.15


@component.add(
    name="rate sent for reuse pe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pe_bottle():
    return 0


@component.add(
    name="physcial trade recycled pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trade_data_pet_ptt": 1},
)
def physcial_trade_recycled_pet_ptt():
    return trade_data_pet_ptt() / 2


@component.add(
    name="sent for sorting pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pe_bottle": 1,
        "sent_for_sorting_rate_pe_bottle": 1,
    },
)
def sent_for_sorting_pe_bottle():
    return formal_domestic_treatment_pe_bottle() * sent_for_sorting_rate_pe_bottle()


@component.add(
    name="littering rate historical data pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pe_bottle():
    return 0.04


@component.add(
    name="Incineration pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pe_bottle": 1},
    other_deps={
        "_integ_incineration_pe_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_pe_bottle": 1},
        }
    },
)
def incineration_pe_bottle():
    return _integ_incineration_pe_bottle()


_integ_incineration_pe_bottle = Integ(
    lambda: sent_to_incineration_pe_bottle(), lambda: 0, "_integ_incineration_pe_bottle"
)


@component.add(
    name="historical on rate of recycling pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Rate of chemical recycling pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pe_bottle():
    return 0


@component.add(
    name="wmc collected formulation pe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pe_bottle():
    return 0.25


@component.add(
    name="littering pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pe_bottle": 1, "waste_generated_pe_bottle": 1},
)
def littering_pe_bottle():
    return littering_rate_pe_bottle() * waste_generated_pe_bottle()


@component.add(
    name="formulation for rate of recycling pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_bottle": 1,
        "historical_on_rate_of_recycling_pe_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_pe_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pe_bottle(),
        lambda: historical_on_rate_of_recycling_pe_bottle(),
        lambda: 0,
    )


@component.add(
    name="Sent for recycling pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pe_bottle": 1,
        "rate_sent_for_domestic_recycling_pe_bottle": 1,
    },
)
def sent_for_recycling_pe_bottle():
    return sorting_pe_bottle() * rate_sent_for_domestic_recycling_pe_bottle()


@component.add(
    name="wmc historical pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate of recycling pe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pe_bottle": 1,
        "historical_on_rate_of_recycling_pe_bottle": 1,
    },
)
def rate_of_recycling_pe_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_pe_bottle(),
        lambda: historical_on_rate_of_recycling_pe_bottle(),
    )


@component.add(
    name="rate of recycling reject pe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "formulation_for_recycling_rate_pe_bottle": 1,
        "historical_on_recycling_pe_bottle": 1,
    },
)
def rate_of_recycling_reject_pe_bottle():
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: formulation_for_recycling_rate_pe_bottle(),
        lambda: historical_on_recycling_pe_bottle(),
    )


@component.add(
    name="formulation of overseas rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_bottle": 1,
        "historical_overseas_rate_pe_bottle": 1,
    },
)
def formulation_of_overseas_rate_pe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pe_bottle(),
        lambda: historical_overseas_rate_pe_bottle(),
        lambda: 0,
    )


@component.add(
    name="Sent for overseas treatment pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pe_bottle": 1, "sorting_pe_bottle": 1},
)
def sent_for_overseas_treatment_pe_bottle():
    return overseas_treament_rate_pe_bottle() * sorting_pe_bottle()


@component.add(
    name="Sent to landfill pe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pe_bottle": 1,
        "domestic_residual_treatment_pe_bottle": 1,
    },
)
def sent_to_landfill_pe_bottle():
    return landfill_rate_pe_bottle() * domestic_residual_treatment_pe_bottle()


@component.add(
    name="rate overseas pe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_pe_bottle": 1,
        "historical_overseas_rate_pe_bottle": 1,
    },
)
def rate_overseas_pe_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pe_bottle() < time(),
        lambda: formulation_of_overseas_rate_pe_bottle(),
        lambda: historical_overseas_rate_pe_bottle(),
    )


@component.add(
    name="rvm historical pe bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pe_bottle():
    return 0


@component.add(
    name="Trade data pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"placed_on_market_pet_ptt": 1},
)
def trade_data_pet_ptt():
    return placed_on_market_pet_ptt() / 2


@component.add(
    name="Recycled chemically pe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pe_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_pe_bottle": {
            "initial": {},
            "step": {"chemical_recycling_pe_bottle": 1},
        }
    },
)
def recycled_chemically_pe_bottle():
    return _integ_recycled_chemically_pe_bottle()


_integ_recycled_chemically_pe_bottle = Integ(
    lambda: chemical_recycling_pe_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_pe_bottle",
)


@component.add(
    name="sent for formal domestic pe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pe_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Overseas treament rate pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="rate of mechanical recycling pe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pe_bottle():
    return 1


@component.add(
    name="rate sent for domestic recycling pe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Mechanical recycling pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pe_bottle": 1,
        "domestic_recycling_pe_bottle": 1,
    },
)
def mechanical_recycling_pe_bottle():
    return rate_of_mechanical_recycling_pe_bottle() * domestic_recycling_pe_bottle()


@component.add(
    name="mismanagement pe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pe_bottle": 1, "rate_dumped_pe_bottle": 1},
)
def mismanagement_pe_bottle():
    return illegal_collection_pe_bottle() * rate_dumped_pe_bottle()


@component.add(
    name="policy1 introduction time pet ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pet_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="Recycling rejects pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pet_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_pet_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_pet_ptt": 1},
        }
    },
)
def recycling_rejects_pet_ptt():
    return _integ_recycling_rejects_pet_ptt()


_integ_recycling_rejects_pet_ptt = Integ(
    lambda: recycling_rejects_rate_pet_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_pet_ptt",
)


@component.add(
    name="Sent to landfill pet ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_ptt": 1, "domestic_residual_treatment_pet_ptt": 1},
)
def sent_to_landfill_pet_ptt():
    return landfill_rate_pet_ptt() * domestic_residual_treatment_pet_ptt()


@component.add(
    name="Illegal collection pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pet_ptt": 1},
    other_deps={
        "_integ_illegal_collection_pet_ptt": {
            "initial": {},
            "step": {"illegal_collection_data_pet_ptt": 1, "mismanagement_pet_ptt": 1},
        }
    },
)
def illegal_collection_pet_ptt():
    return _integ_illegal_collection_pet_ptt()


_integ_illegal_collection_pet_ptt = Integ(
    lambda: illegal_collection_data_pet_ptt() - mismanagement_pet_ptt(),
    lambda: 0,
    "_integ_illegal_collection_pet_ptt",
)


@component.add(
    name="Littered pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pet_ptt": 1},
    other_deps={
        "_integ_littered_pet_ptt": {"initial": {}, "step": {"littering_pet_ptt": 1}}
    },
)
def littered_pet_ptt():
    return _integ_littered_pet_ptt()


_integ_littered_pet_ptt = Integ(
    lambda: littering_pet_ptt(), lambda: 0, "_integ_littered_pet_ptt"
)


@component.add(
    name="rate of recycling pet ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pet_ptt": 1,
        "historical_on_rate_of_recycling_pet_ptt": 1,
    },
)
def rate_of_recycling_pet_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_pet_ptt(),
        lambda: historical_on_rate_of_recycling_pet_ptt(),
    )


@component.add(
    name="Formal domestic treatment pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pet_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pet_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pet_ptt": 1,
                "sent_for_sorting_pet_ptt": 1,
                "sent_for_residual_treatment_pet_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_pet_ptt():
    return _integ_formal_domestic_treatment_pet_ptt()


_integ_formal_domestic_treatment_pet_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pet_ptt()
    - sent_for_sorting_pet_ptt()
    - sent_for_residual_treatment_pet_ptt(),
    lambda: 170000,
    "_integ_formal_domestic_treatment_pet_ptt",
)


@component.add(
    name="Waste collected sent to formal domestic treatment pet ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pet_ptt": 1, "waste_collected_pet_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pet_ptt():
    return sent_for_formal_domestic_pet_ptt() * waste_collected_pet_ptt()


@component.add(
    name="Sent to incineration pet ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pet_ptt": 1,
        "domestic_residual_treatment_pet_ptt": 1,
    },
)
def sent_to_incineration_pet_ptt():
    return incineration_rate_pet_ptt() * domestic_residual_treatment_pet_ptt()


@component.add(
    name="Dumped pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pet_ptt": 1},
    other_deps={
        "_integ_dumped_pet_ptt": {"initial": {}, "step": {"mismanagement_pet_ptt": 1}}
    },
)
def dumped_pet_ptt():
    return _integ_dumped_pet_ptt()


_integ_dumped_pet_ptt = Integ(
    lambda: mismanagement_pet_ptt(), lambda: 0, "_integ_dumped_pet_ptt"
)


@component.add(
    name="Waste collected pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pet_ptt": 1},
    other_deps={
        "_integ_waste_collected_pet_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_pet_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pet_ptt": 1,
            },
        }
    },
)
def waste_collected_pet_ptt():
    return _integ_waste_collected_pet_ptt()


_integ_waste_collected_pet_ptt = Integ(
    lambda: formal_waste_collection_pet_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_pet_ptt(),
    lambda: 160000,
    "_integ_waste_collected_pet_ptt",
)


@component.add(
    name="Littering rate pet ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_policy2_on_litering_pet_ptt": 1,
        "time": 1,
        "policy1_introduction_time_pet_ptt": 1,
        "littering_rate_historical_data_pet_ptt": 1,
        "littering_rate_formulation_pet_ptt": 1,
    },
)
def littering_rate_pet_ptt():
    return impact_of_policy2_on_litering_pet_ptt() * if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: littering_rate_formulation_pet_ptt(),
        lambda: littering_rate_historical_data_pet_ptt(),
    )


@component.add(
    name="Actual rvm collected pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_pet_ptt": 1,
        "rvm_historical_pet_ptt": 1,
    },
)
def actual_rvm_collected_pet_ptt():
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: rvm_collected_formulation_pet_ptt(),
        lambda: rvm_historical_pet_ptt(),
    )


@component.add(
    name="Incineration rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_ptt": 1},
)
def incineration_rate_pet_ptt():
    return 1 - landfill_rate_pet_ptt()


@component.add(
    name="formulation for domestic rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_ptt": 1,
        "historical_rate_for_domestic_pet_ptt": 1,
    },
)
def formulation_for_domestic_rate_pet_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pet_ptt(),
        lambda: historical_rate_for_domestic_pet_ptt(),
        lambda: 0,
    )


@component.add(
    name="Overseas treatment pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pet_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_pet_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pet_ptt": 1},
        }
    },
)
def overseas_treatment_pet_ptt():
    return _integ_overseas_treatment_pet_ptt()


_integ_overseas_treatment_pet_ptt = Integ(
    lambda: sent_for_overseas_treatment_pet_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_pet_ptt",
)


@component.add(
    name="Actual la collected pet ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_pet_ptt": 1,
        "historical_data_for_la_collected_pet_ptt": 1,
    },
)
def actual_la_collected_pet_ptt():
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: formulation_for_la_collected_pet_ptt(),
        lambda: historical_data_for_la_collected_pet_ptt(),
    )


@component.add(
    name="rate sent for domestic recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pet_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Incineration pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pet_ptt": 1},
    other_deps={
        "_integ_incineration_pet_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_pet_ptt": 1},
        }
    },
)
def incineration_pet_ptt():
    return _integ_incineration_pet_ptt()


_integ_incineration_pet_ptt = Integ(
    lambda: sent_to_incineration_pet_ptt(), lambda: 0, "_integ_incineration_pet_ptt"
)


@component.add(
    name="littering rate formulation pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pet_ptt():
    return 0.01


@component.add(
    name="Actual wmc collected pet ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_pet_ptt": 1,
        "wmc_historical_pet_ptt": 1,
    },
)
def actual_wmc_collected_pet_ptt():
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: wmc_collected_formulation_pet_ptt(),
        lambda: wmc_historical_pet_ptt(),
    )


@component.add(
    name="recycling rejects rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pet_ptt": 1, "sorting_pet_ptt": 1},
)
def recycling_rejects_rate_pet_ptt():
    return rate_of_recycling_reject_pet_ptt() * sorting_pet_ptt()


@component.add(
    name="Sorting pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pet_ptt": 1},
    other_deps={
        "_integ_sorting_pet_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_pet_ptt": 1,
                "sent_for_recycling_pet_ptt": 1,
                "recycling_rejects_rate_pet_ptt": 1,
                "sent_for_overseas_treatment_pet_ptt": 1,
            },
        }
    },
)
def sorting_pet_ptt():
    return _integ_sorting_pet_ptt()


_integ_sorting_pet_ptt = Integ(
    lambda: sent_for_sorting_pet_ptt()
    - sent_for_recycling_pet_ptt()
    - recycling_rejects_rate_pet_ptt()
    - sent_for_overseas_treatment_pet_ptt(),
    lambda: 57470,
    "_integ_sorting_pet_ptt",
)


@component.add(
    name="Landfill pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pet_ptt": 1},
    other_deps={
        "_integ_landfill_pet_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_pet_ptt": 1},
        }
    },
)
def landfill_pet_ptt():
    return _integ_landfill_pet_ptt()


_integ_landfill_pet_ptt = Integ(
    lambda: sent_to_landfill_pet_ptt(), lambda: 36818, "_integ_landfill_pet_ptt"
)


@component.add(
    name="rate of recycling reject pet ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_pet_ptt": 1,
        "historical_on_recycling_pet_ptt": 1,
    },
)
def rate_of_recycling_reject_pet_ptt():
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: formulation_for_recycling_rate_pet_ptt(),
        lambda: historical_on_recycling_pet_ptt(),
    )


@component.add(
    name="mismanagement pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pet_ptt": 1, "rate_dumped_pet_ptt": 1},
)
def mismanagement_pet_ptt():
    return illegal_collection_pet_ptt() * rate_dumped_pet_ptt()


@component.add(
    name="Formal Waste Collection pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pet_ptt": 1,
        "actual_rvm_collected_pet_ptt": 1,
        "actual_wmc_collected_pet_ptt": 1,
        "waste_generated_pet_ptt": 1,
    },
)
def formal_waste_collection_pet_ptt():
    return (
        actual_la_collected_pet_ptt()
        + actual_rvm_collected_pet_ptt()
        + actual_wmc_collected_pet_ptt()
    ) * waste_generated_pet_ptt()


@component.add(
    name="Sent for overseas treatment pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pet_ptt": 1, "sorting_pet_ptt": 1},
)
def sent_for_overseas_treatment_pet_ptt():
    return overseas_treament_rate_pet_ptt() * sorting_pet_ptt()


@component.add(
    name="Waste generated pet ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pet_ptt": 1},
    other_deps={
        "_integ_waste_generated_pet_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_pet_ptt": 1,
                "illegal_collection_data_pet_ptt": 2,
                "littering_pet_ptt": 1,
                "formal_waste_collection_pet_ptt": 1,
            },
        }
    },
)
def waste_generated_pet_ptt():
    return _integ_waste_generated_pet_ptt()


_integ_waste_generated_pet_ptt = Integ(
    lambda: to_waste_generated_pet_ptt()
    - illegal_collection_data_pet_ptt()
    - littering_pet_ptt()
    - formal_waste_collection_pet_ptt()
    - illegal_collection_data_pet_ptt(),
    lambda: 159112,
    "_integ_waste_generated_pet_ptt",
)


@component.add(
    name="rate overseas pet ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_pet_ptt": 1,
        "historical_overseas_rate_pet_ptt": 1,
    },
)
def rate_overseas_pet_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pet_ptt() < time(),
        lambda: formulation_of_overseas_rate_pet_ptt(),
        lambda: historical_overseas_rate_pet_ptt(),
    )


@component.add(
    name="Mechanical recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pet_ptt": 1,
        "domestic_recycling_pet_ptt": 1,
    },
)
def mechanical_recycling_pet_ptt():
    return rate_of_mechanical_recycling_pet_ptt() * domestic_recycling_pet_ptt()


@component.add(
    name="Recycled chemically pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pet_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_pet_ptt": {
            "initial": {},
            "step": {"chemical_recycling_pet_ptt": 1},
        }
    },
)
def recycled_chemically_pet_ptt():
    return _integ_recycled_chemically_pet_ptt()


_integ_recycled_chemically_pet_ptt = Integ(
    lambda: chemical_recycling_pet_ptt(),
    lambda: 0,
    "_integ_recycled_chemically_pet_ptt",
)


@component.add(
    name="formulation of overseas rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_ptt": 1,
        "historical_overseas_rate_pet_ptt": 1,
    },
)
def formulation_of_overseas_rate_pet_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pet_ptt(),
        lambda: historical_overseas_rate_pet_ptt(),
        lambda: 0,
    )


@component.add(
    name="illegal collection data pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_to_illegal_collection_pet_ptt": 1, "waste_generated_pet_ptt": 1},
)
def illegal_collection_data_pet_ptt():
    return rate_to_illegal_collection_pet_ptt() * waste_generated_pet_ptt()


@component.add(
    name="rate sent for reuse pet ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pet_ptt():
    return 0


@component.add(
    name="Domestic production recycled pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pet_ptt": 1},
)
def domestic_production_recycled_pet_ptt():
    return mechanical_recycling_pet_ptt()


@component.add(
    name="historical rate for domestic pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="wmc collected formulation pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pet_ptt():
    return 0.25


@component.add(
    name="formulation for la collected pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pet_ptt():
    return 0.15


@component.add(
    name="Domestic Residual treatment pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pet_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pet_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pet_ptt": 1,
                "sent_to_incineration_pet_ptt": 1,
                "sent_to_landfill_pet_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_pet_ptt():
    return _integ_domestic_residual_treatment_pet_ptt()


_integ_domestic_residual_treatment_pet_ptt = Integ(
    lambda: sent_for_residual_treatment_pet_ptt()
    - sent_to_incineration_pet_ptt()
    - sent_to_landfill_pet_ptt(),
    lambda: 8000,
    "_integ_domestic_residual_treatment_pet_ptt",
)


@component.add(
    name="historical overseas rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="rate dumped pet ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pet_ptt():
    return 0.006


@component.add(
    name="Chemical recycling pet ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pet_ptt": 1,
        "domestic_recycling_pet_ptt": 1,
    },
)
def chemical_recycling_pet_ptt():
    return rate_of_chemical_recycling_pet_ptt() * domestic_recycling_pet_ptt()


@component.add(
    name="littering pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pet_ptt": 1, "waste_generated_pet_ptt": 1},
)
def littering_pet_ptt():
    return littering_rate_pet_ptt() * waste_generated_pet_ptt()


@component.add(
    name="policy2 introduction time",
    limits=(2014.0, 2042.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def policy2_introduction_time():
    return 2030


@component.add(
    name="Sent for recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pet_ptt": 1, "rate_sent_for_domestic_recycling_pet_ptt": 1},
)
def sent_for_recycling_pet_ptt():
    return sorting_pet_ptt() * rate_sent_for_domestic_recycling_pet_ptt()


@component.add(
    name="wmc historical pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="formulation for recycling rate pet ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pet_ptt():
    """
    0.03
    """
    return 0.05


@component.add(
    name="historical on rate of recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Domestic Recycling pet ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pet_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_pet_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_pet_ptt": 1,
                "mechanical_recycling_pet_ptt": 1,
                "chemical_recycling_pet_ptt": 1,
            },
        }
    },
)
def domestic_recycling_pet_ptt():
    return _integ_domestic_recycling_pet_ptt()


_integ_domestic_recycling_pet_ptt = Integ(
    lambda: sent_for_recycling_pet_ptt()
    - mechanical_recycling_pet_ptt()
    - chemical_recycling_pet_ptt(),
    lambda: 30000,
    "_integ_domestic_recycling_pet_ptt",
)


@component.add(
    name="Overseas treament rate pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pet_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="formulation for rate of recycling pet ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_ptt": 1,
        "historical_on_rate_of_recycling_pet_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_pet_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pet_ptt(),
        lambda: historical_on_rate_of_recycling_pet_ptt(),
        lambda: 0,
    )


@component.add(
    name="historical data for la collected pet ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pet_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="policy1 introduction time pp ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pp_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time ps bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ps_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time ps other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ps_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time ps ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ps_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pvc bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pvc_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pvc film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pvc_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time PVC Other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pvc_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pvc ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pvc_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="POM pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pvc_bottle": 1},
    other_deps={
        "_integ_pom_pvc_bottle": {
            "initial": {},
            "step": {
                "domestic_production_pvc_bottle": 1,
                "physical_trade_balance_pvc_bottle": 1,
                "to_waste_generated_pvc_bottle": 1,
            },
        }
    },
)
def pom_pvc_bottle():
    return _integ_pom_pvc_bottle()


_integ_pom_pvc_bottle = Integ(
    lambda: domestic_production_pvc_bottle()
    + physical_trade_balance_pvc_bottle()
    - to_waste_generated_pvc_bottle(),
    lambda: 0,
    "_integ_pom_pvc_bottle",
)


@component.add(
    name="POM pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pvc_film": 1},
    other_deps={
        "_integ_pom_pvc_film": {
            "initial": {},
            "step": {
                "domestic_production_pvc_film": 1,
                "physical_trade_balance_pvc_film": 1,
                "to_waste_generated_pvc_film": 1,
            },
        }
    },
)
def pom_pvc_film():
    return _integ_pom_pvc_film()


_integ_pom_pvc_film = Integ(
    lambda: domestic_production_pvc_film()
    + physical_trade_balance_pvc_film()
    - to_waste_generated_pvc_film(),
    lambda: 8473.44,
    "_integ_pom_pvc_film",
)


@component.add(
    name="POM PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pvc_other": 1},
    other_deps={
        "_integ_pom_pvc_other": {
            "initial": {},
            "step": {
                "domestic_production_pvc_other": 1,
                "physical_trade_balance_pvc_other": 1,
                "to_waste_generated_pvc_other": 1,
            },
        }
    },
)
def pom_pvc_other():
    return _integ_pom_pvc_other()


_integ_pom_pvc_other = Integ(
    lambda: domestic_production_pvc_other()
    + physical_trade_balance_pvc_other()
    - to_waste_generated_pvc_other(),
    lambda: 2824.48,
    "_integ_pom_pvc_other",
)


@component.add(
    name="POM ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_ps_ptt": 1},
    other_deps={
        "_integ_pom_ps_ptt": {
            "initial": {},
            "step": {
                "domestic_production_ps_ptt": 1,
                "physical_trade_balance_ps_ptt": 1,
                "to_waste_generated_ps_ptt": 1,
            },
        }
    },
)
def pom_ps_ptt():
    return _integ_pom_ps_ptt()


_integ_pom_ps_ptt = Integ(
    lambda: domestic_production_ps_ptt()
    + physical_trade_balance_ps_ptt()
    - to_waste_generated_ps_ptt(),
    lambda: 53665.1,
    "_integ_pom_ps_ptt",
)


@component.add(
    name="POM ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_ps_bottle": 1},
    other_deps={
        "_integ_pom_ps_bottle": {
            "initial": {},
            "step": {
                "domestic_production_ps_bottle": 1,
                "physical_trade_balance_ps_bottle": 1,
                "to_waste_generated_ps_bottle": 1,
            },
        }
    },
)
def pom_ps_bottle():
    return _integ_pom_ps_bottle()


_integ_pom_ps_bottle = Integ(
    lambda: domestic_production_ps_bottle()
    + physical_trade_balance_ps_bottle()
    - to_waste_generated_ps_bottle(),
    lambda: 0,
    "_integ_pom_ps_bottle",
)


@component.add(
    name="POM ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_ps_film": 1},
    other_deps={
        "_integ_pom_ps_film": {
            "initial": {},
            "step": {
                "domestic_production_ps_film": 1,
                "physical_trade_balance_ps_film": 1,
                "to_waste_generated_ps_film": 1,
            },
        }
    },
)
def pom_ps_film():
    return _integ_pom_ps_film()


_integ_pom_ps_film = Integ(
    lambda: domestic_production_ps_film()
    + physical_trade_balance_ps_film()
    - to_waste_generated_ps_film(),
    lambda: 1882.99,
    "_integ_pom_ps_film",
)


@component.add(
    name="POM ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_ps_other": 1},
    other_deps={
        "_integ_pom_ps_other": {
            "initial": {},
            "step": {
                "domestic_production_ps_other": 1,
                "physical_trade_balance_ps_other": 1,
                "to_waste_generated_ps_other": 1,
            },
        }
    },
)
def pom_ps_other():
    return _integ_pom_ps_other()


_integ_pom_ps_other = Integ(
    lambda: domestic_production_ps_other()
    + physical_trade_balance_ps_other()
    - to_waste_generated_ps_other(),
    lambda: 3765.97,
    "_integ_pom_ps_other",
)


@component.add(
    name="policy1 introduction time pe other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pe_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pe ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pe_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pet bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pet_bottle():
    return policy1_introduction_time()


@component.add(
    name="policy1 introduction time pp film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pp_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pp other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pp_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="Total POM pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pe_ptt": 1},
    other_deps={
        "_integ_total_pom_pe_ptt": {
            "initial": {},
            "step": {
                "domestic_production_pe_ptt": 1,
                "physical_trade_balance_pe_ptt": 1,
                "to_waste_generated_pe_ptt": 1,
            },
        }
    },
)
def total_pom_pe_ptt():
    return _integ_total_pom_pe_ptt()


_integ_total_pom_pe_ptt = Integ(
    lambda: domestic_production_pe_ptt()
    + physical_trade_balance_pe_ptt()
    - to_waste_generated_pe_ptt(),
    lambda: 11297.9,
    "_integ_total_pom_pe_ptt",
)


@component.add(
    name="policy1 introduction time pp bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pp_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="POM pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pp_film": 1},
    other_deps={
        "_integ_pom_pp_film": {
            "initial": {},
            "step": {
                "physical_trade_balance_pp_film": 1,
                "domestic_production_pp_film": 1,
                "to_waste_generated_pp_film": 1,
            },
        }
    },
)
def pom_pp_film():
    return _integ_pom_pp_film()


_integ_pom_pp_film = Integ(
    lambda: physical_trade_balance_pp_film()
    + domestic_production_pp_film()
    - to_waste_generated_pp_film(),
    lambda: 125219,
    "_integ_pom_pp_film",
)


@component.add(
    name="Total POM pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pp_other": 1},
    other_deps={
        "_integ_total_pom_pp_other": {
            "initial": {},
            "step": {
                "domestic_production_pp_other": 1,
                "physical_trade_balance_pp_other": 1,
                "to_waste_generated_pp_other": 1,
            },
        }
    },
)
def total_pom_pp_other():
    return _integ_total_pom_pp_other()


_integ_total_pom_pp_other = Integ(
    lambda: domestic_production_pp_other()
    + physical_trade_balance_pp_other()
    - to_waste_generated_pp_other(),
    lambda: 74377.9,
    "_integ_total_pom_pp_other",
)


@component.add(
    name="Total POM pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pe_film": 1},
    other_deps={
        "_integ_total_pom_pe_film": {
            "initial": {},
            "step": {
                "domestic_production_pe_film": 1,
                "physical_trade_balance_pe_film": 1,
                "to_waste_generated_pe_film": 1,
            },
        }
    },
)
def total_pom_pe_film():
    return _integ_total_pom_pe_film()


_integ_total_pom_pe_film = Integ(
    lambda: domestic_production_pe_film()
    + physical_trade_balance_pe_film()
    - to_waste_generated_pe_film(),
    lambda: 96973.8,
    "_integ_total_pom_pe_film",
)


@component.add(
    name="Total POM pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pe_other": 1},
    other_deps={
        "_integ_total_pom_pe_other": {
            "initial": {},
            "step": {
                "domestic_production_pe_other": 1,
                "physical_trade_balance_pe_other": 1,
                "to_waste_generated_pe_other": 1,
            },
        }
    },
)
def total_pom_pe_other():
    """
    11297.9134860051
    """
    return _integ_total_pom_pe_other()


_integ_total_pom_pe_other = Integ(
    lambda: domestic_production_pe_other()
    + physical_trade_balance_pe_other()
    - to_waste_generated_pe_other(),
    lambda: 941.493,
    "_integ_total_pom_pe_other",
)


@component.add(
    name="Total POM pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pp_ptt": 1},
    other_deps={
        "_integ_total_pom_pp_ptt": {
            "initial": {},
            "step": {
                "domestic_production_pp_ptt": 1,
                "physical_trade_balance_pp_ptt": 1,
                "to_waste_generated_pp_ptt": 1,
            },
        }
    },
)
def total_pom_pp_ptt():
    return _integ_total_pom_pp_ptt()


_integ_total_pom_pp_ptt = Integ(
    lambda: domestic_production_pp_ptt()
    + physical_trade_balance_pp_ptt()
    - to_waste_generated_pp_ptt(),
    lambda: 152522,
    "_integ_total_pom_pp_ptt",
)


@component.add(
    name="policy1 introduction time pe film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pe_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="Total POM pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pp_bottle": 1},
    other_deps={
        "_integ_total_pom_pp_bottle": {
            "initial": {},
            "step": {
                "domestic_production_pp_bottle": 1,
                "physical_trade_balance_pp_bottle": 1,
                "to_waste_generated_pp_bottle": 1,
            },
        }
    },
)
def total_pom_pp_bottle():
    return _integ_total_pom_pp_bottle()


_integ_total_pom_pp_bottle = Integ(
    lambda: domestic_production_pp_bottle()
    + physical_trade_balance_pp_bottle()
    - to_waste_generated_pp_bottle(),
    lambda: 16005.4,
    "_integ_total_pom_pp_bottle",
)


@component.add(
    name="Total POM pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pet_bottle": 1},
    other_deps={
        "_integ_total_pom_pet_bottle": {
            "initial": {},
            "step": {
                "domestic_production_pet_bottle": 1,
                "physical_trade_balance_pet_bottle": 1,
                "to_waste_generated_pet_bottle": 1,
            },
        }
    },
)
def total_pom_pet_bottle():
    return _integ_total_pom_pet_bottle()


_integ_total_pom_pet_bottle = Integ(
    lambda: domestic_production_pet_bottle()
    + physical_trade_balance_pet_bottle()
    - to_waste_generated_pet_bottle(),
    lambda: 416140,
    "_integ_total_pom_pet_bottle",
)


@component.add(
    name="policy1 introduction time other bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_other_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time other film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_other_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time other other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_other_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time Other PTT",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_other_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="Total POM ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_ldpe_bottle": 1},
    other_deps={
        "_integ_total_pom_ldpe_bottle": {
            "initial": {},
            "step": {
                "domestic_production_ldpe_bottle": 1,
                "physical_trade_balance_ldpe_bottle": 1,
                "to_waste_generated_ldpe_bottle": 1,
            },
        }
    },
)
def total_pom_ldpe_bottle():
    return _integ_total_pom_ldpe_bottle()


_integ_total_pom_ldpe_bottle = Integ(
    lambda: domestic_production_ldpe_bottle()
    + physical_trade_balance_ldpe_bottle()
    - to_waste_generated_ldpe_bottle(),
    lambda: 0,
    "_integ_total_pom_ldpe_bottle",
)


@component.add(
    name="POM idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_idpe_film": 1},
    other_deps={
        "_integ_pom_idpe_film": {
            "initial": {},
            "step": {
                "domestic_production_ldpe_film": 1,
                "physical_trade_balance_idpe_film": 1,
                "to_waste_generated_idpe_film": 1,
            },
        }
    },
)
def pom_idpe_film():
    return _integ_pom_idpe_film()


_integ_pom_idpe_film = Integ(
    lambda: domestic_production_ldpe_film()
    + physical_trade_balance_idpe_film()
    - to_waste_generated_idpe_film(),
    lambda: 342703,
    "_integ_pom_idpe_film",
)


@component.add(
    name="Total POM idpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_idpe_other": 1},
    other_deps={
        "_integ_total_pom_idpe_other": {
            "initial": {},
            "step": {
                "domestic_production_ldpe_other": 1,
                "physical_trade_balance_ldpe_other": 1,
                "to_waste_generated_idpe_other": 1,
            },
        }
    },
)
def total_pom_idpe_other():
    return _integ_total_pom_idpe_other()


_integ_total_pom_idpe_other = Integ(
    lambda: domestic_production_ldpe_other()
    + physical_trade_balance_ldpe_other()
    - to_waste_generated_idpe_other(),
    lambda: 21654.3,
    "_integ_total_pom_idpe_other",
)


@component.add(
    name="Total POM ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_ldpe_ptt": 1},
    other_deps={
        "_integ_total_pom_ldpe_ptt": {
            "initial": {},
            "step": {
                "domestic_production_ldpe_ptt": 1,
                "physical_trade_balance_ldpe_ptt": 1,
                "to_waste_generated_ldpe_ptt": 1,
            },
        }
    },
)
def total_pom_ldpe_ptt():
    return _integ_total_pom_ldpe_ptt()


_integ_total_pom_ldpe_ptt = Integ(
    lambda: domestic_production_ldpe_ptt()
    + physical_trade_balance_ldpe_ptt()
    - to_waste_generated_ldpe_ptt(),
    lambda: 941.493,
    "_integ_total_pom_ldpe_ptt",
)


@component.add(
    name="Total POM other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_other_bottle": 1},
    other_deps={
        "_integ_total_pom_other_bottle": {
            "initial": {},
            "step": {
                "domestic_production_other_bottle": 1,
                "physical_trade_balance_other_bottle": 1,
                "to_waste_generated_other_bottle": 1,
            },
        }
    },
)
def total_pom_other_bottle():
    return _integ_total_pom_other_bottle()


_integ_total_pom_other_bottle = Integ(
    lambda: domestic_production_other_bottle()
    + physical_trade_balance_other_bottle()
    - to_waste_generated_other_bottle(),
    lambda: 0,
    "_integ_total_pom_other_bottle",
)


@component.add(
    name="Total POM other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_other_other": 1},
    other_deps={
        "_integ_total_pom_other_other": {
            "initial": {},
            "step": {
                "domestic_production_other_other": 1,
                "physical_trade_balance_other_other": 1,
                "to_waste_generated_other_other": 1,
            },
        }
    },
)
def total_pom_other_other():
    return _integ_total_pom_other_other()


_integ_total_pom_other_other = Integ(
    lambda: domestic_production_other_other()
    + physical_trade_balance_other_other()
    - to_waste_generated_other_other(),
    lambda: 0,
    "_integ_total_pom_other_other",
)


@component.add(
    name="Total POM Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_other_ptt": 1},
    other_deps={
        "_integ_total_pom_other_ptt": {
            "initial": {},
            "step": {
                "domestic_production_other_ptt": 1,
                "physical_trade_balance_other_ptt": 1,
                "to_waste_generated_other_ptt": 1,
            },
        }
    },
)
def total_pom_other_ptt():
    return _integ_total_pom_other_ptt()


_integ_total_pom_other_ptt = Integ(
    lambda: domestic_production_other_ptt()
    + physical_trade_balance_other_ptt()
    - to_waste_generated_other_ptt(),
    lambda: 1882.99,
    "_integ_total_pom_other_ptt",
)


@component.add(
    name="policy1 introduction time idpe film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_idpe_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time idpe other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_idpe_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time ldpe ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ldpe_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time ldpe bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_ldpe_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time hdpe ptt",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_hdpe_ptt():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time pet film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pet_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time Pet Other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_pet_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="Total POM hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_hdpe_bottle": 1},
    other_deps={
        "_integ_total_pom_hdpe_bottle": {
            "initial": {},
            "step": {
                "domestic_production_hdpe_bottle": 1,
                "physical_trade_balance_hdpe_bottle": 1,
                "to_waste_generated_hdpe_bottle": 1,
            },
        }
    },
)
def total_pom_hdpe_bottle():
    return _integ_total_pom_hdpe_bottle()


_integ_total_pom_hdpe_bottle = Integ(
    lambda: domestic_production_hdpe_bottle()
    + physical_trade_balance_hdpe_bottle()
    - to_waste_generated_hdpe_bottle(),
    lambda: 456624,
    "_integ_total_pom_hdpe_bottle",
)


@component.add(
    name="POM hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_hdpe_film": 1},
    other_deps={
        "_integ_pom_hdpe_film": {
            "initial": {},
            "step": {
                "domestic_production_hdpe_film": 1,
                "physical_trade_balance_hdpe_film": 1,
                "to_waste_generated_hdpe_film": 1,
            },
        }
    },
)
def pom_hdpe_film():
    return _integ_pom_hdpe_film()


_integ_pom_hdpe_film = Integ(
    lambda: domestic_production_hdpe_film()
    + physical_trade_balance_hdpe_film()
    - to_waste_generated_hdpe_film(),
    lambda: 92266.3,
    "_integ_pom_hdpe_film",
)


@component.add(
    name="Total POM hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_hdpe_other": 1},
    other_deps={
        "_integ_total_pom_hdpe_other": {
            "initial": {},
            "step": {
                "domestic_production_hdpe_other": 1,
                "physical_trade_balance_hdpe_other": 1,
                "to_waste_generated_hdpe_other": 1,
            },
        }
    },
)
def total_pom_hdpe_other():
    return _integ_total_pom_hdpe_other()


_integ_total_pom_hdpe_other = Integ(
    lambda: domestic_production_hdpe_other()
    + physical_trade_balance_hdpe_other()
    - to_waste_generated_hdpe_other(),
    lambda: 58372.6,
    "_integ_total_pom_hdpe_other",
)


@component.add(
    name="Total POM hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_hdpe_ptt": 1},
    other_deps={
        "_integ_total_pom_hdpe_ptt": {
            "initial": {},
            "step": {
                "domestic_production_hdpe_ptt": 1,
                "physical_trade_balance_hdpe_ptt": 1,
                "to_waste_generated_hdpe_ptt": 1,
            },
        }
    },
)
def total_pom_hdpe_ptt():
    return _integ_total_pom_hdpe_ptt()


_integ_total_pom_hdpe_ptt = Integ(
    lambda: domestic_production_hdpe_ptt()
    + physical_trade_balance_hdpe_ptt()
    - to_waste_generated_hdpe_ptt(),
    lambda: 24478.8,
    "_integ_total_pom_hdpe_ptt",
)


@component.add(
    name="policy1 introduction time hdpe bottle",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_hdpe_bottle():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time hdpe film",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_hdpe_film():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="policy1 introduction time hdpe other",
    limits=(2011.0, 2045.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy1_introduction_time": 1},
)
def policy1_introduction_time_hdpe_other():
    return policy1_introduction_time() * 0 + 2042


@component.add(
    name="POM pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_pom_pvc_ptt": 1},
    other_deps={
        "_integ_pom_pvc_ptt": {
            "initial": {},
            "step": {
                "domestic_production_pvc_ptt": 1,
                "physical_trade_balance_pvc_ptt": 1,
                "to_waste_generated_pvc_ptt": 1,
            },
        }
    },
)
def pom_pvc_ptt():
    return _integ_pom_pvc_ptt()


_integ_pom_pvc_ptt = Integ(
    lambda: domestic_production_pvc_ptt()
    + physical_trade_balance_pvc_ptt()
    - to_waste_generated_pvc_ptt(),
    lambda: 12239.4,
    "_integ_pom_pvc_ptt",
)


@component.add(
    name="domestic production new pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"domestic_production_new_data_pvc_ptt": 1},
)
def domestic_production_new_pvc_ptt():
    return domestic_production_new_data_pvc_ptt()


@component.add(
    name="Total POM Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_total_pom_pet_other": 1},
    other_deps={
        "_integ_total_pom_pet_other": {
            "initial": {},
            "step": {
                "domestic_production_pet_other": 1,
                "physical_trade_balance_pet_other": 1,
                "to_waste_generated_pet_other": 1,
            },
        }
    },
)
def total_pom_pet_other():
    return _integ_total_pom_pet_other()


_integ_total_pom_pet_other = Integ(
    lambda: domestic_production_pet_other()
    + physical_trade_balance_pet_other()
    - to_waste_generated_pet_other(),
    lambda: 37659.7,
    "_integ_total_pom_pet_other",
)


@component.add(
    name="mismanagement pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pvc_ptt": 1, "rate_dumped_pvc_ptt": 1},
)
def mismanagement_pvc_ptt():
    return illegal_collection_pvc_ptt() * rate_dumped_pvc_ptt()


@component.add(
    name="Domestic Recycling ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ps_film": 1},
    other_deps={
        "_integ_domestic_recycling_ps_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_ps_film": 1,
                "mechanical_recycling_ps_film": 1,
                "chemical_recycling_ps_film": 1,
            },
        }
    },
)
def domestic_recycling_ps_film():
    return _integ_domestic_recycling_ps_film()


_integ_domestic_recycling_ps_film = Integ(
    lambda: sent_for_recycling_ps_film()
    - mechanical_recycling_ps_film()
    - chemical_recycling_ps_film(),
    lambda: 285,
    "_integ_domestic_recycling_ps_film",
)


@component.add(
    name="Domestic Recycling ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ps_other": 1},
    other_deps={
        "_integ_domestic_recycling_ps_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_ps_other": 1,
                "mechanical_recycling_ps_other": 1,
                "chemical_recycling_ps_other": 1,
            },
        }
    },
)
def domestic_recycling_ps_other():
    return _integ_domestic_recycling_ps_other()


_integ_domestic_recycling_ps_other = Integ(
    lambda: sent_for_recycling_ps_other()
    - mechanical_recycling_ps_other()
    - chemical_recycling_ps_other(),
    lambda: 1364,
    "_integ_domestic_recycling_ps_other",
)


@component.add(
    name="residual rate pp other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pp_other():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate pp ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pp_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="historical data for la collected pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="residual rate pvc ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pvc_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="historical data for la collected pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="Landfill pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pp_ptt": 1},
    other_deps={
        "_integ_landfill_pp_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_pp_ptt": 1},
        }
    },
)
def landfill_pp_ptt():
    return _integ_landfill_pp_ptt()


_integ_landfill_pp_ptt = Integ(
    lambda: sent_to_landfill_pp_ptt(), lambda: 0, "_integ_landfill_pp_ptt"
)


@component.add(
    name="Landfill ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ps_bottle": 1},
    other_deps={
        "_integ_landfill_ps_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_ps_bottle": 1},
        }
    },
)
def landfill_ps_bottle():
    return _integ_landfill_ps_bottle()


_integ_landfill_ps_bottle = Integ(
    lambda: sent_to_landfill_ps_bottle(), lambda: 0, "_integ_landfill_ps_bottle"
)


@component.add(
    name="Overseas treament rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pvc_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pvc_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pvc_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Domestic Residual treatment ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ps_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ps_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ps_bottle": 1,
                "sent_to_incineration_ps_bottle": 1,
                "sent_to_landfill_ps_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_ps_bottle():
    return _integ_domestic_residual_treatment_ps_bottle()


_integ_domestic_residual_treatment_ps_bottle = Integ(
    lambda: sent_for_residual_treatment_ps_bottle()
    - sent_to_incineration_ps_bottle()
    - sent_to_landfill_ps_bottle(),
    lambda: 0,
    "_integ_domestic_residual_treatment_ps_bottle",
)


@component.add(
    name="Domestic Residual treatment ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ps_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ps_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ps_film": 1,
                "sent_to_incineration_ps_film": 1,
                "sent_to_landfill_ps_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_ps_film():
    return _integ_domestic_residual_treatment_ps_film()


_integ_domestic_residual_treatment_ps_film = Integ(
    lambda: sent_for_residual_treatment_ps_film()
    - sent_to_incineration_ps_film()
    - sent_to_landfill_ps_film(),
    lambda: 967,
    "_integ_domestic_residual_treatment_ps_film",
)


@component.add(
    name="Domestic Residual treatment ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ps_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ps_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ps_other": 1,
                "sent_to_incineration_ps_other": 1,
                "sent_to_landfill_ps_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_ps_other():
    return _integ_domestic_residual_treatment_ps_other()


_integ_domestic_residual_treatment_ps_other = Integ(
    lambda: sent_for_residual_treatment_ps_other()
    - sent_to_incineration_ps_other()
    - sent_to_landfill_ps_other(),
    lambda: 4628,
    "_integ_domestic_residual_treatment_ps_other",
)


@component.add(
    name="historical on rate of recycling pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="landfill rate ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Actual la collected pp other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "formulation_for_la_collected_pp_other": 1,
        "historical_data_for_la_collected_pp_other": 1,
    },
)
def actual_la_collected_pp_other():
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: formulation_for_la_collected_pp_other(),
        lambda: historical_data_for_la_collected_pp_other(),
    )


@component.add(
    name="Actual la collected pp ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_pp_ptt": 1,
        "historical_data_for_la_collected_pp_ptt": 1,
    },
)
def actual_la_collected_pp_ptt():
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: formulation_for_la_collected_pp_ptt(),
        lambda: historical_data_for_la_collected_pp_ptt(),
    )


@component.add(
    name="Actual la collected ps bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_ps_bottle": 1,
        "historical_data_for_la_collected_ps_bottle": 1,
    },
)
def actual_la_collected_ps_bottle():
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: formulation_for_la_collected_ps_bottle(),
        lambda: historical_data_for_la_collected_ps_bottle(),
    )


@component.add(
    name="Actual la collected ps film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "formulation_for_la_collected_ps_film": 1,
        "historical_data_for_la_collected_ps_film": 1,
    },
)
def actual_la_collected_ps_film():
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: formulation_for_la_collected_ps_film(),
        lambda: historical_data_for_la_collected_ps_film(),
    )


@component.add(
    name="Actual la collected ps other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "formulation_for_la_collected_ps_other": 1,
        "historical_data_for_la_collected_ps_other": 1,
    },
)
def actual_la_collected_ps_other():
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: formulation_for_la_collected_ps_other(),
        lambda: historical_data_for_la_collected_ps_other(),
    )


@component.add(
    name="Actual la collected ps ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_ps_ptt": 1,
        "historical_data_for_la_collected_ps_ptt": 1,
    },
)
def actual_la_collected_ps_ptt():
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: formulation_for_la_collected_ps_ptt(),
        lambda: historical_data_for_la_collected_ps_ptt(),
    )


@component.add(
    name="Overseas treatment ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ps_other": 1},
    other_deps={
        "_integ_overseas_treatment_ps_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ps_other": 1},
        }
    },
)
def overseas_treatment_ps_other():
    return _integ_overseas_treatment_ps_other()


_integ_overseas_treatment_ps_other = Integ(
    lambda: sent_for_overseas_treatment_ps_other(),
    lambda: 0,
    "_integ_overseas_treatment_ps_other",
)


@component.add(
    name="Actual la collected pvc bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_pvc_bottle": 1,
        "historical_data_for_la_collected_pvc_bottle": 1,
    },
)
def actual_la_collected_pvc_bottle():
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: formulation_for_la_collected_pvc_bottle(),
        lambda: historical_data_for_la_collected_pvc_bottle(),
    )


@component.add(
    name="Actual la collected pvc film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "formulation_for_la_collected_pvc_film": 1,
        "historical_data_for_la_collected_pvc_film": 1,
    },
)
def actual_la_collected_pvc_film():
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: formulation_for_la_collected_pvc_film(),
        lambda: historical_data_for_la_collected_pvc_film(),
    )


@component.add(
    name="Actual la collected PVC Other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "formulation_for_la_collected_pvc_other": 1,
        "historical_data_for_la_collected_pvc_other": 1,
    },
)
def actual_la_collected_pvc_other():
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: formulation_for_la_collected_pvc_other(),
        lambda: historical_data_for_la_collected_pvc_other(),
    )


@component.add(
    name="Actual la collected pvc ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_pvc_ptt": 1,
        "historical_data_for_la_collected_pvc_ptt": 1,
    },
)
def actual_la_collected_pvc_ptt():
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: formulation_for_la_collected_pvc_ptt(),
        lambda: historical_data_for_la_collected_pvc_ptt(),
    )


@component.add(
    name="Overseas treatment PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pvc_other": 1},
    other_deps={
        "_integ_overseas_treatment_pvc_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pvc_other": 1},
        }
    },
)
def overseas_treatment_pvc_other():
    return _integ_overseas_treatment_pvc_other()


_integ_overseas_treatment_pvc_other = Integ(
    lambda: sent_for_overseas_treatment_pvc_other(),
    lambda: 0,
    "_integ_overseas_treatment_pvc_other",
)


@component.add(
    name="Overseas treatment pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pvc_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_pvc_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pvc_ptt": 1},
        }
    },
)
def overseas_treatment_pvc_ptt():
    return _integ_overseas_treatment_pvc_ptt()


_integ_overseas_treatment_pvc_ptt = Integ(
    lambda: sent_for_overseas_treatment_pvc_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_pvc_ptt",
)


@component.add(
    name="Dumped ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ps_bottle": 1},
    other_deps={
        "_integ_dumped_ps_bottle": {
            "initial": {},
            "step": {"mismanagement_ps_bottle": 1},
        }
    },
)
def dumped_ps_bottle():
    return _integ_dumped_ps_bottle()


_integ_dumped_ps_bottle = Integ(
    lambda: mismanagement_ps_bottle(), lambda: 0, "_integ_dumped_ps_bottle"
)


@component.add(
    name="Dumped ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ps_film": 1},
    other_deps={
        "_integ_dumped_ps_film": {"initial": {}, "step": {"mismanagement_ps_film": 1}}
    },
)
def dumped_ps_film():
    return _integ_dumped_ps_film()


_integ_dumped_ps_film = Integ(
    lambda: mismanagement_ps_film(), lambda: 0, "_integ_dumped_ps_film"
)


@component.add(
    name="Dumped ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ps_other": 1},
    other_deps={
        "_integ_dumped_ps_other": {"initial": {}, "step": {"mismanagement_ps_other": 1}}
    },
)
def dumped_ps_other():
    return _integ_dumped_ps_other()


_integ_dumped_ps_other = Integ(
    lambda: mismanagement_ps_other(), lambda: 0, "_integ_dumped_ps_other"
)


@component.add(
    name="rvm historical pp other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pp_other():
    return 0


@component.add(
    name="rvm historical pp ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pp_ptt():
    return 0


@component.add(
    name="rvm historical ps bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ps_bottle():
    return 0


@component.add(
    name="rvm historical ps film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ps_film():
    return 0


@component.add(
    name="historical on recycling pp other", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pp_other():
    return 0.103


@component.add(
    name="historical on recycling pp ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pp_ptt():
    return 0.103


@component.add(
    name="historical on recycling ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_ps_bottle():
    return 0.103


@component.add(
    name="historical on recycling ps film", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_ps_film():
    return 0.103


@component.add(
    name="historical on recycling ps other", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_ps_other():
    return 0.103


@component.add(
    name="historical on recycling ps ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_ps_ptt():
    return 0.103


@component.add(
    name="rvm historical pvc ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pvc_ptt():
    return 0


@component.add(
    name="historical on recycling pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pvc_bottle():
    return 0.103


@component.add(
    name="historical on recycling pvc film", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pvc_film():
    return 0.103


@component.add(
    name="historical on recycling PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pvc_other():
    return 0.103


@component.add(
    name="historical on recycling pvc ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pvc_ptt():
    return 0.103


@component.add(
    name="Littered pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pp_ptt": 1},
    other_deps={
        "_integ_littered_pp_ptt": {"initial": {}, "step": {"littering_pp_ptt": 1}}
    },
)
def littered_pp_ptt():
    return _integ_littered_pp_ptt()


_integ_littered_pp_ptt = Integ(
    lambda: littering_pp_ptt(), lambda: 0, "_integ_littered_pp_ptt"
)


@component.add(
    name="Littered ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ps_bottle": 1},
    other_deps={
        "_integ_littered_ps_bottle": {"initial": {}, "step": {"littering_ps_bottle": 1}}
    },
)
def littered_ps_bottle():
    return _integ_littered_ps_bottle()


_integ_littered_ps_bottle = Integ(
    lambda: littering_ps_bottle(), lambda: 0, "_integ_littered_ps_bottle"
)


@component.add(
    name="Littered ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ps_film": 1},
    other_deps={
        "_integ_littered_ps_film": {"initial": {}, "step": {"littering_ps_film": 1}}
    },
)
def littered_ps_film():
    return _integ_littered_ps_film()


_integ_littered_ps_film = Integ(
    lambda: littering_ps_film(), lambda: 0, "_integ_littered_ps_film"
)


@component.add(
    name="Actual rvm collected pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "rvm_collected_formulation_pp_other": 1,
        "rvm_historical_pp_other": 1,
    },
)
def actual_rvm_collected_pp_other():
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: rvm_collected_formulation_pp_other(),
        lambda: rvm_historical_pp_other(),
    )


@component.add(
    name="Actual rvm collected pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_pp_ptt": 1,
        "rvm_historical_pp_ptt": 1,
    },
)
def actual_rvm_collected_pp_ptt():
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: rvm_collected_formulation_pp_ptt(),
        lambda: rvm_historical_pp_ptt(),
    )


@component.add(
    name="Actual rvm collected ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_ps_bottle": 1,
        "rvm_historical_ps_bottle": 1,
    },
)
def actual_rvm_collected_ps_bottle():
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: rvm_collected_formulation_ps_bottle(),
        lambda: rvm_historical_ps_bottle(),
    )


@component.add(
    name="Actual rvm collected ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "rvm_collected_formulation_ps_film": 1,
        "rvm_historical_ps_film": 1,
    },
)
def actual_rvm_collected_ps_film():
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: rvm_collected_formulation_ps_film(),
        lambda: rvm_historical_ps_film(),
    )


@component.add(
    name="Actual rvm collected ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "rvm_collected_formulation_ps_other": 1,
        "rvm_historical_ps_other": 1,
    },
)
def actual_rvm_collected_ps_other():
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: rvm_collected_formulation_ps_other(),
        lambda: rvm_historical_ps_other(),
    )


@component.add(
    name="Actual rvm collected ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_ps_ptt": 1,
        "rvm_historical_ps_ptt": 1,
    },
)
def actual_rvm_collected_ps_ptt():
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: rvm_collected_formulation_ps_ptt(),
        lambda: rvm_historical_ps_ptt(),
    )


@component.add(
    name="Actual rvm collected pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_pvc_bottle": 1,
        "rvm_historical_pvc_bottle": 1,
    },
)
def actual_rvm_collected_pvc_bottle():
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: rvm_collected_formulation_pvc_bottle(),
        lambda: rvm_historical_pvc_bottle(),
    )


@component.add(
    name="Actual rvm collected pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "rvm_collected_formulation_pvc_film": 1,
        "rvm_historical_pvc_film": 1,
    },
)
def actual_rvm_collected_pvc_film():
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: rvm_collected_formulation_pvc_film(),
        lambda: rvm_historical_pvc_film(),
    )


@component.add(
    name="Actual rvm collected PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "rvm_collected_formulation_pvc_other": 1,
        "rvm_historical_pvc_other": 1,
    },
)
def actual_rvm_collected_pvc_other():
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: rvm_collected_formulation_pvc_other(),
        lambda: rvm_historical_pvc_other(),
    )


@component.add(
    name="Actual rvm collected pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_pvc_ptt": 1,
        "rvm_historical_pvc_ptt": 1,
    },
)
def actual_rvm_collected_pvc_ptt():
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: rvm_collected_formulation_pvc_ptt(),
        lambda: rvm_historical_pvc_ptt(),
    )


@component.add(
    name="Formal domestic treatment ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ps_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ps_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ps_bottle": 1,
                "sent_for_sorting_ps_bottle": 1,
                "sent_for_residual_treatment_ps_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_ps_bottle():
    return _integ_formal_domestic_treatment_ps_bottle()


_integ_formal_domestic_treatment_ps_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ps_bottle()
    - sent_for_sorting_ps_bottle()
    - sent_for_residual_treatment_ps_bottle(),
    lambda: 0,
    "_integ_formal_domestic_treatment_ps_bottle",
)


@component.add(
    name="Formal domestic treatment ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ps_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ps_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ps_film": 1,
                "sent_for_sorting_ps_film": 1,
                "sent_for_residual_treatment_ps_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_ps_film():
    return _integ_formal_domestic_treatment_ps_film()


_integ_formal_domestic_treatment_ps_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ps_film()
    - sent_for_sorting_ps_film()
    - sent_for_residual_treatment_ps_film(),
    lambda: 1785,
    "_integ_formal_domestic_treatment_ps_film",
)


@component.add(
    name="Formal domestic treatment ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ps_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ps_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ps_other": 1,
                "sent_for_sorting_ps_other": 1,
                "sent_for_residual_treatment_ps_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_ps_other():
    return _integ_formal_domestic_treatment_ps_other()


_integ_formal_domestic_treatment_ps_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ps_other()
    - sent_for_sorting_ps_other()
    - sent_for_residual_treatment_ps_other(),
    lambda: 8540,
    "_integ_formal_domestic_treatment_ps_other",
)


@component.add(
    name="sent for formal domestic pp other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pp_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic pp ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pp_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic ps bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ps_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic ps film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ps_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="historical overseas rate pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="sent for formal domestic pvc ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pvc_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="historical overseas rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="littering pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pp_ptt": 1, "waste_generated_pp_ptt": 1},
)
def littering_pp_ptt():
    return littering_rate_pp_ptt() * waste_generated_pp_ptt()


@component.add(
    name="Actual wmc collected pp other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "wmc_collected_formulation_pp_other": 1,
        "wmc_historical_pp_other": 1,
    },
)
def actual_wmc_collected_pp_other():
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: wmc_collected_formulation_pp_other(),
        lambda: wmc_historical_pp_other(),
    )


@component.add(
    name="Actual wmc collected pp ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_pp_ptt": 1,
        "wmc_historical_pp_ptt": 1,
    },
)
def actual_wmc_collected_pp_ptt():
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: wmc_collected_formulation_pp_ptt(),
        lambda: wmc_historical_pp_ptt(),
    )


@component.add(
    name="Actual wmc collected ps bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_ps_bottle": 1,
        "wmc_historical_ps_bottle": 1,
    },
)
def actual_wmc_collected_ps_bottle():
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: wmc_collected_formulation_ps_bottle(),
        lambda: wmc_historical_ps_bottle(),
    )


@component.add(
    name="Actual wmc collected ps film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "wmc_collected_formulation_ps_film": 1,
        "wmc_historical_ps_film": 1,
    },
)
def actual_wmc_collected_ps_film():
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: wmc_collected_formulation_ps_film(),
        lambda: wmc_historical_ps_film(),
    )


@component.add(
    name="Actual wmc collected ps other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "wmc_collected_formulation_ps_other": 1,
        "wmc_historical_ps_other": 1,
    },
)
def actual_wmc_collected_ps_other():
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: wmc_collected_formulation_ps_other(),
        lambda: wmc_historical_ps_other(),
    )


@component.add(
    name="Actual wmc collected ps ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_ps_ptt": 1,
        "wmc_historical_ps_ptt": 1,
    },
)
def actual_wmc_collected_ps_ptt():
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: wmc_collected_formulation_ps_ptt(),
        lambda: wmc_historical_ps_ptt(),
    )


@component.add(
    name="Actual wmc collected pvc bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_pvc_bottle": 1,
        "wmc_historical_pvc_bottle": 1,
    },
)
def actual_wmc_collected_pvc_bottle():
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: wmc_collected_formulation_pvc_bottle(),
        lambda: wmc_historical_pvc_bottle(),
    )


@component.add(
    name="Actual wmc collected pvc film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "wmc_collected_formulation_pvc_film": 1,
        "wmc_historical_pvc_film": 1,
    },
)
def actual_wmc_collected_pvc_film():
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: wmc_collected_formulation_pvc_film(),
        lambda: wmc_historical_pvc_film(),
    )


@component.add(
    name="Actual wmc collected PVC Other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "wmc_collected_formulation_pvc_other": 1,
        "wmc_historical_pvc_other": 1,
    },
)
def actual_wmc_collected_pvc_other():
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: wmc_collected_formulation_pvc_other(),
        lambda: wmc_historical_pvc_other(),
    )


@component.add(
    name="Actual wmc collected pvc ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_pvc_ptt": 1,
        "wmc_historical_pvc_ptt": 1,
    },
)
def actual_wmc_collected_pvc_ptt():
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: wmc_collected_formulation_pvc_ptt(),
        lambda: wmc_historical_pvc_ptt(),
    )


@component.add(
    name="Formal Waste Collection ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ps_other": 1,
        "actual_rvm_collected_ps_other": 1,
        "actual_wmc_collected_ps_other": 1,
        "waste_generated_ps_other": 1,
    },
)
def formal_waste_collection_ps_other():
    return (
        actual_la_collected_ps_other()
        + actual_rvm_collected_ps_other()
        + actual_wmc_collected_ps_other()
    ) * waste_generated_ps_other()


@component.add(
    name="Sent for overseas treatment pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pp_other": 1, "sorting_pp_other": 1},
)
def sent_for_overseas_treatment_pp_other():
    return overseas_treament_rate_pp_other() * sorting_pp_other()


@component.add(
    name="Sent for overseas treatment pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pp_ptt": 1, "sorting_pp_ptt": 1},
)
def sent_for_overseas_treatment_pp_ptt():
    return overseas_treament_rate_pp_ptt() * sorting_pp_ptt()


@component.add(
    name="Sent for overseas treatment ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ps_bottle": 1, "sorting_ps_bottle": 1},
)
def sent_for_overseas_treatment_ps_bottle():
    return overseas_treament_rate_ps_bottle() * sorting_ps_bottle()


@component.add(
    name="historical rate for domestic pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Sent for overseas treatment pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pvc_ptt": 1, "sorting_pvc_ptt": 1},
)
def sent_for_overseas_treatment_pvc_ptt():
    return overseas_treament_rate_pvc_ptt() * sorting_pvc_ptt()


@component.add(
    name="historical rate for domestic pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="littering rate formulation ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ps_bottle():
    return 0.01


@component.add(
    name="littering rate formulation ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ps_film():
    return 0.01


@component.add(
    name="littering rate formulation ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ps_other():
    return 0.01


@component.add(
    name="Chemical recycling pp other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pp_other": 1,
        "domestic_recycling_pp_other": 1,
    },
)
def chemical_recycling_pp_other():
    return rate_of_chemical_recycling_pp_other() * domestic_recycling_pp_other()


@component.add(
    name="Chemical recycling pp ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_chemical_recycling_pp_ptt": 1, "domestic_recycling_pp_ptt": 1},
)
def chemical_recycling_pp_ptt():
    return rate_of_chemical_recycling_pp_ptt() * domestic_recycling_pp_ptt()


@component.add(
    name="Chemical recycling ps bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ps_bottle": 1,
        "domestic_recycling_ps_bottle": 1,
    },
)
def chemical_recycling_ps_bottle():
    return rate_of_chemical_recycling_ps_bottle() * domestic_recycling_ps_bottle()


@component.add(
    name="Chemical recycling ps film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ps_film": 1,
        "domestic_recycling_ps_film": 1,
    },
)
def chemical_recycling_ps_film():
    return rate_of_chemical_recycling_ps_film() * domestic_recycling_ps_film()


@component.add(
    name="Chemical recycling ps other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ps_other": 1,
        "domestic_recycling_ps_other": 1,
    },
)
def chemical_recycling_ps_other():
    return rate_of_chemical_recycling_ps_other() * domestic_recycling_ps_other()


@component.add(
    name="Chemical recycling ps ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_chemical_recycling_ps_ptt": 1, "domestic_recycling_ps_ptt": 1},
)
def chemical_recycling_ps_ptt():
    return rate_of_chemical_recycling_ps_ptt() * domestic_recycling_ps_ptt()


@component.add(
    name="Chemical recycling pvc bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pvc_bottle": 1,
        "domestic_recycling_pvc_bottle": 1,
    },
)
def chemical_recycling_pvc_bottle():
    return rate_of_chemical_recycling_pvc_bottle() * domestic_recycling_pvc_bottle()


@component.add(
    name="Chemical recycling pvc film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pvc_film": 1,
        "domestic_recycling_pvc_film": 1,
    },
)
def chemical_recycling_pvc_film():
    return rate_of_chemical_recycling_pvc_film() * domestic_recycling_pvc_film()


@component.add(
    name="Chemical recycling PVC Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pvc_other": 1,
        "domestic_recycling_pvc_other": 1,
    },
)
def chemical_recycling_pvc_other():
    return rate_of_chemical_recycling_pvc_other() * domestic_recycling_pvc_other()


@component.add(
    name="Chemical recycling pvc ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pvc_ptt": 1,
        "domestic_recycling_pvc_ptt": 1,
    },
)
def chemical_recycling_pvc_ptt():
    return rate_of_chemical_recycling_pvc_ptt() * domestic_recycling_pvc_ptt()


@component.add(
    name="formulation for domestic rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_bottle": 1,
        "historical_rate_for_domestic_ps_bottle": 1,
    },
)
def formulation_for_domestic_rate_ps_bottle():
    return if_then_else(
        time() > policy1_introduction_time_ps_bottle(),
        lambda: historical_rate_for_domestic_ps_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_film": 1,
        "historical_rate_for_domestic_ps_film": 1,
    },
)
def formulation_for_domestic_rate_ps_film():
    return if_then_else(
        time() > policy1_introduction_time_ps_film(),
        lambda: historical_rate_for_domestic_ps_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_other": 1,
        "historical_rate_for_domestic_ps_other": 1,
    },
)
def formulation_for_domestic_rate_ps_other():
    return if_then_else(
        time() > policy1_introduction_time_ps_other(),
        lambda: historical_rate_for_domestic_ps_other(),
        lambda: 0,
    )


@component.add(
    name="Sent for recycling pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pp_other": 1, "rate_sent_for_domestic_recycling_pp_other": 1},
)
def sent_for_recycling_pp_other():
    return sorting_pp_other() * rate_sent_for_domestic_recycling_pp_other()


@component.add(
    name="Sent for recycling pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pp_ptt": 1, "rate_sent_for_domestic_recycling_pp_ptt": 1},
)
def sent_for_recycling_pp_ptt():
    return sorting_pp_ptt() * rate_sent_for_domestic_recycling_pp_ptt()


@component.add(
    name="Sent for recycling ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_ps_bottle": 1,
        "rate_sent_for_domestic_recycling_ps_bottle": 1,
    },
)
def sent_for_recycling_ps_bottle():
    return sorting_ps_bottle() * rate_sent_for_domestic_recycling_ps_bottle()


@component.add(
    name="Sent for recycling ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_ps_film": 1, "rate_sent_for_domestic_recycling_ps_film": 1},
)
def sent_for_recycling_ps_film():
    return sorting_ps_film() * rate_sent_for_domestic_recycling_ps_film()


@component.add(
    name="Sent for recycling ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_ps_other": 1, "rate_sent_for_domestic_recycling_ps_other": 1},
)
def sent_for_recycling_ps_other():
    return sorting_ps_other() * rate_sent_for_domestic_recycling_ps_other()


@component.add(
    name="Sent for recycling ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_ps_ptt": 1, "rate_sent_for_domestic_recycling_ps_ptt": 1},
)
def sent_for_recycling_ps_ptt():
    return sorting_ps_ptt() * rate_sent_for_domestic_recycling_ps_ptt()


@component.add(
    name="illegal collection data pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pp_other": 1,
        "waste_generated_pp_other": 1,
    },
)
def illegal_collection_data_pp_other():
    return rate_to_illegal_collection_pp_other() * waste_generated_pp_other()


@component.add(
    name="illegal collection data pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_to_illegal_collection_pp_ptt": 1, "waste_generated_pp_ptt": 1},
)
def illegal_collection_data_pp_ptt():
    return rate_to_illegal_collection_pp_ptt() * waste_generated_pp_ptt()


@component.add(
    name="illegal collection data ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ps_other": 1,
        "waste_generated_ps_other": 1,
    },
)
def illegal_collection_data_ps_other():
    return rate_to_illegal_collection_ps_other() * waste_generated_ps_other()


@component.add(
    name="Waste collected pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pp_other": 1},
    other_deps={
        "_integ_waste_collected_pp_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_pp_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pp_other": 1,
            },
        }
    },
)
def waste_collected_pp_other():
    return _integ_waste_collected_pp_other()


_integ_waste_collected_pp_other = Integ(
    lambda: formal_waste_collection_pp_other()
    - waste_collected_sent_to_formal_domestic_treatment_pp_other(),
    lambda: 70956,
    "_integ_waste_collected_pp_other",
)


@component.add(
    name="illegal collection data PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pvc_other": 1,
        "waste_generated_pvc_other": 1,
    },
)
def illegal_collection_data_pvc_other():
    return rate_to_illegal_collection_pvc_other() * waste_generated_pvc_other()


@component.add(
    name="littering rate historical data pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pp_other():
    return 0.04


@component.add(
    name="littering rate historical data pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pp_ptt():
    return 0.04


@component.add(
    name="littering rate historical data ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ps_bottle():
    return 0.04


@component.add(
    name="littering rate historical data ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ps_film():
    return 0.04


@component.add(
    name="rate to illegal collection pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pp_ptt():
    return 0.006


@component.add(
    name="Illegal collection ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ps_film": 1},
    other_deps={
        "_integ_illegal_collection_ps_film": {
            "initial": {},
            "step": {"illegal_collection_data_ps_film": 1, "mismanagement_ps_film": 1},
        }
    },
)
def illegal_collection_ps_film():
    return _integ_illegal_collection_ps_film()


_integ_illegal_collection_ps_film = Integ(
    lambda: illegal_collection_data_ps_film() - mismanagement_ps_film(),
    lambda: 0,
    "_integ_illegal_collection_ps_film",
)


@component.add(
    name="Illegal collection ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ps_other": 1},
    other_deps={
        "_integ_illegal_collection_ps_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_ps_other": 1,
                "mismanagement_ps_other": 1,
            },
        }
    },
)
def illegal_collection_ps_other():
    return _integ_illegal_collection_ps_other()


_integ_illegal_collection_ps_other = Integ(
    lambda: illegal_collection_data_ps_other() - mismanagement_ps_other(),
    lambda: 0,
    "_integ_illegal_collection_ps_other",
)


@component.add(
    name="Illegal collection ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ps_ptt": 1},
    other_deps={
        "_integ_illegal_collection_ps_ptt": {
            "initial": {},
            "step": {"illegal_collection_data_ps_ptt": 1, "mismanagement_ps_ptt": 1},
        }
    },
)
def illegal_collection_ps_ptt():
    return _integ_illegal_collection_ps_ptt()


_integ_illegal_collection_ps_ptt = Integ(
    lambda: illegal_collection_data_ps_ptt() - mismanagement_ps_ptt(),
    lambda: 321,
    "_integ_illegal_collection_ps_ptt",
)


@component.add(
    name="Illegal collection pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pvc_bottle": 1},
    other_deps={
        "_integ_illegal_collection_pvc_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_pvc_bottle": 1,
                "mismanagement_pvc_bottle": 1,
            },
        }
    },
)
def illegal_collection_pvc_bottle():
    return _integ_illegal_collection_pvc_bottle()


_integ_illegal_collection_pvc_bottle = Integ(
    lambda: illegal_collection_data_pvc_bottle() - mismanagement_pvc_bottle(),
    lambda: 0,
    "_integ_illegal_collection_pvc_bottle",
)


@component.add(
    name="Illegal collection pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pvc_film": 1},
    other_deps={
        "_integ_illegal_collection_pvc_film": {
            "initial": {},
            "step": {
                "illegal_collection_data_pvc_film": 1,
                "mismanagement_pvc_film": 1,
            },
        }
    },
)
def illegal_collection_pvc_film():
    return _integ_illegal_collection_pvc_film()


_integ_illegal_collection_pvc_film = Integ(
    lambda: illegal_collection_data_pvc_film() - mismanagement_pvc_film(),
    lambda: 0,
    "_integ_illegal_collection_pvc_film",
)


@component.add(
    name="Illegal collection PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pvc_other": 1},
    other_deps={
        "_integ_illegal_collection_pvc_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_pvc_other": 1,
                "mismanagement_pvc_other": 1,
            },
        }
    },
)
def illegal_collection_pvc_other():
    return _integ_illegal_collection_pvc_other()


_integ_illegal_collection_pvc_other = Integ(
    lambda: illegal_collection_data_pvc_other() - mismanagement_pvc_other(),
    lambda: 0,
    "_integ_illegal_collection_pvc_other",
)


@component.add(
    name="Illegal collection pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pvc_ptt": 1},
    other_deps={
        "_integ_illegal_collection_pvc_ptt": {
            "initial": {},
            "step": {"illegal_collection_data_pvc_ptt": 1, "mismanagement_pvc_ptt": 1},
        }
    },
)
def illegal_collection_pvc_ptt():
    return _integ_illegal_collection_pvc_ptt()


_integ_illegal_collection_pvc_ptt = Integ(
    lambda: illegal_collection_data_pvc_ptt() - mismanagement_pvc_ptt(),
    lambda: 489,
    "_integ_illegal_collection_pvc_ptt",
)


@component.add(
    name="Waste collected sent to formal domestic treatment pvc film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pvc_film": 1, "waste_collected_pvc_film": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pvc_film():
    return sent_for_formal_domestic_pvc_film() * waste_collected_pvc_film()


@component.add(
    name="Dumped pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pp_other": 1},
    other_deps={
        "_integ_dumped_pp_other": {"initial": {}, "step": {"mismanagement_pp_other": 1}}
    },
)
def dumped_pp_other():
    return _integ_dumped_pp_other()


_integ_dumped_pp_other = Integ(
    lambda: mismanagement_pp_other(), lambda: 0, "_integ_dumped_pp_other"
)


@component.add(
    name="rate dumped pp other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pp_other():
    return 0.006


@component.add(
    name="rate dumped pp ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pp_ptt():
    return 0.006


@component.add(
    name="rate dumped ps bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ps_bottle():
    return 0.006


@component.add(
    name="rate dumped ps film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ps_film():
    return 0.006


@component.add(
    name="rate dumped pvc ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pvc_ptt():
    return 0.006


@component.add(
    name="sent for sorting rate pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pp_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pp_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="formulation for recycling rate PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pvc_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Incineration pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pp_other": 1},
    other_deps={
        "_integ_incineration_pp_other": {
            "initial": {},
            "step": {"sent_to_incineration_pp_other": 1},
        }
    },
)
def incineration_pp_other():
    return _integ_incineration_pp_other()


_integ_incineration_pp_other = Integ(
    lambda: sent_to_incineration_pp_other(), lambda: 0, "_integ_incineration_pp_other"
)


@component.add(
    name="Incineration pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pp_ptt": 1},
    other_deps={
        "_integ_incineration_pp_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_pp_ptt": 1},
        }
    },
)
def incineration_pp_ptt():
    return _integ_incineration_pp_ptt()


_integ_incineration_pp_ptt = Integ(
    lambda: sent_to_incineration_pp_ptt(), lambda: 0, "_integ_incineration_pp_ptt"
)


@component.add(
    name="Incineration ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ps_bottle": 1},
    other_deps={
        "_integ_incineration_ps_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_ps_bottle": 1},
        }
    },
)
def incineration_ps_bottle():
    return _integ_incineration_ps_bottle()


_integ_incineration_ps_bottle = Integ(
    lambda: sent_to_incineration_ps_bottle(), lambda: 0, "_integ_incineration_ps_bottle"
)


@component.add(
    name="Incineration ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ps_film": 1},
    other_deps={
        "_integ_incineration_ps_film": {
            "initial": {},
            "step": {"sent_to_incineration_ps_film": 1},
        }
    },
)
def incineration_ps_film():
    return _integ_incineration_ps_film()


_integ_incineration_ps_film = Integ(
    lambda: sent_to_incineration_ps_film(), lambda: 0, "_integ_incineration_ps_film"
)


@component.add(
    name="Incineration ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ps_other": 1},
    other_deps={
        "_integ_incineration_ps_other": {
            "initial": {},
            "step": {"sent_to_incineration_ps_other": 1},
        }
    },
)
def incineration_ps_other():
    return _integ_incineration_ps_other()


_integ_incineration_ps_other = Integ(
    lambda: sent_to_incineration_ps_other(), lambda: 0, "_integ_incineration_ps_other"
)


@component.add(
    name="Incineration ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ps_ptt": 1},
    other_deps={
        "_integ_incineration_ps_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_ps_ptt": 1},
        }
    },
)
def incineration_ps_ptt():
    return _integ_incineration_ps_ptt()


_integ_incineration_ps_ptt = Integ(
    lambda: sent_to_incineration_ps_ptt(), lambda: 0, "_integ_incineration_ps_ptt"
)


@component.add(
    name="Incineration pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pvc_bottle": 1},
    other_deps={
        "_integ_incineration_pvc_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_pvc_bottle": 1},
        }
    },
)
def incineration_pvc_bottle():
    return _integ_incineration_pvc_bottle()


_integ_incineration_pvc_bottle = Integ(
    lambda: sent_to_incineration_pvc_bottle(),
    lambda: 0,
    "_integ_incineration_pvc_bottle",
)


@component.add(
    name="Incineration pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pvc_film": 1},
    other_deps={
        "_integ_incineration_pvc_film": {
            "initial": {},
            "step": {"sent_to_incineration_pvc_film": 1},
        }
    },
)
def incineration_pvc_film():
    return _integ_incineration_pvc_film()


_integ_incineration_pvc_film = Integ(
    lambda: sent_to_incineration_pvc_film(), lambda: 0, "_integ_incineration_pvc_film"
)


@component.add(
    name="Incineration PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pvc_other": 1},
    other_deps={
        "_integ_incineration_pvc_other": {
            "initial": {},
            "step": {"sent_to_incineration_pvc_other": 1},
        }
    },
)
def incineration_pvc_other():
    return _integ_incineration_pvc_other()


_integ_incineration_pvc_other = Integ(
    lambda: sent_to_incineration_pvc_other(), lambda: 0, "_integ_incineration_pvc_other"
)


@component.add(
    name="Incineration pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pvc_ptt": 1},
    other_deps={
        "_integ_incineration_pvc_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_pvc_ptt": 1},
        }
    },
)
def incineration_pvc_ptt():
    return _integ_incineration_pvc_ptt()


_integ_incineration_pvc_ptt = Integ(
    lambda: sent_to_incineration_pvc_ptt(), lambda: 0, "_integ_incineration_pvc_ptt"
)


@component.add(
    name="Mechanical recycling ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ps_film": 1,
        "domestic_recycling_ps_film": 1,
    },
)
def mechanical_recycling_ps_film():
    return rate_of_mechanical_recycling_ps_film() * domestic_recycling_ps_film()


@component.add(
    name="Rate of chemical recycling pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pp_other():
    return 0


@component.add(
    name="Rate of chemical recycling pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pp_ptt():
    return 0


@component.add(
    name="Domestic production recycled pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pp_other": 1},
)
def domestic_production_recycled_pp_other():
    return mechanical_recycling_pp_other()


@component.add(
    name="Domestic production recycled pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pp_ptt": 1},
)
def domestic_production_recycled_pp_ptt():
    return mechanical_recycling_pp_ptt()


@component.add(
    name="Domestic production recycled ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ps_bottle": 1},
)
def domestic_production_recycled_ps_bottle():
    return mechanical_recycling_ps_bottle()


@component.add(
    name="Domestic production recycled ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ps_film": 1},
)
def domestic_production_recycled_ps_film():
    return mechanical_recycling_ps_film()


@component.add(
    name="Domestic production recycled ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ps_other": 1},
)
def domestic_production_recycled_ps_other():
    return mechanical_recycling_ps_other()


@component.add(
    name="Domestic production recycled ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ps_ptt": 1},
)
def domestic_production_recycled_ps_ptt():
    return mechanical_recycling_ps_ptt()


@component.add(
    name="Rate of chemical recycling pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pvc_film():
    return 0


@component.add(
    name="Domestic production recycled pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pvc_bottle": 1},
)
def domestic_production_recycled_pvc_bottle():
    return mechanical_recycling_pvc_bottle()


@component.add(
    name="Domestic production recycled pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pvc_film": 1},
)
def domestic_production_recycled_pvc_film():
    return mechanical_recycling_pvc_film()


@component.add(
    name="Domestic production recycled PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pvc_other": 1},
)
def domestic_production_recycled_pvc_other():
    return mechanical_recycling_pvc_other()


@component.add(
    name="Domestic production recycled pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pvc_ptt": 1},
)
def domestic_production_recycled_pvc_ptt():
    return mechanical_recycling_pvc_ptt()


@component.add(
    name="formulation of overseas rate pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_other": 1,
        "historical_overseas_rate_pp_other": 1,
    },
)
def formulation_of_overseas_rate_pp_other():
    return if_then_else(
        time() > policy1_introduction_time_pp_other(),
        lambda: historical_overseas_rate_pp_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_ptt": 1,
        "historical_overseas_rate_pp_ptt": 1,
    },
)
def formulation_of_overseas_rate_pp_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pp_ptt(),
        lambda: historical_overseas_rate_pp_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_bottle": 1,
        "historical_overseas_rate_ps_bottle": 1,
    },
)
def formulation_of_overseas_rate_ps_bottle():
    return if_then_else(
        time() > policy1_introduction_time_ps_bottle(),
        lambda: historical_overseas_rate_ps_bottle(),
        lambda: 0,
    )


@component.add(
    name="Sent to incineration pp other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pp_other": 1,
        "domestic_residual_treatment_pp_other": 1,
    },
)
def sent_to_incineration_pp_other():
    return incineration_rate_pp_other() * domestic_residual_treatment_pp_other()


@component.add(
    name="Sent to incineration pp ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"incineration_rate_pp_ptt": 1, "domestic_residual_treatment_pp_ptt": 1},
)
def sent_to_incineration_pp_ptt():
    return incineration_rate_pp_ptt() * domestic_residual_treatment_pp_ptt()


@component.add(
    name="Sent to incineration ps bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ps_bottle": 1,
        "domestic_residual_treatment_ps_bottle": 1,
    },
)
def sent_to_incineration_ps_bottle():
    return incineration_rate_ps_bottle() * domestic_residual_treatment_ps_bottle()


@component.add(
    name="Sent to incineration ps film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ps_film": 1,
        "domestic_residual_treatment_ps_film": 1,
    },
)
def sent_to_incineration_ps_film():
    return incineration_rate_ps_film() * domestic_residual_treatment_ps_film()


@component.add(
    name="Incineration rate pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_other": 1},
)
def incineration_rate_pp_other():
    return 1 - landfill_rate_pp_other()


@component.add(
    name="Incineration rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_ptt": 1},
)
def incineration_rate_pp_ptt():
    return 1 - landfill_rate_pp_ptt()


@component.add(
    name="Incineration rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_bottle": 1},
)
def incineration_rate_ps_bottle():
    return 1 - landfill_rate_ps_bottle()


@component.add(
    name="Incineration rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_film": 1},
)
def incineration_rate_ps_film():
    return 1 - landfill_rate_ps_film()


@component.add(
    name="Incineration rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_other": 1},
)
def incineration_rate_ps_other():
    return 1 - landfill_rate_ps_other()


@component.add(
    name="Incineration rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_ptt": 1},
)
def incineration_rate_ps_ptt():
    return 1 - landfill_rate_ps_ptt()


@component.add(
    name="Sent to incineration pvc ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pvc_ptt": 1,
        "domestic_residual_treatment_pvc_ptt": 1,
    },
)
def sent_to_incineration_pvc_ptt():
    return incineration_rate_pvc_ptt() * domestic_residual_treatment_pvc_ptt()


@component.add(
    name="Incineration rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_bottle": 1},
)
def incineration_rate_pvc_bottle():
    return 1 - landfill_rate_pvc_bottle()


@component.add(
    name="Incineration rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_film": 1},
)
def incineration_rate_pvc_film():
    return 1 - landfill_rate_pvc_film()


@component.add(
    name="Incineration rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_other": 1},
)
def incineration_rate_pvc_other():
    return 1 - landfill_rate_pvc_other()


@component.add(
    name="Incineration rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_ptt": 1},
)
def incineration_rate_pvc_ptt():
    return 1 - landfill_rate_pvc_ptt()


@component.add(
    name="mismanagement pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pp_ptt": 1, "rate_dumped_pp_ptt": 1},
)
def mismanagement_pp_ptt():
    return illegal_collection_pp_ptt() * rate_dumped_pp_ptt()


@component.add(
    name="mismanagement ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ps_bottle": 1, "rate_dumped_ps_bottle": 1},
)
def mismanagement_ps_bottle():
    return illegal_collection_ps_bottle() * rate_dumped_ps_bottle()


@component.add(
    name="mismanagement ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ps_film": 1, "rate_dumped_ps_film": 1},
)
def mismanagement_ps_film():
    return illegal_collection_ps_film() * rate_dumped_ps_film()


@component.add(
    name="rate of mechanical recycling pp other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pp_other():
    return 1


@component.add(
    name="rate of mechanical recycling pp ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pp_ptt():
    return 1


@component.add(
    name="rate of mechanical recycling ps bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ps_bottle():
    return 1


@component.add(
    name="rate of mechanical recycling ps film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ps_film():
    return 1


@component.add(
    name="Domestic Recycling pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pp_other": 1},
    other_deps={
        "_integ_domestic_recycling_pp_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_pp_other": 1,
                "mechanical_recycling_pp_other": 1,
                "chemical_recycling_pp_other": 1,
            },
        }
    },
)
def domestic_recycling_pp_other():
    return _integ_domestic_recycling_pp_other()


_integ_domestic_recycling_pp_other = Integ(
    lambda: sent_for_recycling_pp_other()
    - mechanical_recycling_pp_other()
    - chemical_recycling_pp_other(),
    lambda: 11290,
    "_integ_domestic_recycling_pp_other",
)


@component.add(
    name="Domestic Recycling pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pp_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_pp_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_pp_ptt": 1,
                "mechanical_recycling_pp_ptt": 1,
                "chemical_recycling_pp_ptt": 1,
            },
        }
    },
)
def domestic_recycling_pp_ptt():
    return _integ_domestic_recycling_pp_ptt()


_integ_domestic_recycling_pp_ptt = Integ(
    lambda: sent_for_recycling_pp_ptt()
    - mechanical_recycling_pp_ptt()
    - chemical_recycling_pp_ptt(),
    lambda: 23320,
    "_integ_domestic_recycling_pp_ptt",
)


@component.add(
    name="Domestic Recycling ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ps_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_ps_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_ps_bottle": 1,
                "mechanical_recycling_ps_bottle": 1,
                "chemical_recycling_ps_bottle": 1,
            },
        }
    },
)
def domestic_recycling_ps_bottle():
    return _integ_domestic_recycling_ps_bottle()


_integ_domestic_recycling_ps_bottle = Integ(
    lambda: sent_for_recycling_ps_bottle()
    - mechanical_recycling_ps_bottle()
    - chemical_recycling_ps_bottle(),
    lambda: 0,
    "_integ_domestic_recycling_ps_bottle",
)


@component.add(
    name="rate sent for reuse ps film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ps_film():
    return 0


@component.add(
    name="rate of mechanical recycling pvc bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pvc_bottle():
    return 1


@component.add(
    name="Domestic Recycling ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ps_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_ps_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_ps_ptt": 1,
                "mechanical_recycling_ps_ptt": 1,
                "chemical_recycling_ps_ptt": 1,
            },
        }
    },
)
def domestic_recycling_ps_ptt():
    return _integ_domestic_recycling_ps_ptt()


_integ_domestic_recycling_ps_ptt = Integ(
    lambda: sent_for_recycling_ps_ptt()
    - mechanical_recycling_ps_ptt()
    - chemical_recycling_ps_ptt(),
    lambda: 8024,
    "_integ_domestic_recycling_ps_ptt",
)


@component.add(
    name="rate of mechanical recycling pvc ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pvc_ptt():
    return 1


@component.add(
    name="Domestic Recycling pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pvc_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_pvc_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_pvc_bottle": 1,
                "mechanical_recycling_pvc_bottle": 1,
                "chemical_recycling_pvc_bottle": 1,
            },
        }
    },
)
def domestic_recycling_pvc_bottle():
    return _integ_domestic_recycling_pvc_bottle()


_integ_domestic_recycling_pvc_bottle = Integ(
    lambda: sent_for_recycling_pvc_bottle()
    - mechanical_recycling_pvc_bottle()
    - chemical_recycling_pvc_bottle(),
    lambda: 0,
    "_integ_domestic_recycling_pvc_bottle",
)


@component.add(
    name="Domestic Recycling pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pvc_film": 1},
    other_deps={
        "_integ_domestic_recycling_pvc_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_pvc_film": 1,
                "mechanical_recycling_pvc_film": 1,
                "chemical_recycling_pvc_film": 1,
            },
        }
    },
)
def domestic_recycling_pvc_film():
    return _integ_domestic_recycling_pvc_film()


_integ_domestic_recycling_pvc_film = Integ(
    lambda: sent_for_recycling_pvc_film()
    - mechanical_recycling_pvc_film()
    - chemical_recycling_pvc_film(),
    lambda: 1283,
    "_integ_domestic_recycling_pvc_film",
)


@component.add(
    name="Domestic Recycling PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pvc_other": 1},
    other_deps={
        "_integ_domestic_recycling_pvc_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_pvc_other": 1,
                "mechanical_recycling_pvc_other": 1,
                "chemical_recycling_pvc_other": 1,
            },
        }
    },
)
def domestic_recycling_pvc_other():
    return _integ_domestic_recycling_pvc_other()


_integ_domestic_recycling_pvc_other = Integ(
    lambda: sent_for_recycling_pvc_other()
    - mechanical_recycling_pvc_other()
    - chemical_recycling_pvc_other(),
    lambda: 427,
    "_integ_domestic_recycling_pvc_other",
)


@component.add(
    name="Domestic Recycling pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pvc_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_pvc_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_pvc_ptt": 1,
                "mechanical_recycling_pvc_ptt": 1,
                "chemical_recycling_pvc_ptt": 1,
            },
        }
    },
)
def domestic_recycling_pvc_ptt():
    return _integ_domestic_recycling_pvc_ptt()


_integ_domestic_recycling_pvc_ptt = Integ(
    lambda: sent_for_recycling_pvc_ptt()
    - mechanical_recycling_pvc_ptt()
    - chemical_recycling_pvc_ptt(),
    lambda: 1854,
    "_integ_domestic_recycling_pvc_ptt",
)


@component.add(
    name="Sent to landfill pp other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_other": 1, "domestic_residual_treatment_pp_other": 1},
)
def sent_to_landfill_pp_other():
    return landfill_rate_pp_other() * domestic_residual_treatment_pp_other()


@component.add(
    name="Sent to landfill pp ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_ptt": 1, "domestic_residual_treatment_pp_ptt": 1},
)
def sent_to_landfill_pp_ptt():
    return landfill_rate_pp_ptt() * domestic_residual_treatment_pp_ptt()


@component.add(
    name="Sent to landfill ps bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_ps_bottle": 1,
        "domestic_residual_treatment_ps_bottle": 1,
    },
)
def sent_to_landfill_ps_bottle():
    return landfill_rate_ps_bottle() * domestic_residual_treatment_ps_bottle()


@component.add(
    name="Sent to landfill ps film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_film": 1, "domestic_residual_treatment_ps_film": 1},
)
def sent_to_landfill_ps_film():
    return landfill_rate_ps_film() * domestic_residual_treatment_ps_film()


@component.add(
    name="Sent to landfill ps other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_other": 1, "domestic_residual_treatment_ps_other": 1},
)
def sent_to_landfill_ps_other():
    return landfill_rate_ps_other() * domestic_residual_treatment_ps_other()


@component.add(
    name="Sent to landfill ps ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ps_ptt": 1, "domestic_residual_treatment_ps_ptt": 1},
)
def sent_to_landfill_ps_ptt():
    return landfill_rate_ps_ptt() * domestic_residual_treatment_ps_ptt()


@component.add(
    name="Sent for recycling pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pvc_film": 1, "rate_sent_for_domestic_recycling_pvc_film": 1},
)
def sent_for_recycling_pvc_film():
    return sorting_pvc_film() * rate_sent_for_domestic_recycling_pvc_film()


@component.add(
    name="Landfill pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pp_other": 1},
    other_deps={
        "_integ_landfill_pp_other": {
            "initial": {},
            "step": {"sent_to_landfill_pp_other": 1},
        }
    },
)
def landfill_pp_other():
    return _integ_landfill_pp_other()


_integ_landfill_pp_other = Integ(
    lambda: sent_to_landfill_pp_other(), lambda: 0, "_integ_landfill_pp_other"
)


@component.add(
    name="Sent to landfill pvc bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pvc_bottle": 1,
        "domestic_residual_treatment_pvc_bottle": 1,
    },
)
def sent_to_landfill_pvc_bottle():
    return landfill_rate_pvc_bottle() * domestic_residual_treatment_pvc_bottle()


@component.add(
    name="Sent to landfill pvc film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_film": 1, "domestic_residual_treatment_pvc_film": 1},
)
def sent_to_landfill_pvc_film():
    return landfill_rate_pvc_film() * domestic_residual_treatment_pvc_film()


@component.add(
    name="Landfill ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ps_film": 1},
    other_deps={
        "_integ_landfill_ps_film": {
            "initial": {},
            "step": {"sent_to_landfill_ps_film": 1},
        }
    },
)
def landfill_ps_film():
    return _integ_landfill_ps_film()


_integ_landfill_ps_film = Integ(
    lambda: sent_to_landfill_ps_film(), lambda: 0, "_integ_landfill_ps_film"
)


@component.add(
    name="Landfill ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ps_other": 1},
    other_deps={
        "_integ_landfill_ps_other": {
            "initial": {},
            "step": {"sent_to_landfill_ps_other": 1},
        }
    },
)
def landfill_ps_other():
    return _integ_landfill_ps_other()


_integ_landfill_ps_other = Integ(
    lambda: sent_to_landfill_ps_other(), lambda: 0, "_integ_landfill_ps_other"
)


@component.add(
    name="Landfill ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ps_ptt": 1},
    other_deps={
        "_integ_landfill_ps_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_ps_ptt": 1},
        }
    },
)
def landfill_ps_ptt():
    return _integ_landfill_ps_ptt()


_integ_landfill_ps_ptt = Integ(
    lambda: sent_to_landfill_ps_ptt(), lambda: 0, "_integ_landfill_ps_ptt"
)


@component.add(
    name="Waste collected ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ps_other": 1},
    other_deps={
        "_integ_waste_collected_ps_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_ps_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ps_other": 1,
            },
        }
    },
)
def waste_collected_ps_other():
    return _integ_waste_collected_ps_other()


_integ_waste_collected_ps_other = Integ(
    lambda: formal_waste_collection_ps_other()
    - waste_collected_sent_to_formal_domestic_treatment_ps_other(),
    lambda: 8592,
    "_integ_waste_collected_ps_other",
)


@component.add(
    name="Landfill pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pvc_bottle": 1},
    other_deps={
        "_integ_landfill_pvc_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_pvc_bottle": 1},
        }
    },
)
def landfill_pvc_bottle():
    return _integ_landfill_pvc_bottle()


_integ_landfill_pvc_bottle = Integ(
    lambda: sent_to_landfill_pvc_bottle(), lambda: 0, "_integ_landfill_pvc_bottle"
)


@component.add(
    name="Landfill pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pvc_film": 1},
    other_deps={
        "_integ_landfill_pvc_film": {
            "initial": {},
            "step": {"sent_to_landfill_pvc_film": 1},
        }
    },
)
def landfill_pvc_film():
    return _integ_landfill_pvc_film()


_integ_landfill_pvc_film = Integ(
    lambda: sent_to_landfill_pvc_film(), lambda: 0, "_integ_landfill_pvc_film"
)


@component.add(
    name="Landfill PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pvc_other": 1},
    other_deps={
        "_integ_landfill_pvc_other": {
            "initial": {},
            "step": {"sent_to_landfill_pvc_other": 1},
        }
    },
)
def landfill_pvc_other():
    return _integ_landfill_pvc_other()


_integ_landfill_pvc_other = Integ(
    lambda: sent_to_landfill_pvc_other(), lambda: 0, "_integ_landfill_pvc_other"
)


@component.add(
    name="Landfill pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pvc_ptt": 1},
    other_deps={
        "_integ_landfill_pvc_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_pvc_ptt": 1},
        }
    },
)
def landfill_pvc_ptt():
    return _integ_landfill_pvc_ptt()


_integ_landfill_pvc_ptt = Integ(
    lambda: sent_to_landfill_pvc_ptt(), lambda: 0, "_integ_landfill_pvc_ptt"
)


@component.add(
    name="rate of recycling pp other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pp_other": 1,
        "historical_on_rate_of_recycling_pp_other": 1,
    },
)
def rate_of_recycling_pp_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: formulation_for_rate_of_recycling_pp_other(),
        lambda: historical_on_rate_of_recycling_pp_other(),
    )


@component.add(
    name="rate of recycling pp ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pp_ptt": 1,
        "historical_on_rate_of_recycling_pp_ptt": 1,
    },
)
def rate_of_recycling_pp_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_pp_ptt(),
        lambda: historical_on_rate_of_recycling_pp_ptt(),
    )


@component.add(
    name="rate of recycling ps bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ps_bottle": 1,
        "historical_on_rate_of_recycling_ps_bottle": 1,
    },
)
def rate_of_recycling_ps_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_ps_bottle(),
        lambda: historical_on_rate_of_recycling_ps_bottle(),
    )


@component.add(
    name="rate of recycling ps film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ps_film": 1,
        "historical_on_rate_of_recycling_ps_film": 1,
    },
)
def rate_of_recycling_ps_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: formulation_for_rate_of_recycling_ps_film(),
        lambda: historical_on_rate_of_recycling_ps_film(),
    )


@component.add(
    name="Domestic Residual treatment pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pp_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pp_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pp_other": 1,
                "sent_to_incineration_pp_other": 1,
                "sent_to_landfill_pp_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_pp_other():
    return _integ_domestic_residual_treatment_pp_other()


_integ_domestic_residual_treatment_pp_other = Integ(
    lambda: sent_for_residual_treatment_pp_other()
    - sent_to_incineration_pp_other()
    - sent_to_landfill_pp_other(),
    lambda: 38284,
    "_integ_domestic_residual_treatment_pp_other",
)


@component.add(
    name="Domestic Residual treatment pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pp_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pp_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pp_ptt": 1,
                "sent_to_incineration_pp_ptt": 1,
                "sent_to_landfill_pp_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_pp_ptt():
    return _integ_domestic_residual_treatment_pp_ptt()


_integ_domestic_residual_treatment_pp_ptt = Integ(
    lambda: sent_for_residual_treatment_pp_ptt()
    - sent_to_incineration_pp_ptt()
    - sent_to_landfill_pp_ptt(),
    lambda: 78391,
    "_integ_domestic_residual_treatment_pp_ptt",
)


@component.add(
    name="rate of recycling ps ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ps_ptt": 1,
        "historical_on_rate_of_recycling_ps_ptt": 1,
    },
)
def rate_of_recycling_ps_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_ps_ptt(),
        lambda: historical_on_rate_of_recycling_ps_ptt(),
    )


@component.add(
    name="rate to illegal collection ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ps_bottle():
    return 0.006


@component.add(
    name="rate of recycling pvc bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pvc_bottle": 1,
        "historical_on_rate_of_recycling_pvc_bottle": 1,
    },
)
def rate_of_recycling_pvc_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_pvc_bottle(),
        lambda: historical_on_rate_of_recycling_pvc_bottle(),
    )


@component.add(
    name="Domestic Residual treatment ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ps_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ps_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ps_ptt": 1,
                "sent_to_incineration_ps_ptt": 1,
                "sent_to_landfill_ps_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_ps_ptt():
    return _integ_domestic_residual_treatment_ps_ptt()


_integ_domestic_residual_treatment_ps_ptt = Integ(
    lambda: sent_for_residual_treatment_ps_ptt()
    - sent_to_incineration_ps_ptt()
    - sent_to_landfill_ps_ptt(),
    lambda: 27181,
    "_integ_domestic_residual_treatment_ps_ptt",
)


@component.add(
    name="rate of recycling pvc ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pvc_ptt": 1,
        "historical_on_rate_of_recycling_pvc_ptt": 1,
    },
)
def rate_of_recycling_pvc_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_pvc_ptt(),
        lambda: historical_on_rate_of_recycling_pvc_ptt(),
    )


@component.add(
    name="Domestic Residual treatment pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pvc_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pvc_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pvc_bottle": 1,
                "sent_to_incineration_pvc_bottle": 1,
                "sent_to_landfill_pvc_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_pvc_bottle():
    return _integ_domestic_residual_treatment_pvc_bottle()


_integ_domestic_residual_treatment_pvc_bottle = Integ(
    lambda: sent_for_residual_treatment_pvc_bottle()
    - sent_to_incineration_pvc_bottle()
    - sent_to_landfill_pvc_bottle(),
    lambda: 0,
    "_integ_domestic_residual_treatment_pvc_bottle",
)


@component.add(
    name="Domestic Residual treatment pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pvc_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pvc_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pvc_film": 1,
                "sent_to_incineration_pvc_film": 1,
                "sent_to_landfill_pvc_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_pvc_film():
    return _integ_domestic_residual_treatment_pvc_film()


_integ_domestic_residual_treatment_pvc_film = Integ(
    lambda: sent_for_residual_treatment_pvc_film()
    - sent_to_incineration_pvc_film()
    - sent_to_landfill_pvc_film(),
    lambda: 4354,
    "_integ_domestic_residual_treatment_pvc_film",
)


@component.add(
    name="Domestic Residual treatment PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pvc_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pvc_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pvc_other": 1,
                "sent_to_incineration_pvc_other": 1,
                "sent_to_landfill_pvc_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_pvc_other():
    return _integ_domestic_residual_treatment_pvc_other()


_integ_domestic_residual_treatment_pvc_other = Integ(
    lambda: sent_for_residual_treatment_pvc_other()
    - sent_to_incineration_pvc_other()
    - sent_to_landfill_pvc_other(),
    lambda: 1450,
    "_integ_domestic_residual_treatment_pvc_other",
)


@component.add(
    name="Domestic Residual treatment pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pvc_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pvc_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pvc_ptt": 1,
                "sent_to_incineration_pvc_ptt": 1,
                "sent_to_landfill_pvc_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_pvc_ptt():
    return _integ_domestic_residual_treatment_pvc_ptt()


_integ_domestic_residual_treatment_pvc_ptt = Integ(
    lambda: sent_for_residual_treatment_pvc_ptt()
    - sent_to_incineration_pvc_ptt()
    - sent_to_landfill_pvc_ptt(),
    lambda: 6289,
    "_integ_domestic_residual_treatment_pvc_ptt",
)


@component.add(
    name="Sorting pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pp_other": 1},
    other_deps={
        "_integ_sorting_pp_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_pp_other": 1,
                "sent_for_recycling_pp_other": 1,
                "recycling_rejects_rate_pp_other": 1,
                "sent_for_overseas_treatment_pp_other": 1,
            },
        }
    },
)
def sorting_pp_other():
    return _integ_sorting_pp_other()


_integ_sorting_pp_other = Integ(
    lambda: sent_for_sorting_pp_other()
    - sent_for_recycling_pp_other()
    - recycling_rejects_rate_pp_other()
    - sent_for_overseas_treatment_pp_other(),
    lambda: 32351,
    "_integ_sorting_pp_other",
)


@component.add(
    name="Sorting pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pp_ptt": 1},
    other_deps={
        "_integ_sorting_pp_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_pp_ptt": 1,
                "sent_for_recycling_pp_ptt": 1,
                "recycling_rejects_rate_pp_ptt": 1,
                "sent_for_overseas_treatment_pp_ptt": 1,
            },
        }
    },
)
def sorting_pp_ptt():
    return _integ_sorting_pp_ptt()


_integ_sorting_pp_ptt = Integ(
    lambda: sent_for_sorting_pp_ptt()
    - sent_for_recycling_pp_ptt()
    - recycling_rejects_rate_pp_ptt()
    - sent_for_overseas_treatment_pp_ptt(),
    lambda: 66820,
    "_integ_sorting_pp_ptt",
)


@component.add(
    name="Sorting ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ps_bottle": 1},
    other_deps={
        "_integ_sorting_ps_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_ps_bottle": 1,
                "sent_for_recycling_ps_bottle": 1,
                "recycling_rejects_rate_ps_bottle": 1,
                "sent_for_overseas_treatment_ps_bottle": 1,
            },
        }
    },
)
def sorting_ps_bottle():
    return _integ_sorting_ps_bottle()


_integ_sorting_ps_bottle = Integ(
    lambda: sent_for_sorting_ps_bottle()
    - sent_for_recycling_ps_bottle()
    - recycling_rejects_rate_ps_bottle()
    - sent_for_overseas_treatment_ps_bottle(),
    lambda: 0,
    "_integ_sorting_ps_bottle",
)


@component.add(
    name="Sorting ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ps_film": 1},
    other_deps={
        "_integ_sorting_ps_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_ps_film": 1,
                "sent_for_recycling_ps_film": 1,
                "recycling_rejects_rate_ps_film": 1,
                "sent_for_overseas_treatment_ps_film": 1,
            },
        }
    },
)
def sorting_ps_film():
    return _integ_sorting_ps_film()


_integ_sorting_ps_film = Integ(
    lambda: sent_for_sorting_ps_film()
    - sent_for_recycling_ps_film()
    - recycling_rejects_rate_ps_film()
    - sent_for_overseas_treatment_ps_film(),
    lambda: 817,
    "_integ_sorting_ps_film",
)


@component.add(
    name="Sorting ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ps_other": 1},
    other_deps={
        "_integ_sorting_ps_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_ps_other": 1,
                "sent_for_recycling_ps_other": 1,
                "recycling_rejects_rate_ps_other": 1,
                "sent_for_overseas_treatment_ps_other": 1,
            },
        }
    },
)
def sorting_ps_other():
    return _integ_sorting_ps_other()


_integ_sorting_ps_other = Integ(
    lambda: sent_for_sorting_ps_other()
    - sent_for_recycling_ps_other()
    - recycling_rejects_rate_ps_other()
    - sent_for_overseas_treatment_ps_other(),
    lambda: 3911,
    "_integ_sorting_ps_other",
)


@component.add(
    name="landfill rate pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Sorting pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pvc_bottle": 1},
    other_deps={
        "_integ_sorting_pvc_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_pvc_bottle": 1,
                "sent_for_recycling_pvc_bottle": 1,
                "recycling_rejects_rate_pvc_bottle": 1,
                "sent_for_overseas_treatment_pvc_bottle": 1,
            },
        }
    },
)
def sorting_pvc_bottle():
    return _integ_sorting_pvc_bottle()


_integ_sorting_pvc_bottle = Integ(
    lambda: sent_for_sorting_pvc_bottle()
    - sent_for_recycling_pvc_bottle()
    - recycling_rejects_rate_pvc_bottle()
    - sent_for_overseas_treatment_pvc_bottle(),
    lambda: 0,
    "_integ_sorting_pvc_bottle",
)


@component.add(
    name="Sorting pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pvc_film": 1},
    other_deps={
        "_integ_sorting_pvc_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_pvc_film": 1,
                "sent_for_recycling_pvc_film": 1,
                "recycling_rejects_rate_pvc_film": 1,
                "sent_for_overseas_treatment_pvc_film": 1,
            },
        }
    },
)
def sorting_pvc_film():
    return _integ_sorting_pvc_film()


_integ_sorting_pvc_film = Integ(
    lambda: sent_for_sorting_pvc_film()
    - sent_for_recycling_pvc_film()
    - recycling_rejects_rate_pvc_film()
    - sent_for_overseas_treatment_pvc_film(),
    lambda: 3679,
    "_integ_sorting_pvc_film",
)


@component.add(
    name="Sorting PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pvc_other": 1},
    other_deps={
        "_integ_sorting_pvc_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_pvc_other": 1,
                "sent_for_recycling_pvc_other": 1,
                "recycling_rejects_rate_pvc_other": 1,
                "sent_for_overseas_treatment_pvc_other": 1,
            },
        }
    },
)
def sorting_pvc_other():
    return _integ_sorting_pvc_other()


_integ_sorting_pvc_other = Integ(
    lambda: sent_for_sorting_pvc_other()
    - sent_for_recycling_pvc_other()
    - recycling_rejects_rate_pvc_other()
    - sent_for_overseas_treatment_pvc_other(),
    lambda: 1226,
    "_integ_sorting_pvc_other",
)


@component.add(
    name="Sorting pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pvc_ptt": 1},
    other_deps={
        "_integ_sorting_pvc_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_pvc_ptt": 1,
                "sent_for_recycling_pvc_ptt": 1,
                "recycling_rejects_rate_pvc_ptt": 1,
                "sent_for_overseas_treatment_pvc_ptt": 1,
            },
        }
    },
)
def sorting_pvc_ptt():
    return _integ_sorting_pvc_ptt()


_integ_sorting_pvc_ptt = Integ(
    lambda: sent_for_sorting_pvc_ptt()
    - sent_for_recycling_pvc_ptt()
    - recycling_rejects_rate_pvc_ptt()
    - sent_for_overseas_treatment_pvc_ptt(),
    lambda: 5315,
    "_integ_sorting_pvc_ptt",
)


@component.add(
    name="landfill rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="rate of recycling reject pp other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "historical_on_recycling_pp_other": 2,
        "formulation_for_recycling_rate_pp_other": 1,
    },
)
def rate_of_recycling_reject_pp_other():
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: historical_on_recycling_pp_other()
        * formulation_for_recycling_rate_pp_other(),
        lambda: historical_on_recycling_pp_other(),
    )


@component.add(
    name="rate of recycling reject pp ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "historical_on_recycling_pp_ptt": 2,
        "formulation_for_recycling_rate_pp_ptt": 1,
    },
)
def rate_of_recycling_reject_pp_ptt():
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: historical_on_recycling_pp_ptt()
        * formulation_for_recycling_rate_pp_ptt(),
        lambda: historical_on_recycling_pp_ptt(),
    )


@component.add(
    name="rate of recycling reject ps bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "formulation_for_recycling_rate_ps_bottle": 1,
        "historical_on_recycling_ps_bottle": 2,
    },
)
def rate_of_recycling_reject_ps_bottle():
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: historical_on_recycling_ps_bottle()
        * formulation_for_recycling_rate_ps_bottle(),
        lambda: historical_on_recycling_ps_bottle(),
    )


@component.add(
    name="rate of recycling reject ps film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "historical_on_recycling_ps_film": 2,
        "formulation_for_recycling_rate_ps_film": 1,
    },
)
def rate_of_recycling_reject_ps_film():
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: historical_on_recycling_ps_film()
        * formulation_for_recycling_rate_ps_film(),
        lambda: historical_on_recycling_ps_film(),
    )


@component.add(
    name="rate of recycling reject ps other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "formulation_for_recycling_rate_ps_other": 1,
        "historical_on_recycling_ps_other": 2,
    },
)
def rate_of_recycling_reject_ps_other():
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: historical_on_recycling_ps_other()
        * formulation_for_recycling_rate_ps_other(),
        lambda: historical_on_recycling_ps_other(),
    )


@component.add(
    name="rate of recycling reject ps ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_ps_ptt": 1,
        "historical_on_recycling_ps_ptt": 2,
    },
)
def rate_of_recycling_reject_ps_ptt():
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: historical_on_recycling_ps_ptt()
        * formulation_for_recycling_rate_ps_ptt(),
        lambda: historical_on_recycling_ps_ptt(),
    )


@component.add(
    name="Overseas treatment pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pvc_film": 1},
    other_deps={
        "_integ_overseas_treatment_pvc_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pvc_film": 1},
        }
    },
)
def overseas_treatment_pvc_film():
    return _integ_overseas_treatment_pvc_film()


_integ_overseas_treatment_pvc_film = Integ(
    lambda: sent_for_overseas_treatment_pvc_film(),
    lambda: 0,
    "_integ_overseas_treatment_pvc_film",
)


@component.add(
    name="Dumped pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pp_ptt": 1},
    other_deps={
        "_integ_dumped_pp_ptt": {"initial": {}, "step": {"mismanagement_pp_ptt": 1}}
    },
)
def dumped_pp_ptt():
    return _integ_dumped_pp_ptt()


_integ_dumped_pp_ptt = Integ(
    lambda: mismanagement_pp_ptt(), lambda: 0, "_integ_dumped_pp_ptt"
)


@component.add(
    name="rate of recycling reject pvc bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "formulation_for_recycling_rate_pvc_bottle": 1,
        "historical_on_recycling_pvc_bottle": 2,
    },
)
def rate_of_recycling_reject_pvc_bottle():
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: historical_on_recycling_pvc_bottle()
        * formulation_for_recycling_rate_pvc_bottle(),
        lambda: historical_on_recycling_pvc_bottle(),
    )


@component.add(
    name="rate of recycling reject pvc film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "historical_on_recycling_pvc_film": 2,
        "formulation_for_recycling_rate_pvc_film": 1,
    },
)
def rate_of_recycling_reject_pvc_film():
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: historical_on_recycling_pvc_film()
        * formulation_for_recycling_rate_pvc_film(),
        lambda: historical_on_recycling_pvc_film(),
    )


@component.add(
    name="rate of recycling reject PVC Other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "historical_on_recycling_pvc_other": 2,
        "formulation_for_recycling_rate_pvc_other": 1,
    },
)
def rate_of_recycling_reject_pvc_other():
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: historical_on_recycling_pvc_other()
        * formulation_for_recycling_rate_pvc_other(),
        lambda: historical_on_recycling_pvc_other(),
    )


@component.add(
    name="Dumped ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ps_ptt": 1},
    other_deps={
        "_integ_dumped_ps_ptt": {"initial": {}, "step": {"mismanagement_ps_ptt": 1}}
    },
)
def dumped_ps_ptt():
    return _integ_dumped_ps_ptt()


_integ_dumped_ps_ptt = Integ(
    lambda: mismanagement_ps_ptt(), lambda: 0, "_integ_dumped_ps_ptt"
)


@component.add(
    name="formulation for rate of recycling ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_bottle": 1,
        "historical_on_rate_of_recycling_ps_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_ps_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ps_bottle(),
        lambda: historical_on_rate_of_recycling_ps_bottle(),
        lambda: 0,
    )


@component.add(
    name="Dumped pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pvc_bottle": 1},
    other_deps={
        "_integ_dumped_pvc_bottle": {
            "initial": {},
            "step": {"mismanagement_pvc_bottle": 1},
        }
    },
)
def dumped_pvc_bottle():
    return _integ_dumped_pvc_bottle()


_integ_dumped_pvc_bottle = Integ(
    lambda: mismanagement_pvc_bottle(), lambda: 0, "_integ_dumped_pvc_bottle"
)


@component.add(
    name="Dumped pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pvc_film": 1},
    other_deps={
        "_integ_dumped_pvc_film": {"initial": {}, "step": {"mismanagement_pvc_film": 1}}
    },
)
def dumped_pvc_film():
    return _integ_dumped_pvc_film()


_integ_dumped_pvc_film = Integ(
    lambda: mismanagement_pvc_film(), lambda: 0, "_integ_dumped_pvc_film"
)


@component.add(
    name="Dumped PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pvc_other": 1},
    other_deps={
        "_integ_dumped_pvc_other": {
            "initial": {},
            "step": {"mismanagement_pvc_other": 1},
        }
    },
)
def dumped_pvc_other():
    return _integ_dumped_pvc_other()


_integ_dumped_pvc_other = Integ(
    lambda: mismanagement_pvc_other(), lambda: 0, "_integ_dumped_pvc_other"
)


@component.add(
    name="Dumped pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pvc_ptt": 1},
    other_deps={
        "_integ_dumped_pvc_ptt": {"initial": {}, "step": {"mismanagement_pvc_ptt": 1}}
    },
)
def dumped_pvc_ptt():
    return _integ_dumped_pvc_ptt()


_integ_dumped_pvc_ptt = Integ(
    lambda: mismanagement_pvc_ptt(), lambda: 0, "_integ_dumped_pvc_ptt"
)


@component.add(
    name="rvm historical ps ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ps_ptt():
    return 0


@component.add(
    name="formulation for rate of recycling pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_film": 1,
        "historical_on_rate_of_recycling_pvc_film": 1,
    },
)
def formulation_for_rate_of_recycling_pvc_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pvc_film(),
        lambda: historical_on_rate_of_recycling_pvc_film(),
        lambda: 0,
    )


@component.add(
    name="rvm historical pvc bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pvc_bottle():
    return 0


@component.add(
    name="to waste generated pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pp_other": 1},
)
def to_waste_generated_pp_other():
    return total_pom_pp_other()


@component.add(
    name="to waste generated pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pp_ptt": 1},
)
def to_waste_generated_pp_ptt():
    return total_pom_pp_ptt()


@component.add(
    name="Littered pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pp_other": 1},
    other_deps={
        "_integ_littered_pp_other": {"initial": {}, "step": {"littering_pp_other": 1}}
    },
)
def littered_pp_other():
    return _integ_littered_pp_other()


_integ_littered_pp_other = Integ(
    lambda: littering_pp_other(), lambda: 0, "_integ_littered_pp_other"
)


@component.add(
    name="Waste generated pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pp_other": 1},
    other_deps={
        "_integ_waste_generated_pp_other": {
            "initial": {},
            "step": {
                "to_waste_generated_pp_other": 1,
                "illegal_collection_data_pp_other": 2,
                "littering_pp_other": 1,
                "formal_waste_collection_pp_other": 1,
            },
        }
    },
)
def waste_generated_pp_other():
    return _integ_waste_generated_pp_other()


_integ_waste_generated_pp_other = Integ(
    lambda: to_waste_generated_pp_other()
    - illegal_collection_data_pp_other()
    - littering_pp_other()
    - formal_waste_collection_pp_other()
    - illegal_collection_data_pp_other(),
    lambda: 74377.9,
    "_integ_waste_generated_pp_other",
)


@component.add(
    name="Littered ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ps_other": 1},
    other_deps={
        "_integ_littered_ps_other": {"initial": {}, "step": {"littering_ps_other": 1}}
    },
)
def littered_ps_other():
    return _integ_littered_ps_other()


_integ_littered_ps_other = Integ(
    lambda: littering_ps_other(), lambda: 0, "_integ_littered_ps_other"
)


@component.add(
    name="Littered ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ps_ptt": 1},
    other_deps={
        "_integ_littered_ps_ptt": {"initial": {}, "step": {"littering_ps_ptt": 1}}
    },
)
def littered_ps_ptt():
    return _integ_littered_ps_ptt()


_integ_littered_ps_ptt = Integ(
    lambda: littering_ps_ptt(), lambda: 0, "_integ_littered_ps_ptt"
)


@component.add(
    name="Littered pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pvc_bottle": 1},
    other_deps={
        "_integ_littered_pvc_bottle": {
            "initial": {},
            "step": {"littering_pvc_bottle": 1},
        }
    },
)
def littered_pvc_bottle():
    return _integ_littered_pvc_bottle()


_integ_littered_pvc_bottle = Integ(
    lambda: littering_pvc_bottle(), lambda: 0, "_integ_littered_pvc_bottle"
)


@component.add(
    name="Littered pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pvc_film": 1},
    other_deps={
        "_integ_littered_pvc_film": {"initial": {}, "step": {"littering_pvc_film": 1}}
    },
)
def littered_pvc_film():
    return _integ_littered_pvc_film()


_integ_littered_pvc_film = Integ(
    lambda: littering_pvc_film(), lambda: 0, "_integ_littered_pvc_film"
)


@component.add(
    name="Littered PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pvc_other": 1},
    other_deps={
        "_integ_littered_pvc_other": {"initial": {}, "step": {"littering_pvc_other": 1}}
    },
)
def littered_pvc_other():
    return _integ_littered_pvc_other()


_integ_littered_pvc_other = Integ(
    lambda: littering_pvc_other(), lambda: 0, "_integ_littered_pvc_other"
)


@component.add(
    name="Littered pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pvc_ptt": 1},
    other_deps={
        "_integ_littered_pvc_ptt": {"initial": {}, "step": {"littering_pvc_ptt": 1}}
    },
)
def littered_pvc_ptt():
    return _integ_littered_pvc_ptt()


_integ_littered_pvc_ptt = Integ(
    lambda: littering_pvc_ptt(), lambda: 0, "_integ_littered_pvc_ptt"
)


@component.add(
    name="rate overseas pp other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_pp_other": 1,
        "historical_overseas_rate_pp_other": 1,
    },
)
def rate_overseas_pp_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pp_other() < time(),
        lambda: formulation_of_overseas_rate_pp_other(),
        lambda: historical_overseas_rate_pp_other(),
    )


@component.add(
    name="rate overseas pp ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_pp_ptt": 1,
        "historical_overseas_rate_pp_ptt": 1,
    },
)
def rate_overseas_pp_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pp_ptt() < time(),
        lambda: formulation_of_overseas_rate_pp_ptt(),
        lambda: historical_overseas_rate_pp_ptt(),
    )


@component.add(
    name="rate overseas ps bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_ps_bottle": 1,
        "historical_overseas_rate_ps_bottle": 1,
    },
)
def rate_overseas_ps_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ps_bottle() < time(),
        lambda: formulation_of_overseas_rate_ps_bottle(),
        lambda: historical_overseas_rate_ps_bottle(),
    )


@component.add(
    name="rate overseas ps film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_ps_film": 1,
        "historical_overseas_rate_ps_film": 1,
    },
)
def rate_overseas_ps_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ps_film() < time(),
        lambda: formulation_of_overseas_rate_ps_film(),
        lambda: historical_overseas_rate_ps_film(),
    )


@component.add(
    name="Formal domestic treatment pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pp_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pp_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pp_other": 1,
                "sent_for_sorting_pp_other": 1,
                "sent_for_residual_treatment_pp_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_pp_other():
    return _integ_formal_domestic_treatment_pp_other()


_integ_formal_domestic_treatment_pp_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pp_other()
    - sent_for_sorting_pp_other()
    - sent_for_residual_treatment_pp_other(),
    lambda: 70636,
    "_integ_formal_domestic_treatment_pp_other",
)


@component.add(
    name="Formal domestic treatment pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pp_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pp_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pp_ptt": 1,
                "sent_for_sorting_pp_ptt": 1,
                "sent_for_residual_treatment_pp_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_pp_ptt():
    return _integ_formal_domestic_treatment_pp_ptt()


_integ_formal_domestic_treatment_pp_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pp_ptt()
    - sent_for_sorting_pp_ptt()
    - sent_for_residual_treatment_pp_ptt(),
    lambda: 144633,
    "_integ_formal_domestic_treatment_pp_ptt",
)


@component.add(
    name="rate overseas ps ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_ps_ptt": 1,
        "historical_overseas_rate_ps_ptt": 1,
    },
)
def rate_overseas_ps_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ps_ptt() < time(),
        lambda: formulation_of_overseas_rate_ps_ptt(),
        lambda: historical_overseas_rate_ps_ptt(),
    )


@component.add(
    name="Recycling rejects ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ps_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_ps_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_ps_bottle": 1},
        }
    },
)
def recycling_rejects_ps_bottle():
    return _integ_recycling_rejects_ps_bottle()


_integ_recycling_rejects_ps_bottle = Integ(
    lambda: recycling_rejects_rate_ps_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_ps_bottle",
)


@component.add(
    name="rate overseas pvc bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_pvc_bottle": 1,
        "historical_overseas_rate_pvc_bottle": 1,
    },
)
def rate_overseas_pvc_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pvc_bottle() < time(),
        lambda: formulation_of_overseas_rate_pvc_bottle(),
        lambda: historical_overseas_rate_pvc_bottle(),
    )


@component.add(
    name="Formal domestic treatment ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ps_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ps_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ps_ptt": 1,
                "sent_for_sorting_ps_ptt": 1,
                "sent_for_residual_treatment_ps_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_ps_ptt():
    return _integ_formal_domestic_treatment_ps_ptt()


_integ_formal_domestic_treatment_ps_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ps_ptt()
    - sent_for_sorting_ps_ptt()
    - sent_for_residual_treatment_ps_ptt(),
    lambda: 50888,
    "_integ_formal_domestic_treatment_ps_ptt",
)


@component.add(
    name="rate overseas pvc ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_pvc_ptt": 1,
        "historical_overseas_rate_pvc_ptt": 1,
    },
)
def rate_overseas_pvc_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: formulation_of_overseas_rate_pvc_ptt(),
        lambda: historical_overseas_rate_pvc_ptt(),
    )


@component.add(
    name="Formal domestic treatment pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pvc_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pvc_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pvc_bottle": 1,
                "sent_for_sorting_pvc_bottle": 1,
                "sent_for_residual_treatment_pvc_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_pvc_bottle():
    return _integ_formal_domestic_treatment_pvc_bottle()


_integ_formal_domestic_treatment_pvc_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pvc_bottle()
    - sent_for_sorting_pvc_bottle()
    - sent_for_residual_treatment_pvc_bottle(),
    lambda: 0,
    "_integ_formal_domestic_treatment_pvc_bottle",
)


@component.add(
    name="Formal domestic treatment pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pvc_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pvc_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pvc_film": 1,
                "sent_for_sorting_pvc_film": 1,
                "sent_for_residual_treatment_pvc_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_pvc_film():
    return _integ_formal_domestic_treatment_pvc_film()


_integ_formal_domestic_treatment_pvc_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pvc_film()
    - sent_for_sorting_pvc_film()
    - sent_for_residual_treatment_pvc_film(),
    lambda: 8034,
    "_integ_formal_domestic_treatment_pvc_film",
)


@component.add(
    name="Formal domestic treatment PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pvc_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pvc_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pvc_other": 1,
                "sent_for_sorting_pvc_other": 1,
                "sent_for_residual_treatment_pvc_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_pvc_other():
    return _integ_formal_domestic_treatment_pvc_other()


_integ_formal_domestic_treatment_pvc_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pvc_other()
    - sent_for_sorting_pvc_other()
    - sent_for_residual_treatment_pvc_other(),
    lambda: 2677,
    "_integ_formal_domestic_treatment_pvc_other",
)


@component.add(
    name="Formal domestic treatment pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pvc_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pvc_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pvc_ptt": 1,
                "sent_for_sorting_pvc_ptt": 1,
                "sent_for_residual_treatment_pvc_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_pvc_ptt():
    return _integ_formal_domestic_treatment_pvc_ptt()


_integ_formal_domestic_treatment_pvc_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pvc_ptt()
    - sent_for_sorting_pvc_ptt()
    - sent_for_residual_treatment_pvc_ptt(),
    lambda: 11605,
    "_integ_formal_domestic_treatment_pvc_ptt",
)


@component.add(
    name="sent for formal domestic ps ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ps_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="formulation for recycling rate pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pvc_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="sent for formal domestic pvc bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pvc_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="littering pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pp_other": 1, "waste_generated_pp_other": 1},
)
def littering_pp_other():
    return littering_rate_pp_other() * waste_generated_pp_other()


@component.add(
    name="formulation for la collected pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pp_ptt():
    return 0.15


@component.add(
    name="wmc collected formulation pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pp_other():
    return 0.25


@component.add(
    name="littering ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ps_other": 1, "waste_generated_ps_other": 1},
)
def littering_ps_other():
    return littering_rate_ps_other() * waste_generated_ps_other()


@component.add(
    name="littering PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pvc_other": 1, "waste_generated_pvc_other": 1},
)
def littering_pvc_other():
    return littering_rate_pvc_other() * waste_generated_pvc_other()


@component.add(
    name="rate sent for domestic recycling pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pp_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pp_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ps_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ps_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Formal Waste Collection pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pp_other": 1,
        "actual_rvm_collected_pp_other": 1,
        "actual_wmc_collected_pp_other": 1,
        "waste_generated_pp_other": 1,
    },
)
def formal_waste_collection_pp_other():
    return (
        actual_la_collected_pp_other()
        + actual_rvm_collected_pp_other()
        + actual_wmc_collected_pp_other()
    ) * waste_generated_pp_other()


@component.add(
    name="Formal Waste Collection pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pp_ptt": 1,
        "actual_rvm_collected_pp_ptt": 1,
        "actual_wmc_collected_pp_ptt": 1,
        "waste_generated_pp_ptt": 1,
    },
)
def formal_waste_collection_pp_ptt():
    return (
        actual_la_collected_pp_ptt()
        + actual_rvm_collected_pp_ptt()
        + actual_wmc_collected_pp_ptt()
    ) * waste_generated_pp_ptt()


@component.add(
    name="rate sent for domestic recycling ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ps_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="recycling rejects rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ps_other": 1, "sorting_ps_other": 1},
)
def recycling_rejects_rate_ps_other():
    return rate_of_recycling_reject_ps_other() * sorting_ps_other()


@component.add(
    name="rate sent for domestic recycling pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pvc_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pvc_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Formal Waste Collection PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pvc_other": 1,
        "actual_rvm_collected_pvc_other": 1,
        "actual_wmc_collected_pvc_other": 1,
        "waste_generated_pvc_other": 1,
    },
)
def formal_waste_collection_pvc_other():
    return (
        actual_la_collected_pvc_other()
        + actual_rvm_collected_pvc_other()
        + actual_wmc_collected_pvc_other()
    ) * waste_generated_pvc_other()


@component.add(
    name="Sent for overseas treatment ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ps_ptt": 1, "sorting_ps_ptt": 1},
)
def sent_for_overseas_treatment_ps_ptt():
    return overseas_treament_rate_ps_ptt() * sorting_ps_ptt()


@component.add(
    name="formulation of overseas rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_bottle": 1,
        "historical_overseas_rate_pvc_bottle": 1,
    },
)
def formulation_of_overseas_rate_pvc_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pvc_bottle(),
        lambda: historical_overseas_rate_pvc_bottle(),
        lambda: 0,
    )


@component.add(
    name="Sent for overseas treatment pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pvc_bottle": 1, "sorting_pvc_bottle": 1},
)
def sent_for_overseas_treatment_pvc_bottle():
    return overseas_treament_rate_pvc_bottle() * sorting_pvc_bottle()


@component.add(
    name="Sent for overseas treatment pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pvc_film": 1, "sorting_pvc_film": 1},
)
def sent_for_overseas_treatment_pvc_film():
    return overseas_treament_rate_pvc_film() * sorting_pvc_film()


@component.add(
    name="Sent for overseas treatment PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pvc_other": 1, "sorting_pvc_other": 1},
)
def sent_for_overseas_treatment_pvc_other():
    return overseas_treament_rate_pvc_other() * sorting_pvc_other()


@component.add(
    name="Sent to incineration pvc bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pvc_bottle": 1,
        "domestic_residual_treatment_pvc_bottle": 1,
    },
)
def sent_to_incineration_pvc_bottle():
    return incineration_rate_pvc_bottle() * domestic_residual_treatment_pvc_bottle()


@component.add(
    name="littering rate formulation pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pp_other():
    return 0.01


@component.add(
    name="littering rate formulation pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pp_ptt():
    return 0.01


@component.add(
    name="formulation for rate of recycling pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_ptt": 1,
        "historical_on_rate_of_recycling_pp_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_pp_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pp_ptt(),
        lambda: historical_on_rate_of_recycling_pp_ptt(),
        lambda: 0,
    )


@component.add(
    name="littering rate formulation ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ps_ptt():
    return 0.01


@component.add(
    name="littering rate formulation pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pvc_bottle():
    return 0.01


@component.add(
    name="littering rate formulation pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pvc_film():
    return 0.01


@component.add(
    name="littering rate formulation PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pvc_other():
    return 0.01


@component.add(
    name="littering rate formulation pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pvc_ptt():
    return 0.01


@component.add(
    name="rate sent for reuse pp other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pp_other():
    return 0


@component.add(
    name="rate sent for reuse pp ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pp_ptt():
    return 0


@component.add(
    name="rate sent for reuse ps bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ps_bottle():
    return 0


@component.add(
    name="formulation for domestic rate pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_other": 1,
        "historical_rate_for_domestic_pp_other": 1,
    },
)
def formulation_for_domestic_rate_pp_other():
    return if_then_else(
        time() > policy1_introduction_time_pp_other(),
        lambda: historical_rate_for_domestic_pp_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_ptt": 1,
        "historical_rate_for_domestic_pp_ptt": 1,
    },
)
def formulation_for_domestic_rate_pp_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pp_ptt(),
        lambda: historical_rate_for_domestic_pp_ptt(),
        lambda: 0,
    )


@component.add(
    name="rate sent for reuse ps ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ps_ptt():
    return 0


@component.add(
    name="Waste generated pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pp_ptt": 1},
    other_deps={
        "_integ_waste_generated_pp_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_pp_ptt": 1,
                "illegal_collection_data_pp_ptt": 2,
                "littering_pp_ptt": 1,
                "formal_waste_collection_pp_ptt": 1,
            },
        }
    },
)
def waste_generated_pp_ptt():
    return _integ_waste_generated_pp_ptt()


_integ_waste_generated_pp_ptt = Integ(
    lambda: to_waste_generated_pp_ptt()
    - illegal_collection_data_pp_ptt()
    - littering_pp_ptt()
    - formal_waste_collection_pp_ptt()
    - illegal_collection_data_pp_ptt(),
    lambda: 152522,
    "_integ_waste_generated_pp_ptt",
)


@component.add(
    name="rate sent for reuse pvc bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pvc_bottle():
    return 0


@component.add(
    name="formulation for domestic rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_ptt": 1,
        "historical_rate_for_domestic_ps_ptt": 1,
    },
)
def formulation_for_domestic_rate_ps_ptt():
    return if_then_else(
        time() > policy1_introduction_time_ps_ptt(),
        lambda: historical_rate_for_domestic_ps_ptt(),
        lambda: 0,
    )


@component.add(
    name="rate sent for reuse pvc ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pvc_ptt():
    return 0


@component.add(
    name="formulation for domestic rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_bottle": 1,
        "historical_rate_for_domestic_pvc_bottle": 1,
    },
)
def formulation_for_domestic_rate_pvc_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pvc_bottle(),
        lambda: historical_rate_for_domestic_pvc_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_film": 1,
        "historical_rate_for_domestic_pvc_film": 1,
    },
)
def formulation_for_domestic_rate_pvc_film():
    return if_then_else(
        time() > policy1_introduction_time_pvc_film(),
        lambda: historical_rate_for_domestic_pvc_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_other": 1,
        "historical_rate_for_domestic_pvc_other": 1,
    },
)
def formulation_for_domestic_rate_pvc_other():
    return if_then_else(
        time() > policy1_introduction_time_pvc_other(),
        lambda: historical_rate_for_domestic_pvc_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_ptt": 1,
        "historical_rate_for_domestic_pvc_ptt": 1,
    },
)
def formulation_for_domestic_rate_pvc_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pvc_ptt(),
        lambda: historical_rate_for_domestic_pvc_ptt(),
        lambda: 0,
    )


@component.add(
    name="residual rate PVC Other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pvc_other():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="Sent for recycling pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pvc_bottle": 1,
        "rate_sent_for_domestic_recycling_pvc_bottle": 1,
    },
)
def sent_for_recycling_pvc_bottle():
    return sorting_pvc_bottle() * rate_sent_for_domestic_recycling_pvc_bottle()


@component.add(
    name="Sent for recycling PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pvc_other": 1,
        "rate_sent_for_domestic_recycling_pvc_other": 1,
    },
)
def sent_for_recycling_pvc_other():
    return sorting_pvc_other() * rate_sent_for_domestic_recycling_pvc_other()


@component.add(
    name="Sent for recycling pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pvc_ptt": 1, "rate_sent_for_domestic_recycling_pvc_ptt": 1},
)
def sent_for_recycling_pvc_ptt():
    return sorting_pvc_ptt() * rate_sent_for_domestic_recycling_pvc_ptt()


@component.add(
    name="Recycling rejects pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pp_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_pp_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_pp_ptt": 1},
        }
    },
)
def recycling_rejects_pp_ptt():
    return _integ_recycling_rejects_pp_ptt()


_integ_recycling_rejects_pp_ptt = Integ(
    lambda: recycling_rejects_rate_pp_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_pp_ptt",
)


@component.add(
    name="Waste collected pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pp_ptt": 1},
    other_deps={
        "_integ_waste_collected_pp_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_pp_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pp_ptt": 1,
            },
        }
    },
)
def waste_collected_pp_ptt():
    return _integ_waste_collected_pp_ptt()


_integ_waste_collected_pp_ptt = Integ(
    lambda: formal_waste_collection_pp_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_pp_ptt(),
    lambda: 145506,
    "_integ_waste_collected_pp_ptt",
)


@component.add(
    name="Waste collected ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ps_bottle": 1},
    other_deps={
        "_integ_waste_collected_ps_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_ps_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ps_bottle": 1,
            },
        }
    },
)
def waste_collected_ps_bottle():
    return _integ_waste_collected_ps_bottle()


_integ_waste_collected_ps_bottle = Integ(
    lambda: formal_waste_collection_ps_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_ps_bottle(),
    lambda: 0,
    "_integ_waste_collected_ps_bottle",
)


@component.add(
    name="Waste collected ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ps_film": 1},
    other_deps={
        "_integ_waste_collected_ps_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_ps_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ps_film": 1,
            },
        }
    },
)
def waste_collected_ps_film():
    return _integ_waste_collected_ps_film()


_integ_waste_collected_ps_film = Integ(
    lambda: formal_waste_collection_ps_film()
    - waste_collected_sent_to_formal_domestic_treatment_ps_film(),
    lambda: 1796,
    "_integ_waste_collected_ps_film",
)


@component.add(
    name="formulation for recycling rate ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ps_bottle():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Overseas treament rate pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pp_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Waste collected ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ps_ptt": 1},
    other_deps={
        "_integ_waste_collected_ps_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_ps_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ps_ptt": 1,
            },
        }
    },
)
def waste_collected_ps_ptt():
    return _integ_waste_collected_ps_ptt()


_integ_waste_collected_ps_ptt = Integ(
    lambda: formal_waste_collection_ps_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_ps_ptt(),
    lambda: 51196,
    "_integ_waste_collected_ps_ptt",
)


@component.add(
    name="Overseas treament rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ps_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Waste collected pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pvc_bottle": 1},
    other_deps={
        "_integ_waste_collected_pvc_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_pvc_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pvc_bottle": 1,
            },
        }
    },
)
def waste_collected_pvc_bottle():
    return _integ_waste_collected_pvc_bottle()


_integ_waste_collected_pvc_bottle = Integ(
    lambda: formal_waste_collection_pvc_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_pvc_bottle(),
    lambda: 0,
    "_integ_waste_collected_pvc_bottle",
)


@component.add(
    name="littering rate historical data ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ps_other():
    return 0.04


@component.add(
    name="littering rate historical data ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ps_ptt():
    return 0.04


@component.add(
    name="Waste collected pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pvc_ptt": 1},
    other_deps={
        "_integ_waste_collected_pvc_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_pvc_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pvc_ptt": 1,
            },
        }
    },
)
def waste_collected_pvc_ptt():
    return _integ_waste_collected_pvc_ptt()


_integ_waste_collected_pvc_ptt = Integ(
    lambda: formal_waste_collection_pvc_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_pvc_ptt(),
    lambda: 11676,
    "_integ_waste_collected_pvc_ptt",
)


@component.add(
    name="littering rate historical data pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pvc_bottle():
    return 0.04


@component.add(
    name="littering rate historical data pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pvc_film():
    return 0.04


@component.add(
    name="rate to illegal collection pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pp_other():
    return 0.006


@component.add(
    name="littering rate historical data pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pvc_ptt():
    return 0.04


@component.add(
    name="formulation for la collected pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pp_other():
    return 0.15


@component.add(
    name="rate of recycling pvc film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pvc_film": 1,
        "historical_on_rate_of_recycling_pvc_film": 1,
    },
)
def rate_of_recycling_pvc_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: formulation_for_rate_of_recycling_pvc_film(),
        lambda: historical_on_rate_of_recycling_pvc_film(),
    )


@component.add(
    name="formulation for la collected ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ps_bottle():
    return 0.15


@component.add(
    name="formulation for la collected ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ps_film():
    return 0.15


@component.add(
    name="formulation for la collected ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ps_other():
    return 0.15


@component.add(
    name="formulation for la collected ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ps_ptt():
    return 0.15


@component.add(
    name="rate to illegal collection PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pvc_other():
    return 0.006


@component.add(
    name="formulation for la collected pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pvc_bottle():
    return 0.15


@component.add(
    name="formulation for la collected pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pvc_film():
    return 0.15


@component.add(
    name="formulation for la collected PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pvc_other():
    return 0.15


@component.add(
    name="formulation for la collected pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pvc_ptt():
    return 0.15


@component.add(
    name="Illegal collection pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pp_ptt": 1},
    other_deps={
        "_integ_illegal_collection_pp_ptt": {
            "initial": {},
            "step": {"illegal_collection_data_pp_ptt": 1, "mismanagement_pp_ptt": 1},
        }
    },
)
def illegal_collection_pp_ptt():
    return _integ_illegal_collection_pp_ptt()


_integ_illegal_collection_pp_ptt = Integ(
    lambda: illegal_collection_data_pp_ptt() - mismanagement_pp_ptt(),
    lambda: 0,
    "_integ_illegal_collection_pp_ptt",
)


@component.add(
    name="Illegal collection ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ps_bottle": 1},
    other_deps={
        "_integ_illegal_collection_ps_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_ps_bottle": 1,
                "mismanagement_ps_bottle": 1,
            },
        }
    },
)
def illegal_collection_ps_bottle():
    return _integ_illegal_collection_ps_bottle()


_integ_illegal_collection_ps_bottle = Integ(
    lambda: illegal_collection_data_ps_bottle() - mismanagement_ps_bottle(),
    lambda: 0,
    "_integ_illegal_collection_ps_bottle",
)


@component.add(
    name="Waste collected sent to formal domestic treatment pp other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pp_other": 1, "waste_collected_pp_other": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pp_other():
    return sent_for_formal_domestic_pp_other() * waste_collected_pp_other()


@component.add(
    name="Waste collected sent to formal domestic treatment pp ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pp_ptt": 1, "waste_collected_pp_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pp_ptt():
    return sent_for_formal_domestic_pp_ptt() * waste_collected_pp_ptt()


@component.add(
    name="Overseas treatment pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pp_other": 1},
    other_deps={
        "_integ_overseas_treatment_pp_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pp_other": 1},
        }
    },
)
def overseas_treatment_pp_other():
    return _integ_overseas_treatment_pp_other()


_integ_overseas_treatment_pp_other = Integ(
    lambda: sent_for_overseas_treatment_pp_other(),
    lambda: 0,
    "_integ_overseas_treatment_pp_other",
)


@component.add(
    name="Waste collected sent to formal domestic treatment pvc bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pvc_bottle": 1,
        "waste_collected_pvc_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pvc_bottle():
    return sent_for_formal_domestic_pvc_bottle() * waste_collected_pvc_bottle()


@component.add(
    name="formulation of overseas rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_film": 1,
        "historical_overseas_rate_pvc_film": 1,
    },
)
def formulation_of_overseas_rate_pvc_film():
    return if_then_else(
        time() > policy1_introduction_time_pvc_film(),
        lambda: historical_overseas_rate_pvc_film(),
        lambda: 0,
    )


@component.add(
    name="Overseas treatment pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pvc_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_pvc_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pvc_bottle": 1},
        }
    },
)
def overseas_treatment_pvc_bottle():
    return _integ_overseas_treatment_pvc_bottle()


_integ_overseas_treatment_pvc_bottle = Integ(
    lambda: sent_for_overseas_treatment_pvc_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_pvc_bottle",
)


@component.add(
    name="formulation of overseas rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_ptt": 1,
        "historical_overseas_rate_pvc_ptt": 1,
    },
)
def formulation_of_overseas_rate_pvc_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pvc_ptt(),
        lambda: historical_overseas_rate_pvc_ptt(),
        lambda: 0,
    )


@component.add(
    name="Recycled chemically pp other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pp_other": 1},
    other_deps={
        "_integ_recycled_chemically_pp_other": {
            "initial": {},
            "step": {"chemical_recycling_pp_other": 1},
        }
    },
)
def recycled_chemically_pp_other():
    return _integ_recycled_chemically_pp_other()


_integ_recycled_chemically_pp_other = Integ(
    lambda: chemical_recycling_pp_other(),
    lambda: 0,
    "_integ_recycled_chemically_pp_other",
)


@component.add(
    name="Recycled chemically pp ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pp_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_pp_ptt": {
            "initial": {},
            "step": {"chemical_recycling_pp_ptt": 1},
        }
    },
)
def recycled_chemically_pp_ptt():
    return _integ_recycled_chemically_pp_ptt()


_integ_recycled_chemically_pp_ptt = Integ(
    lambda: chemical_recycling_pp_ptt(), lambda: 0, "_integ_recycled_chemically_pp_ptt"
)


@component.add(
    name="Recycled chemically ps bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ps_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_ps_bottle": {
            "initial": {},
            "step": {"chemical_recycling_ps_bottle": 1},
        }
    },
)
def recycled_chemically_ps_bottle():
    return _integ_recycled_chemically_ps_bottle()


_integ_recycled_chemically_ps_bottle = Integ(
    lambda: chemical_recycling_ps_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_ps_bottle",
)


@component.add(
    name="formulation for rate of recycling pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_other": 1,
        "historical_on_rate_of_recycling_pp_other": 1,
    },
)
def formulation_for_rate_of_recycling_pp_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pp_other(),
        lambda: historical_on_rate_of_recycling_pp_other(),
        lambda: 0,
    )


@component.add(
    name="rate of recycling reject pvc ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_ptt": 1,
        "time": 1,
        "historical_on_recycling_pvc_ptt": 2,
        "formulation_for_recycling_rate_pvc_ptt": 1,
    },
)
def rate_of_recycling_reject_pvc_ptt():
    return if_then_else(
        policy1_introduction_time_pvc_ptt() < time(),
        lambda: historical_on_recycling_pvc_ptt()
        * formulation_for_recycling_rate_pvc_ptt(),
        lambda: historical_on_recycling_pvc_ptt(),
    )


@component.add(
    name="Recycled chemically ps other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ps_other": 1},
    other_deps={
        "_integ_recycled_chemically_ps_other": {
            "initial": {},
            "step": {"chemical_recycling_ps_other": 1},
        }
    },
)
def recycled_chemically_ps_other():
    return _integ_recycled_chemically_ps_other()


_integ_recycled_chemically_ps_other = Integ(
    lambda: chemical_recycling_ps_other(),
    lambda: 0,
    "_integ_recycled_chemically_ps_other",
)


@component.add(
    name="formulation for rate of recycling ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_film": 1,
        "historical_on_rate_of_recycling_ps_film": 1,
    },
)
def formulation_for_rate_of_recycling_ps_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ps_film(),
        lambda: historical_on_rate_of_recycling_ps_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_other": 1,
        "historical_on_rate_of_recycling_ps_other": 1,
    },
)
def formulation_for_rate_of_recycling_ps_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ps_other(),
        lambda: historical_on_rate_of_recycling_ps_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_ptt": 1,
        "historical_on_rate_of_recycling_ps_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_ps_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ps_ptt(),
        lambda: historical_on_rate_of_recycling_ps_ptt(),
        lambda: 0,
    )


@component.add(
    name="Recycled chemically PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pvc_other": 1},
    other_deps={
        "_integ_recycled_chemically_pvc_other": {
            "initial": {},
            "step": {"chemical_recycling_pvc_other": 1},
        }
    },
)
def recycled_chemically_pvc_other():
    return _integ_recycled_chemically_pvc_other()


_integ_recycled_chemically_pvc_other = Integ(
    lambda: chemical_recycling_pvc_other(),
    lambda: 0,
    "_integ_recycled_chemically_pvc_other",
)


@component.add(
    name="formulation for rate of recycling pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_bottle": 1,
        "historical_on_rate_of_recycling_pvc_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_pvc_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pvc_bottle(),
        lambda: historical_on_rate_of_recycling_pvc_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_other": 1,
        "historical_on_rate_of_recycling_pvc_other": 1,
    },
)
def formulation_for_rate_of_recycling_pvc_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pvc_other(),
        lambda: historical_on_rate_of_recycling_pvc_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_ptt": 1,
        "historical_on_rate_of_recycling_pvc_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_pvc_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pvc_ptt(),
        lambda: historical_on_rate_of_recycling_pvc_ptt(),
        lambda: 0,
    )


@component.add(
    name="mismanagement PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pvc_other": 1, "rate_dumped_pvc_other": 1},
)
def mismanagement_pvc_other():
    return illegal_collection_pvc_other() * rate_dumped_pvc_other()


@component.add(
    name="rate of mechanical recycling pvc film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pvc_film():
    return 1


@component.add(
    name="rate of mechanical recycling PVC Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pvc_other():
    return 1


@component.add(
    name="Mechanical recycling pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pvc_bottle": 1,
        "domestic_recycling_pvc_bottle": 1,
    },
)
def mechanical_recycling_pvc_bottle():
    return rate_of_mechanical_recycling_pvc_bottle() * domestic_recycling_pvc_bottle()


@component.add(
    name="Waste generated ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ps_film": 1},
    other_deps={
        "_integ_waste_generated_ps_film": {
            "initial": {},
            "step": {
                "to_waste_generated_ps_film": 1,
                "illegal_collection_data_ps_film": 2,
                "littering_ps_film": 1,
                "formal_waste_collection_ps_film": 1,
            },
        }
    },
)
def waste_generated_ps_film():
    return _integ_waste_generated_ps_film()


_integ_waste_generated_ps_film = Integ(
    lambda: to_waste_generated_ps_film()
    - illegal_collection_data_ps_film()
    - littering_ps_film()
    - formal_waste_collection_ps_film()
    - illegal_collection_data_ps_film(),
    lambda: 1882.99,
    "_integ_waste_generated_ps_film",
)


@component.add(
    name="Waste generated pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pvc_film": 1},
    other_deps={
        "_integ_waste_generated_pvc_film": {
            "initial": {},
            "step": {
                "to_waste_generated_pvc_film": 1,
                "illegal_collection_data_pvc_film": 2,
                "littering_pvc_film": 1,
                "formal_waste_collection_pvc_film": 1,
            },
        }
    },
)
def waste_generated_pvc_film():
    return _integ_waste_generated_pvc_film()


_integ_waste_generated_pvc_film = Integ(
    lambda: to_waste_generated_pvc_film()
    - illegal_collection_data_pvc_film()
    - littering_pvc_film()
    - formal_waste_collection_pvc_film()
    - illegal_collection_data_pvc_film(),
    lambda: 8473.44,
    "_integ_waste_generated_pvc_film",
)


@component.add(
    name="rate dumped pvc bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pvc_bottle():
    return 0.006


@component.add(
    name="Recycling rejects pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pp_other": 1},
    other_deps={
        "_integ_recycling_rejects_pp_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_pp_other": 1},
        }
    },
)
def recycling_rejects_pp_other():
    return _integ_recycling_rejects_pp_other()


_integ_recycling_rejects_pp_other = Integ(
    lambda: recycling_rejects_rate_pp_other(),
    lambda: 0,
    "_integ_recycling_rejects_pp_other",
)


@component.add(
    name="rate dumped PVC Other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pvc_other():
    return 0.006


@component.add(
    name="Sent to landfill PVC Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pvc_other": 1,
        "domestic_residual_treatment_pvc_other": 1,
    },
)
def sent_to_landfill_pvc_other():
    return landfill_rate_pvc_other() * domestic_residual_treatment_pvc_other()


@component.add(
    name="formulation for recycling rate pp other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pp_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate pp ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pp_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="rate overseas PVC Other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_pvc_other": 1,
        "historical_overseas_rate_pvc_other": 1,
    },
)
def rate_overseas_pvc_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: formulation_of_overseas_rate_pvc_other(),
        lambda: historical_overseas_rate_pvc_other(),
    )


@component.add(
    name="formulation for recycling rate ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ps_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ps_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ps_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Recycling rejects PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pvc_other": 1},
    other_deps={
        "_integ_recycling_rejects_pvc_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_pvc_other": 1},
        }
    },
)
def recycling_rejects_pvc_other():
    return _integ_recycling_rejects_pvc_other()


_integ_recycling_rejects_pvc_other = Integ(
    lambda: recycling_rejects_rate_pvc_other(),
    lambda: 0,
    "_integ_recycling_rejects_pvc_other",
)


@component.add(
    name="formulation for recycling rate pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pvc_bottle():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Recycling rejects pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pvc_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_pvc_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_pvc_ptt": 1},
        }
    },
)
def recycling_rejects_pvc_ptt():
    return _integ_recycling_rejects_pvc_ptt()


_integ_recycling_rejects_pvc_ptt = Integ(
    lambda: recycling_rejects_rate_pvc_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_pvc_ptt",
)


@component.add(
    name="Recycled chemically ps film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ps_film": 1},
    other_deps={
        "_integ_recycled_chemically_ps_film": {
            "initial": {},
            "step": {"chemical_recycling_ps_film": 1},
        }
    },
)
def recycled_chemically_ps_film():
    return _integ_recycled_chemically_ps_film()


_integ_recycled_chemically_ps_film = Integ(
    lambda: chemical_recycling_ps_film(),
    lambda: 0,
    "_integ_recycled_chemically_ps_film",
)


@component.add(
    name="formulation for recycling rate pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pvc_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="wmc historical ps film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ps_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ps_other": 1, "rate_dumped_ps_other": 1},
)
def mismanagement_ps_other():
    return illegal_collection_ps_other() * rate_dumped_ps_other()


@component.add(
    name="rate to illegal collection ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ps_film():
    return 0.006


@component.add(
    name="rate of recycling PVC Other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pvc_other": 1,
        "historical_on_rate_of_recycling_pvc_other": 1,
    },
)
def rate_of_recycling_pvc_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pvc_other() < time(),
        lambda: formulation_for_rate_of_recycling_pvc_other(),
        lambda: historical_on_rate_of_recycling_pvc_other(),
    )


@component.add(
    name="Mechanical recycling pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pp_other": 1,
        "domestic_recycling_pp_other": 1,
    },
)
def mechanical_recycling_pp_other():
    return rate_of_mechanical_recycling_pp_other() * domestic_recycling_pp_other()


@component.add(
    name="Mechanical recycling pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pp_ptt": 1,
        "domestic_recycling_pp_ptt": 1,
    },
)
def mechanical_recycling_pp_ptt():
    return rate_of_mechanical_recycling_pp_ptt() * domestic_recycling_pp_ptt()


@component.add(
    name="Mechanical recycling ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ps_bottle": 1,
        "domestic_recycling_ps_bottle": 1,
    },
)
def mechanical_recycling_ps_bottle():
    return rate_of_mechanical_recycling_ps_bottle() * domestic_recycling_ps_bottle()


@component.add(
    name="wmc collected formulation ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ps_film():
    return 0.25


@component.add(
    name="Mechanical recycling ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ps_other": 1,
        "domestic_recycling_ps_other": 1,
    },
)
def mechanical_recycling_ps_other():
    return rate_of_mechanical_recycling_ps_other() * domestic_recycling_ps_other()


@component.add(
    name="Mechanical recycling ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ps_ptt": 1,
        "domestic_recycling_ps_ptt": 1,
    },
)
def mechanical_recycling_ps_ptt():
    return rate_of_mechanical_recycling_ps_ptt() * domestic_recycling_ps_ptt()


@component.add(
    name="wmc collected formulation pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pvc_bottle():
    return 0.25


@component.add(
    name="Mechanical recycling pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pvc_film": 1,
        "domestic_recycling_pvc_film": 1,
    },
)
def mechanical_recycling_pvc_film():
    return rate_of_mechanical_recycling_pvc_film() * domestic_recycling_pvc_film()


@component.add(
    name="Mechanical recycling PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pvc_other": 1,
        "domestic_recycling_pvc_other": 1,
    },
)
def mechanical_recycling_pvc_other():
    return rate_of_mechanical_recycling_pvc_other() * domestic_recycling_pvc_other()


@component.add(
    name="Mechanical recycling pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pvc_ptt": 1,
        "domestic_recycling_pvc_ptt": 1,
    },
)
def mechanical_recycling_pvc_ptt():
    return rate_of_mechanical_recycling_pvc_ptt() * domestic_recycling_pvc_ptt()


@component.add(
    name="recycling rejects rate pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pp_other": 1, "sorting_pp_other": 1},
)
def recycling_rejects_rate_pp_other():
    return rate_of_recycling_reject_pp_other() * sorting_pp_other()


@component.add(
    name="recycling rejects rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pp_ptt": 1, "sorting_pp_ptt": 1},
)
def recycling_rejects_rate_pp_ptt():
    return rate_of_recycling_reject_pp_ptt() * sorting_pp_ptt()


@component.add(
    name="recycling rejects rate ps bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ps_bottle": 1, "sorting_ps_bottle": 1},
)
def recycling_rejects_rate_ps_bottle():
    return rate_of_recycling_reject_ps_bottle() * sorting_ps_bottle()


@component.add(
    name="recycling rejects rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ps_film": 1, "sorting_ps_film": 1},
)
def recycling_rejects_rate_ps_film():
    return rate_of_recycling_reject_ps_film() * sorting_ps_film()


@component.add(
    name="Rate of chemical recycling pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pvc_ptt():
    return 0


@component.add(
    name="recycling rejects rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ps_ptt": 1, "sorting_ps_ptt": 1},
)
def recycling_rejects_rate_ps_ptt():
    return rate_of_recycling_reject_ps_ptt() * sorting_ps_ptt()


@component.add(
    name="rate sent for domestic recycling pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pvc_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pvc_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="recycling rejects rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pvc_bottle": 1, "sorting_pvc_bottle": 1},
)
def recycling_rejects_rate_pvc_bottle():
    return rate_of_recycling_reject_pvc_bottle() * sorting_pvc_bottle()


@component.add(
    name="formulation of overseas rate ps film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_film": 1,
        "historical_overseas_rate_ps_film": 1,
    },
)
def formulation_of_overseas_rate_ps_film():
    return if_then_else(
        time() > policy1_introduction_time_ps_film(),
        lambda: historical_overseas_rate_ps_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_other": 1,
        "historical_overseas_rate_ps_other": 1,
    },
)
def formulation_of_overseas_rate_ps_other():
    return if_then_else(
        time() > policy1_introduction_time_ps_other(),
        lambda: historical_overseas_rate_ps_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ps_ptt": 1,
        "historical_overseas_rate_ps_ptt": 1,
    },
)
def formulation_of_overseas_rate_ps_ptt():
    return if_then_else(
        time() > policy1_introduction_time_ps_ptt(),
        lambda: historical_overseas_rate_ps_ptt(),
        lambda: 0,
    )


@component.add(
    name="Waste collected sent to formal domestic treatment pvc ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pvc_ptt": 1, "waste_collected_pvc_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pvc_ptt():
    return sent_for_formal_domestic_pvc_ptt() * waste_collected_pvc_ptt()


@component.add(
    name="Overseas treatment ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ps_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_ps_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ps_ptt": 1},
        }
    },
)
def overseas_treatment_ps_ptt():
    return _integ_overseas_treatment_ps_ptt()


_integ_overseas_treatment_ps_ptt = Integ(
    lambda: sent_for_overseas_treatment_ps_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_ps_ptt",
)


@component.add(
    name="Sent to incineration ps other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ps_other": 1,
        "domestic_residual_treatment_ps_other": 1,
    },
)
def sent_to_incineration_ps_other():
    return incineration_rate_ps_other() * domestic_residual_treatment_ps_other()


@component.add(
    name="formulation of overseas rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pvc_other": 1,
        "historical_overseas_rate_pvc_other": 1,
    },
)
def formulation_of_overseas_rate_pvc_other():
    return if_then_else(
        time() > policy1_introduction_time_pvc_other(),
        lambda: historical_overseas_rate_pvc_other(),
        lambda: 0,
    )


@component.add(
    name="Recycling rejects ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ps_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_ps_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_ps_ptt": 1},
        }
    },
)
def recycling_rejects_ps_ptt():
    return _integ_recycling_rejects_ps_ptt()


_integ_recycling_rejects_ps_ptt = Integ(
    lambda: recycling_rejects_rate_ps_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_ps_ptt",
)


@component.add(
    name="Overseas treament rate pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pp_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Sent to incineration pvc film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pvc_film": 1,
        "domestic_residual_treatment_pvc_film": 1,
    },
)
def sent_to_incineration_pvc_film():
    return incineration_rate_pvc_film() * domestic_residual_treatment_pvc_film()


@component.add(
    name="Sent to incineration PVC Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pvc_other": 1,
        "domestic_residual_treatment_pvc_other": 1,
    },
)
def sent_to_incineration_pvc_other():
    return incineration_rate_pvc_other() * domestic_residual_treatment_pvc_other()


@component.add(
    name="Overseas treament rate ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ps_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="wmc historical pp other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pp_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pp_other": 1, "rate_dumped_pp_other": 1},
)
def mismanagement_pp_other():
    return illegal_collection_pp_other() * rate_dumped_pp_other()


@component.add(
    name="wmc historical pp ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pp_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc historical ps bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ps_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="sent for sorting pp other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pp_other": 1,
        "sent_for_sorting_rate_pp_other": 1,
    },
)
def sent_for_sorting_pp_other():
    return formal_domestic_treatment_pp_other() * sent_for_sorting_rate_pp_other()


@component.add(
    name="rvm historical ps other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ps_other():
    return 0


@component.add(
    name="mismanagement ps ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ps_ptt": 1, "rate_dumped_ps_ptt": 1},
)
def mismanagement_ps_ptt():
    return illegal_collection_ps_ptt() * rate_dumped_ps_ptt()


@component.add(
    name="wmc historical pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pvc_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pvc_bottle": 1, "rate_dumped_pvc_bottle": 1},
)
def mismanagement_pvc_bottle():
    return illegal_collection_pvc_bottle() * rate_dumped_pvc_bottle()


@component.add(
    name="mismanagement pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pvc_film": 1, "rate_dumped_pvc_film": 1},
)
def mismanagement_pvc_film():
    return illegal_collection_pvc_film() * rate_dumped_pvc_film()


@component.add(
    name="wmc historical pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pvc_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate sent for reuse ps other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ps_other():
    return 0


@component.add(
    name="rate sent for reuse pvc film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pvc_film():
    return 0


@component.add(
    name="residual rate pvc bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pvc_bottle():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="Waste collected sent to formal domestic treatment ps bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_ps_bottle": 1,
        "waste_collected_ps_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_ps_bottle():
    return sent_for_formal_domestic_ps_bottle() * waste_collected_ps_bottle()


@component.add(
    name="rate dumped ps other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ps_other():
    return 0.006


@component.add(
    name="rate dumped ps ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ps_ptt():
    return 0.006


@component.add(
    name="Waste generated pvc ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pvc_ptt": 1},
    other_deps={
        "_integ_waste_generated_pvc_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_pvc_ptt": 1,
                "illegal_collection_data_pvc_ptt": 2,
                "littering_pvc_ptt": 1,
                "formal_waste_collection_pvc_ptt": 1,
            },
        }
    },
)
def waste_generated_pvc_ptt():
    return _integ_waste_generated_pvc_ptt()


_integ_waste_generated_pvc_ptt = Integ(
    lambda: to_waste_generated_pvc_ptt()
    - illegal_collection_data_pvc_ptt()
    - littering_pvc_ptt()
    - formal_waste_collection_pvc_ptt()
    - illegal_collection_data_pvc_ptt(),
    lambda: 12239.4,
    "_integ_waste_generated_pvc_ptt",
)


@component.add(
    name="rate overseas ps other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_ps_other": 1,
        "historical_overseas_rate_ps_other": 1,
    },
)
def rate_overseas_ps_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: formulation_of_overseas_rate_ps_other(),
        lambda: historical_overseas_rate_ps_other(),
    )


@component.add(
    name="Overseas treatment ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ps_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_ps_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ps_bottle": 1},
        }
    },
)
def overseas_treatment_ps_bottle():
    return _integ_overseas_treatment_ps_bottle()


_integ_overseas_treatment_ps_bottle = Integ(
    lambda: sent_for_overseas_treatment_ps_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_ps_bottle",
)


@component.add(
    name="Overseas treatment ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ps_film": 1},
    other_deps={
        "_integ_overseas_treatment_ps_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ps_film": 1},
        }
    },
)
def overseas_treatment_ps_film():
    return _integ_overseas_treatment_ps_film()


_integ_overseas_treatment_ps_film = Integ(
    lambda: sent_for_overseas_treatment_ps_film(),
    lambda: 0,
    "_integ_overseas_treatment_ps_film",
)


@component.add(
    name="Sent to landfill pvc ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pvc_ptt": 1, "domestic_residual_treatment_pvc_ptt": 1},
)
def sent_to_landfill_pvc_ptt():
    return landfill_rate_pvc_ptt() * domestic_residual_treatment_pvc_ptt()


@component.add(
    name="rate overseas pvc film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pvc_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_pvc_film": 1,
        "historical_overseas_rate_pvc_film": 1,
    },
)
def rate_overseas_pvc_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pvc_film() < time(),
        lambda: formulation_of_overseas_rate_pvc_film(),
        lambda: historical_overseas_rate_pvc_film(),
    )


@component.add(
    name="Recycling rejects ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ps_other": 1},
    other_deps={
        "_integ_recycling_rejects_ps_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_ps_other": 1},
        }
    },
)
def recycling_rejects_ps_other():
    return _integ_recycling_rejects_ps_other()


_integ_recycling_rejects_ps_other = Integ(
    lambda: recycling_rejects_rate_ps_other(),
    lambda: 0,
    "_integ_recycling_rejects_ps_other",
)


@component.add(
    name="Sent to incineration ps ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"incineration_rate_ps_ptt": 1, "domestic_residual_treatment_ps_ptt": 1},
)
def sent_to_incineration_ps_ptt():
    return incineration_rate_ps_ptt() * domestic_residual_treatment_ps_ptt()


@component.add(
    name="wmc collected formulation ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ps_other():
    return 0.25


@component.add(
    name="Recycling rejects pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pvc_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_pvc_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_pvc_bottle": 1},
        }
    },
)
def recycling_rejects_pvc_bottle():
    return _integ_recycling_rejects_pvc_bottle()


_integ_recycling_rejects_pvc_bottle = Integ(
    lambda: recycling_rejects_rate_pvc_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_pvc_bottle",
)


@component.add(
    name="sent for formal domestic ps other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ps_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Overseas treament rate ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ps_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Waste collected pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pvc_film": 1},
    other_deps={
        "_integ_waste_collected_pvc_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_pvc_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pvc_film": 1,
            },
        }
    },
)
def waste_collected_pvc_film():
    return _integ_waste_collected_pvc_film()


_integ_waste_collected_pvc_film = Integ(
    lambda: formal_waste_collection_pvc_film()
    - waste_collected_sent_to_formal_domestic_treatment_pvc_film(),
    lambda: 8083,
    "_integ_waste_collected_pvc_film",
)


@component.add(
    name="Waste collected PVC Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pvc_other": 1},
    other_deps={
        "_integ_waste_collected_pvc_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_pvc_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pvc_other": 1,
            },
        }
    },
)
def waste_collected_pvc_other():
    return _integ_waste_collected_pvc_other()


_integ_waste_collected_pvc_other = Integ(
    lambda: formal_waste_collection_pvc_other()
    - waste_collected_sent_to_formal_domestic_treatment_pvc_other(),
    lambda: 2694,
    "_integ_waste_collected_pvc_other",
)


@component.add(
    name="Overseas treament rate pvc bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pvc_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="sent for formal domestic PVC Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pvc_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="rate of recycling ps other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ps_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ps_other": 1,
        "historical_on_rate_of_recycling_ps_other": 1,
    },
)
def rate_of_recycling_ps_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ps_other() < time(),
        lambda: formulation_for_rate_of_recycling_ps_other(),
        lambda: historical_on_rate_of_recycling_ps_other(),
    )


@component.add(
    name="littering rate historical data PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pvc_other():
    return 0.04


@component.add(
    name="Recycled chemically pvc bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pvc_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_pvc_bottle": {
            "initial": {},
            "step": {"chemical_recycling_pvc_bottle": 1},
        }
    },
)
def recycled_chemically_pvc_bottle():
    return _integ_recycled_chemically_pvc_bottle()


_integ_recycled_chemically_pvc_bottle = Integ(
    lambda: chemical_recycling_pvc_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_pvc_bottle",
)


@component.add(
    name="Recycled chemically pvc ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pvc_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_pvc_ptt": {
            "initial": {},
            "step": {"chemical_recycling_pvc_ptt": 1},
        }
    },
)
def recycled_chemically_pvc_ptt():
    return _integ_recycled_chemically_pvc_ptt()


_integ_recycled_chemically_pvc_ptt = Integ(
    lambda: chemical_recycling_pvc_ptt(),
    lambda: 0,
    "_integ_recycled_chemically_pvc_ptt",
)


@component.add(
    name="rate to illegal collection ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ps_other():
    return 0.006


@component.add(
    name="Sent for residual treatment pp other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pp_other": 1, "residual_rate_pp_other": 1},
)
def sent_for_residual_treatment_pp_other():
    return formal_domestic_treatment_pp_other() * residual_rate_pp_other()


@component.add(
    name="rate of mechanical recycling ps ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ps_ptt():
    return 1


@component.add(
    name="rate to illegal collection pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pvc_ptt():
    return 0.006


@component.add(
    name="Rate of chemical recycling ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ps_ptt():
    return 0


@component.add(
    name="Sorting ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ps_ptt": 1},
    other_deps={
        "_integ_sorting_ps_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_ps_ptt": 1,
                "sent_for_recycling_ps_ptt": 1,
                "recycling_rejects_rate_ps_ptt": 1,
                "sent_for_overseas_treatment_ps_ptt": 1,
            },
        }
    },
)
def sorting_ps_ptt():
    return _integ_sorting_ps_ptt()


_integ_sorting_ps_ptt = Integ(
    lambda: sent_for_sorting_ps_ptt()
    - sent_for_recycling_ps_ptt()
    - recycling_rejects_rate_ps_ptt()
    - sent_for_overseas_treatment_ps_ptt(),
    lambda: 23306,
    "_integ_sorting_ps_ptt",
)


@component.add(
    name="Sent for residual treatment PVC Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pvc_other": 1, "residual_rate_pvc_other": 1},
)
def sent_for_residual_treatment_pvc_other():
    return formal_domestic_treatment_pvc_other() * residual_rate_pvc_other()


@component.add(
    name="rate sent for domestic recycling ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ps_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Rate of chemical recycling PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pvc_other():
    return 0


@component.add(
    name="Waste collected sent to formal domestic treatment ps other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_ps_other": 1, "waste_collected_ps_other": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_ps_other():
    return sent_for_formal_domestic_ps_other() * waste_collected_ps_other()


@component.add(
    name="sent for sorting pp ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pp_ptt": 1,
        "sent_for_sorting_rate_pp_ptt": 1,
    },
)
def sent_for_sorting_pp_ptt():
    return formal_domestic_treatment_pp_ptt() * sent_for_sorting_rate_pp_ptt()


@component.add(
    name="wmc historical ps other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ps_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="Overseas treatment pp ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pp_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_pp_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pp_ptt": 1},
        }
    },
)
def overseas_treatment_pp_ptt():
    return _integ_overseas_treatment_pp_ptt()


_integ_overseas_treatment_pp_ptt = Integ(
    lambda: sent_for_overseas_treatment_pp_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_pp_ptt",
)


@component.add(
    name="rate dumped pvc film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pvc_film():
    return 0.006


@component.add(
    name="recycling rejects rate PVC Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pvc_other": 1, "sorting_pvc_other": 1},
)
def recycling_rejects_rate_pvc_other():
    return rate_of_recycling_reject_pvc_other() * sorting_pvc_other()


@component.add(
    name="Sent for overseas treatment ps other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ps_other": 1, "sorting_ps_other": 1},
)
def sent_for_overseas_treatment_ps_other():
    return overseas_treament_rate_ps_other() * sorting_ps_other()


@component.add(
    name="Waste collected sent to formal domestic treatment PVC Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pvc_other": 1,
        "waste_collected_pvc_other": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pvc_other():
    return sent_for_formal_domestic_pvc_other() * waste_collected_pvc_other()


@component.add(
    name="Recycling rejects ps film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ps_film": 1},
    other_deps={
        "_integ_recycling_rejects_ps_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_ps_film": 1},
        }
    },
)
def recycling_rejects_ps_film():
    return _integ_recycling_rejects_ps_film()


_integ_recycling_rejects_ps_film = Integ(
    lambda: recycling_rejects_rate_ps_film(),
    lambda: 0,
    "_integ_recycling_rejects_ps_film",
)


@component.add(
    name="recycling rejects rate pvc ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pvc_ptt": 1, "sorting_pvc_ptt": 1},
)
def recycling_rejects_rate_pvc_ptt():
    return rate_of_recycling_reject_pvc_ptt() * sorting_pvc_ptt()


@component.add(
    name="rate to illegal collection pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pvc_film():
    return 0.006


@component.add(
    name="wmc collected formulation ps ptt", comp_type="Constant", comp_subtype="Normal"
)
def wmc_collected_formulation_ps_ptt():
    return 0.25


@component.add(
    name="Recycling rejects pvc film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pvc_film": 1},
    other_deps={
        "_integ_recycling_rejects_pvc_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_pvc_film": 1},
        }
    },
)
def recycling_rejects_pvc_film():
    return _integ_recycling_rejects_pvc_film()


_integ_recycling_rejects_pvc_film = Integ(
    lambda: recycling_rejects_rate_pvc_film(),
    lambda: 0,
    "_integ_recycling_rejects_pvc_film",
)


@component.add(
    name="rate sent for reuse PVC Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pvc_other():
    return 0


@component.add(
    name="Waste generated ps other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ps_other": 1},
    other_deps={
        "_integ_waste_generated_ps_other": {
            "initial": {},
            "step": {
                "to_waste_generated_ps_other": 1,
                "illegal_collection_data_ps_other": 2,
                "littering_ps_other": 1,
                "formal_waste_collection_ps_other": 1,
            },
        }
    },
)
def waste_generated_ps_other():
    return _integ_waste_generated_ps_other()


_integ_waste_generated_ps_other = Integ(
    lambda: to_waste_generated_ps_other()
    - illegal_collection_data_ps_other()
    - littering_ps_other()
    - formal_waste_collection_ps_other()
    - illegal_collection_data_ps_other(),
    lambda: 3765.97,
    "_integ_waste_generated_ps_other",
)


@component.add(
    name="Recycled chemically ps ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ps_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_ps_ptt": {
            "initial": {},
            "step": {"chemical_recycling_ps_ptt": 1},
        }
    },
)
def recycled_chemically_ps_ptt():
    return _integ_recycled_chemically_ps_ptt()


_integ_recycled_chemically_ps_ptt = Integ(
    lambda: chemical_recycling_ps_ptt(), lambda: 0, "_integ_recycled_chemically_ps_ptt"
)


@component.add(
    name="Rate of chemical recycling pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pvc_bottle():
    return 0


@component.add(
    name="Waste generated pvc bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pvc_bottle": 1},
    other_deps={
        "_integ_waste_generated_pvc_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_pvc_bottle": 1,
                "illegal_collection_data_pvc_bottle": 2,
                "littering_pvc_bottle": 1,
                "formal_waste_collection_pvc_bottle": 1,
            },
        }
    },
)
def waste_generated_pvc_bottle():
    return _integ_waste_generated_pvc_bottle()


_integ_waste_generated_pvc_bottle = Integ(
    lambda: to_waste_generated_pvc_bottle()
    - illegal_collection_data_pvc_bottle()
    - littering_pvc_bottle()
    - formal_waste_collection_pvc_bottle()
    - illegal_collection_data_pvc_bottle(),
    lambda: 0,
    "_integ_waste_generated_pvc_bottle",
)


@component.add(
    name="Waste generated PVC Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pvc_other": 1},
    other_deps={
        "_integ_waste_generated_pvc_other": {
            "initial": {},
            "step": {
                "to_waste_generated_pvc_other": 1,
                "illegal_collection_data_pvc_other": 2,
                "littering_pvc_other": 1,
                "formal_waste_collection_pvc_other": 1,
            },
        }
    },
)
def waste_generated_pvc_other():
    return _integ_waste_generated_pvc_other()


_integ_waste_generated_pvc_other = Integ(
    lambda: to_waste_generated_pvc_other()
    - illegal_collection_data_pvc_other()
    - littering_pvc_other()
    - formal_waste_collection_pvc_other()
    - illegal_collection_data_pvc_other(),
    lambda: 2824.48,
    "_integ_waste_generated_pvc_other",
)


@component.add(
    name="rvm historical pvc film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pvc_film():
    return 0


@component.add(
    name="rvm historical PVC Other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pvc_other():
    return 0


@component.add(
    name="rate of mechanical recycling ps other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ps_other():
    return 1


@component.add(
    name="Waste generated ps ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ps_ptt": 1},
    other_deps={
        "_integ_waste_generated_ps_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_ps_ptt": 1,
                "illegal_collection_data_ps_ptt": 2,
                "littering_ps_ptt": 1,
                "formal_waste_collection_ps_ptt": 1,
            },
        }
    },
)
def waste_generated_ps_ptt():
    return _integ_waste_generated_ps_ptt()


_integ_waste_generated_ps_ptt = Integ(
    lambda: to_waste_generated_ps_ptt()
    - illegal_collection_data_ps_ptt()
    - littering_ps_ptt()
    - formal_waste_collection_ps_ptt()
    - illegal_collection_data_ps_ptt(),
    lambda: 53665.1,
    "_integ_waste_generated_ps_ptt",
)


@component.add(
    name="Sent for residual treatment pp ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pp_ptt": 1, "residual_rate_pp_ptt": 1},
)
def sent_for_residual_treatment_pp_ptt():
    return formal_domestic_treatment_pp_ptt() * residual_rate_pp_ptt()


@component.add(
    name="rate to illegal collection pvc bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pvc_bottle():
    return 0.006


@component.add(
    name="Rate of chemical recycling ps other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ps_other():
    return 0


@component.add(
    name="wmc collected formulation ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ps_bottle():
    return 0.25


@component.add(
    name="wmc collected formulation pp ptt", comp_type="Constant", comp_subtype="Normal"
)
def wmc_collected_formulation_pp_ptt():
    return 0.25


@component.add(
    name="Rate of chemical recycling ps film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ps_film():
    return 0


@component.add(
    name="Illegal collection pp other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pp_other": 1},
    other_deps={
        "_integ_illegal_collection_pp_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_pp_other": 1,
                "mismanagement_pp_other": 1,
            },
        }
    },
)
def illegal_collection_pp_other():
    return _integ_illegal_collection_pp_other()


_integ_illegal_collection_pp_other = Integ(
    lambda: illegal_collection_data_pp_other() - mismanagement_pp_other(),
    lambda: 446,
    "_integ_illegal_collection_pp_other",
)


@component.add(
    name="recycling rejects rate pvc film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pvc_film": 1, "sorting_pvc_film": 1},
)
def recycling_rejects_rate_pvc_film():
    return rate_of_recycling_reject_pvc_film() * sorting_pvc_film()


@component.add(
    name="wmc collected formulation pvc ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pvc_ptt():
    return 0.25


@component.add(
    name="wmc collected formulation pvc film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pvc_film():
    return 0.25


@component.add(
    name="rate to illegal collection ps ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ps_ptt():
    return 0.006


@component.add(
    name="Recycled chemically pvc film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pvc_film": 1},
    other_deps={
        "_integ_recycled_chemically_pvc_film": {
            "initial": {},
            "step": {"chemical_recycling_pvc_film": 1},
        }
    },
)
def recycled_chemically_pvc_film():
    return _integ_recycled_chemically_pvc_film()


_integ_recycled_chemically_pvc_film = Integ(
    lambda: chemical_recycling_pvc_film(),
    lambda: 0,
    "_integ_recycled_chemically_pvc_film",
)


@component.add(
    name="Waste generated ps bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ps_bottle": 1},
    other_deps={
        "_integ_waste_generated_ps_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_ps_bottle": 1,
                "illegal_collection_data_ps_bottle": 2,
                "littering_ps_bottle": 1,
                "formal_waste_collection_ps_bottle": 1,
            },
        }
    },
)
def waste_generated_ps_bottle():
    return _integ_waste_generated_ps_bottle()


_integ_waste_generated_ps_bottle = Integ(
    lambda: to_waste_generated_ps_bottle()
    - illegal_collection_data_ps_bottle()
    - littering_ps_bottle()
    - formal_waste_collection_ps_bottle()
    - illegal_collection_data_ps_bottle(),
    lambda: 0,
    "_integ_waste_generated_ps_bottle",
)


@component.add(
    name="wmc historical PVC Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pvc_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="Rate of chemical recycling ps bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ps_bottle():
    return 0


@component.add(
    name="wmc historical ps ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ps_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="sent for formal domestic pvc film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pvc_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="wmc historical pvc film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pvc_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc collected formulation PVC Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pvc_other():
    return 0.25


@component.add(
    name="historical data for la collected other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="Overseas treament rate pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pet_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="historical on rate of recycling idpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_idpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Overseas treament rate pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pp_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pp_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="historical on rate of recycling other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Actual la collected ldpe bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_ldpe_bottle": 1,
        "historical_data_for_la_collected_ldpe_bottle": 1,
    },
)
def actual_la_collected_ldpe_bottle():
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: formulation_for_la_collected_ldpe_bottle(),
        lambda: historical_data_for_la_collected_ldpe_bottle(),
    )


@component.add(
    name="Actual la collected ldpe film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "formulation_for_la_collected_idpe_film": 1,
        "historical_data_for_la_collected_ldpe_film": 1,
    },
)
def actual_la_collected_ldpe_film():
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: formulation_for_la_collected_idpe_film(),
        lambda: historical_data_for_la_collected_ldpe_film(),
    )


@component.add(
    name="Actual la collected ldpe other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "formulation_for_la_collected_ldpe_other": 1,
        "historical_data_for_la_collected_ldpe_other": 1,
    },
)
def actual_la_collected_ldpe_other():
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: formulation_for_la_collected_ldpe_other(),
        lambda: historical_data_for_la_collected_ldpe_other(),
    )


@component.add(
    name="Actual la collected ldpe ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_ldpe_ptt": 1,
        "historical_data_for_la_collected_ldpe_ptt": 1,
    },
)
def actual_la_collected_ldpe_ptt():
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: formulation_for_la_collected_ldpe_ptt(),
        lambda: historical_data_for_la_collected_ldpe_ptt(),
    )


@component.add(
    name="Actual la collected other bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_other_bottle": 1,
        "historical_data_for_la_collected_other_bottle": 1,
    },
)
def actual_la_collected_other_bottle():
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: formulation_for_la_collected_other_bottle(),
        lambda: historical_data_for_la_collected_other_bottle(),
    )


@component.add(
    name="Actual la collected other film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "formulation_for_la_collected_other_film": 1,
        "historical_data_for_la_collected_other_film": 1,
    },
)
def actual_la_collected_other_film():
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: formulation_for_la_collected_other_film(),
        lambda: historical_data_for_la_collected_other_film(),
    )


@component.add(
    name="Actual la collected other other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "formulation_for_la_collected_other_other": 1,
        "historical_data_for_la_collected_other_other": 1,
    },
)
def actual_la_collected_other_other():
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: formulation_for_la_collected_other_other(),
        lambda: historical_data_for_la_collected_other_other(),
    )


@component.add(
    name="Actual la collected Other PTT",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_other_ptt": 1,
        "historical_data_for_la_collected_other_ptt": 1,
    },
)
def actual_la_collected_other_ptt():
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: formulation_for_la_collected_other_ptt(),
        lambda: historical_data_for_la_collected_other_ptt(),
    )


@component.add(
    name="Actual la collected pe film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "formulation_for_la_collected_pe_film": 1,
        "historical_data_for_la_collected_pe_film": 1,
    },
)
def actual_la_collected_pe_film():
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: formulation_for_la_collected_pe_film(),
        lambda: historical_data_for_la_collected_pe_film(),
    )


@component.add(
    name="Actual la collected pe other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "formulation_for_la_collected_pe_other": 1,
        "historical_data_for_la_collected_pe_other": 1,
    },
)
def actual_la_collected_pe_other():
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: formulation_for_la_collected_pe_other(),
        lambda: historical_data_for_la_collected_pe_other(),
    )


@component.add(
    name="Actual la collected pe ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_pe_ptt": 1,
        "historical_data_for_la_collected_pe_ptt": 1,
    },
)
def actual_la_collected_pe_ptt():
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: formulation_for_la_collected_pe_ptt(),
        lambda: historical_data_for_la_collected_pe_ptt(),
    )


@component.add(
    name="Overseas treatment pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pe_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_pe_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pe_ptt": 1},
        }
    },
)
def overseas_treatment_pe_ptt():
    return _integ_overseas_treatment_pe_ptt()


_integ_overseas_treatment_pe_ptt = Integ(
    lambda: sent_for_overseas_treatment_pe_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_pe_ptt",
)


@component.add(
    name="Overseas treatment pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pet_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_pet_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pet_bottle": 1},
        }
    },
)
def overseas_treatment_pet_bottle():
    return _integ_overseas_treatment_pet_bottle()


_integ_overseas_treatment_pet_bottle = Integ(
    lambda: sent_for_overseas_treatment_pet_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_pet_bottle",
)


@component.add(
    name="rvm historical ldpe ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ldpe_ptt():
    return 0


@component.add(
    name="Actual la collected pp film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "formulation_for_la_collected_pp_film": 1,
        "historical_data_for_la_collected_pp_film": 1,
    },
)
def actual_la_collected_pp_film():
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: formulation_for_la_collected_pp_film(),
        lambda: historical_data_for_la_collected_pp_film(),
    )


@component.add(
    name="Actual la collected pp bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_pp_bottle": 1,
        "historical_data_for_la_collected_pp_bottle": 1,
    },
)
def actual_la_collected_pp_bottle():
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: formulation_for_la_collected_pp_bottle(),
        lambda: historical_data_for_la_collected_pp_bottle(),
    )


@component.add(
    name="Overseas treatment pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pp_film": 1},
    other_deps={
        "_integ_overseas_treatment_pp_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pp_film": 1},
        }
    },
)
def overseas_treatment_pp_film():
    return _integ_overseas_treatment_pp_film()


_integ_overseas_treatment_pp_film = Integ(
    lambda: sent_for_overseas_treatment_pp_film(),
    lambda: 0,
    "_integ_overseas_treatment_pp_film",
)


@component.add(
    name="Overseas treatment pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pp_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_pp_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pp_bottle": 1},
        }
    },
)
def overseas_treatment_pp_bottle():
    return _integ_overseas_treatment_pp_bottle()


_integ_overseas_treatment_pp_bottle = Integ(
    lambda: sent_for_overseas_treatment_pp_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_pp_bottle",
)


@component.add(
    name="historical on recycling other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_other_bottle():
    return 0.103


@component.add(
    name="historical on recycling other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_other_film():
    return 0.103


@component.add(
    name="historical on recycling other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_other_other():
    return 0.103


@component.add(
    name="historical on recycling Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_other_ptt():
    return 0.103


@component.add(
    name="historical on recycling pe film", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pe_film():
    return 0.103


@component.add(
    name="Actual rvm collected ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_ldpe_bottle": 1,
        "rvm_historical_ldpe_bottle": 1,
    },
)
def actual_rvm_collected_ldpe_bottle():
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: rvm_collected_formulation_ldpe_bottle(),
        lambda: rvm_historical_ldpe_bottle(),
    )


@component.add(
    name="Actual rvm collected ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "rvm_collected_formulation_idpe_film": 1,
        "rvm_historical_ldpe_film": 1,
    },
)
def actual_rvm_collected_ldpe_film():
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: rvm_collected_formulation_idpe_film(),
        lambda: rvm_historical_ldpe_film(),
    )


@component.add(
    name="Actual rvm collected ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "rvm_collected_formulation_ldpe_other": 1,
        "rvm_historical_ldpe_other": 1,
    },
)
def actual_rvm_collected_ldpe_other():
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: rvm_collected_formulation_ldpe_other(),
        lambda: rvm_historical_ldpe_other(),
    )


@component.add(
    name="Actual rvm collected ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_ldpe_ptt": 1,
        "rvm_historical_ldpe_ptt": 1,
    },
)
def actual_rvm_collected_ldpe_ptt():
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: rvm_collected_formulation_ldpe_ptt(),
        lambda: rvm_historical_ldpe_ptt(),
    )


@component.add(
    name="Actual rvm collected other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_other_bottle": 1,
        "rvm_historical_other_bottle": 1,
    },
)
def actual_rvm_collected_other_bottle():
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: rvm_collected_formulation_other_bottle(),
        lambda: rvm_historical_other_bottle(),
    )


@component.add(
    name="Actual rvm collected other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "rvm_collected_formulation_other_film": 1,
        "rvm_historical_other_film": 1,
    },
)
def actual_rvm_collected_other_film():
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: rvm_collected_formulation_other_film(),
        lambda: rvm_historical_other_film(),
    )


@component.add(
    name="Actual rvm collected other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "rvm_collected_formulation_other_other": 1,
        "rvm_historical_other_other": 1,
    },
)
def actual_rvm_collected_other_other():
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: rvm_collected_formulation_other_other(),
        lambda: rvm_historical_other_other(),
    )


@component.add(
    name="Actual rvm collected Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_other_ptt": 1,
        "rvm_historical_other_ptt": 1,
    },
)
def actual_rvm_collected_other_ptt():
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: rvm_collected_formulation_other_ptt(),
        lambda: rvm_historical_other_ptt(),
    )


@component.add(
    name="Actual rvm collected pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "rvm_collected_formulation_pe_film": 1,
        "rvm_historical_pe_film": 1,
    },
)
def actual_rvm_collected_pe_film():
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: rvm_collected_formulation_pe_film(),
        lambda: rvm_historical_pe_film(),
    )


@component.add(
    name="Actual rvm collected pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "rvm_collected_formulation_pe_other": 1,
        "rvm_historical_pe_other": 1,
    },
)
def actual_rvm_collected_pe_other():
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: rvm_collected_formulation_pe_other(),
        lambda: rvm_historical_pe_other(),
    )


@component.add(
    name="Actual rvm collected pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_pe_ptt": 1,
        "rvm_historical_pe_ptt": 1,
    },
)
def actual_rvm_collected_pe_ptt():
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: rvm_collected_formulation_pe_ptt(),
        lambda: rvm_historical_pe_ptt(),
    )


@component.add(
    name="sent for formal domestic ldpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ldpe_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Actual rvm collected pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "rvm_collected_formulation_pp_film": 1,
        "rvm_historical_pp_film": 1,
    },
)
def actual_rvm_collected_pp_film():
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: rvm_collected_formulation_pp_film(),
        lambda: rvm_historical_pp_film(),
    )


@component.add(
    name="Actual rvm collected pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_pp_bottle": 1,
        "rvm_historical_pp_bottle": 1,
    },
)
def actual_rvm_collected_pp_bottle():
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: rvm_collected_formulation_pp_bottle(),
        lambda: rvm_historical_pp_bottle(),
    )


@component.add(
    name="historical overseas rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="Actual wmc collected ldpe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_ldpe_bottle": 1,
        "wmc_historical_ldpe_bottle": 1,
    },
)
def actual_wmc_collected_ldpe_bottle():
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: wmc_collected_formulation_ldpe_bottle(),
        lambda: wmc_historical_ldpe_bottle(),
    )


@component.add(
    name="Actual wmc collected ldpe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "wmc_collected_formulation_idpe_film": 1,
        "wmc_historical_ldpe_film": 1,
    },
)
def actual_wmc_collected_ldpe_film():
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: wmc_collected_formulation_idpe_film(),
        lambda: wmc_historical_ldpe_film(),
    )


@component.add(
    name="Actual wmc collected ldpe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "wmc_collected_formulation_ldpe_other": 1,
        "wmc_historical_ldpe_other": 1,
    },
)
def actual_wmc_collected_ldpe_other():
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: wmc_collected_formulation_ldpe_other(),
        lambda: wmc_historical_ldpe_other(),
    )


@component.add(
    name="Actual wmc collected ldpe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_ldpe_ptt": 1,
        "wmc_historical_ldpe_ptt": 1,
    },
)
def actual_wmc_collected_ldpe_ptt():
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: wmc_collected_formulation_ldpe_ptt(),
        lambda: wmc_historical_ldpe_ptt(),
    )


@component.add(
    name="Actual wmc collected other bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_other_bottle": 1,
        "wmc_historical_other_bottle": 1,
    },
)
def actual_wmc_collected_other_bottle():
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: wmc_collected_formulation_other_bottle(),
        lambda: wmc_historical_other_bottle(),
    )


@component.add(
    name="Actual wmc collected other film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "wmc_collected_formulation_other_film": 1,
        "wmc_historical_other_film": 1,
    },
)
def actual_wmc_collected_other_film():
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: wmc_collected_formulation_other_film(),
        lambda: wmc_historical_other_film(),
    )


@component.add(
    name="Actual wmc collected other other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "wmc_collected_formulation_other_other": 1,
        "wmc_historical_other_other": 1,
    },
)
def actual_wmc_collected_other_other():
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: wmc_collected_formulation_other_other(),
        lambda: wmc_historical_other_other(),
    )


@component.add(
    name="Actual wmc collected Other PTT",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_other_ptt": 1,
        "wmc_historical_other_ptt": 1,
    },
)
def actual_wmc_collected_other_ptt():
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: wmc_collected_formulation_other_ptt(),
        lambda: wmc_historical_other_ptt(),
    )


@component.add(
    name="Actual wmc collected pe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "wmc_collected_formulation_pe_film": 1,
        "wmc_historical_pe_film": 1,
    },
)
def actual_wmc_collected_pe_film():
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: wmc_collected_formulation_pe_film(),
        lambda: wmc_historical_pe_film(),
    )


@component.add(
    name="Actual wmc collected pe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "wmc_collected_formulation_pe_other": 1,
        "wmc_historical_pe_other": 1,
    },
)
def actual_wmc_collected_pe_other():
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: wmc_collected_formulation_pe_other(),
        lambda: wmc_historical_pe_other(),
    )


@component.add(
    name="Actual wmc collected pe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_pe_ptt": 1,
        "wmc_historical_pe_ptt": 1,
    },
)
def actual_wmc_collected_pe_ptt():
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: wmc_collected_formulation_pe_ptt(),
        lambda: wmc_historical_pe_ptt(),
    )


@component.add(
    name="Sent for overseas treatment ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ldpe_ptt": 1, "sorting_ldpe_ptt": 1},
)
def sent_for_overseas_treatment_ldpe_ptt():
    return overseas_treament_rate_ldpe_ptt() * sorting_ldpe_ptt()


@component.add(
    name="Actual wmc collected pp film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "wmc_collected_formulation_pp_film": 1,
        "wmc_historical_pp_film": 1,
    },
)
def actual_wmc_collected_pp_film():
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: wmc_collected_formulation_pp_film(),
        lambda: wmc_historical_pp_film(),
    )


@component.add(
    name="Actual wmc collected pp bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_pp_bottle": 1,
        "wmc_historical_pp_bottle": 1,
    },
)
def actual_wmc_collected_pp_bottle():
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: wmc_collected_formulation_pp_bottle(),
        lambda: wmc_historical_pp_bottle(),
    )


@component.add(
    name="historical rate for domestic other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Chemical recycling ldpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ldpe_bottle": 1,
        "domestic_recycling_ldpe_bottle": 1,
    },
)
def chemical_recycling_ldpe_bottle():
    return rate_of_chemical_recycling_ldpe_bottle() * domestic_recycling_ldpe_bottle()


@component.add(
    name="Chemical recycling ldpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ldpe_film": 1,
        "domestic_recycling_idpe_film": 1,
    },
)
def chemical_recycling_ldpe_film():
    return rate_of_chemical_recycling_ldpe_film() * domestic_recycling_idpe_film()


@component.add(
    name="Chemical recycling ldpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ldpe_other": 1,
        "domestic_recycling_ldpe_other": 1,
    },
)
def chemical_recycling_ldpe_other():
    return rate_of_chemical_recycling_ldpe_other() * domestic_recycling_ldpe_other()


@component.add(
    name="Chemical recycling ldpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_ldpe_ptt": 1,
        "domestic_recycling_ldpe_ptt": 1,
    },
)
def chemical_recycling_ldpe_ptt():
    return rate_of_chemical_recycling_ldpe_ptt() * domestic_recycling_ldpe_ptt()


@component.add(
    name="Chemical recycling other bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_other_bottle": 1,
        "domestic_recycling_other_bottle": 1,
    },
)
def chemical_recycling_other_bottle():
    return rate_of_chemical_recycling_other_bottle() * domestic_recycling_other_bottle()


@component.add(
    name="Chemical recycling other film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_other_film": 1,
        "domestic_recycling_other_film": 1,
    },
)
def chemical_recycling_other_film():
    return rate_of_chemical_recycling_other_film() * domestic_recycling_other_film()


@component.add(
    name="Chemical recycling other other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_other_other": 1,
        "domestic_recycling_other_other": 1,
    },
)
def chemical_recycling_other_other():
    return rate_of_chemical_recycling_other_other() * domestic_recycling_other_other()


@component.add(
    name="Chemical recycling Other PTT",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_other_ptt": 1,
        "domestic_recycling_other_ptt": 1,
    },
)
def chemical_recycling_other_ptt():
    return rate_of_chemical_recycling_other_ptt() * domestic_recycling_other_ptt()


@component.add(
    name="Chemical recycling pe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pe_film": 1,
        "domestic_recycling_pe_film": 1,
    },
)
def chemical_recycling_pe_film():
    return rate_of_chemical_recycling_pe_film() * domestic_recycling_pe_film()


@component.add(
    name="Chemical recycling pe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pe_other": 1,
        "domestic_recycling_pe_other": 1,
    },
)
def chemical_recycling_pe_other():
    return rate_of_chemical_recycling_pe_other() * domestic_recycling_pe_other()


@component.add(
    name="Chemical recycling pe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_chemical_recycling_pe_ptt": 1, "domestic_recycling_pe_ptt": 1},
)
def chemical_recycling_pe_ptt():
    return rate_of_chemical_recycling_pe_ptt() * domestic_recycling_pe_ptt()


@component.add(
    name="Chemical recycling pet bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pet_bottle": 1,
        "domestic_recycling_pet_bottle": 1,
    },
)
def chemical_recycling_pet_bottle():
    return rate_of_chemical_recycling_pet_bottle() * domestic_recycling_pet_bottle()


@component.add(
    name="Sent for recycling ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_ldpe_ptt": 1, "rate_sent_for_domestic_recycling_ldpe_ptt": 1},
)
def sent_for_recycling_ldpe_ptt():
    return sorting_ldpe_ptt() * rate_sent_for_domestic_recycling_ldpe_ptt()


@component.add(
    name="Chemical recycling pp film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pp_film": 1,
        "domestic_recycling_pp_film": 1,
    },
)
def chemical_recycling_pp_film():
    return rate_of_chemical_recycling_pp_film() * domestic_recycling_pp_film()


@component.add(
    name="Chemical recycling pp bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pp_bottle": 1,
        "domestic_recycling_pp_bottle": 1,
    },
)
def chemical_recycling_pp_bottle():
    return rate_of_chemical_recycling_pp_bottle() * domestic_recycling_pp_bottle()


@component.add(
    name="illegal collection data ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ldpe_other": 1,
        "waste_generated_ldpe_other": 1,
    },
)
def illegal_collection_data_ldpe_other():
    return rate_to_illegal_collection_ldpe_other() * waste_generated_ldpe_other()


@component.add(
    name="illegal collection data ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ldpe_ptt": 1,
        "waste_generated_ldpe_ptt": 1,
    },
)
def illegal_collection_data_ldpe_ptt():
    return rate_to_illegal_collection_ldpe_ptt() * waste_generated_ldpe_ptt()


@component.add(
    name="illegal collection data other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_other_bottle": 1,
        "waste_generated_other_bottle": 1,
    },
)
def illegal_collection_data_other_bottle():
    return rate_to_illegal_collection_other_bottle() * waste_generated_other_bottle()


@component.add(
    name="illegal collection data other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_other_other": 1,
        "waste_generated_other_other": 1,
    },
)
def illegal_collection_data_other_other():
    return rate_to_illegal_collection_other_other() * waste_generated_other_other()


@component.add(
    name="illegal collection data Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_other_ptt": 1,
        "waste_generated_other_ptt": 1,
    },
)
def illegal_collection_data_other_ptt():
    return rate_to_illegal_collection_other_ptt() * waste_generated_other_ptt()


@component.add(
    name="illegal collection data pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_to_illegal_collection_pe_film": 1, "waste_generated_pe_film": 1},
)
def illegal_collection_data_pe_film():
    return rate_to_illegal_collection_pe_film() * waste_generated_pe_film()


@component.add(
    name="illegal collection data pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pe_other": 1,
        "waste_generated_pe_other": 1,
    },
)
def illegal_collection_data_pe_other():
    return rate_to_illegal_collection_pe_other() * waste_generated_pe_other()


@component.add(
    name="rate dumped ldpe film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ldpe_film():
    return 0.006


@component.add(
    name="rate dumped ldpe other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ldpe_other():
    return 0.006


@component.add(
    name="rate dumped ldpe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ldpe_ptt():
    return 0.006


@component.add(
    name="rate dumped other other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_other_other():
    return 0.006


@component.add(
    name="rate dumped Other PTT",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_other_ptt():
    return 0.006


@component.add(
    name="rate dumped pp bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pp_bottle():
    return 0.006


@component.add(
    name="Incineration ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ldpe_bottle": 1},
    other_deps={
        "_integ_incineration_ldpe_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_ldpe_bottle": 1},
        }
    },
)
def incineration_ldpe_bottle():
    return _integ_incineration_ldpe_bottle()


_integ_incineration_ldpe_bottle = Integ(
    lambda: sent_to_incineration_ldpe_bottle(),
    lambda: 0,
    "_integ_incineration_ldpe_bottle",
)


@component.add(
    name="Incineration idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_idpe_film": 1},
    other_deps={
        "_integ_incineration_idpe_film": {
            "initial": {},
            "step": {"sent_to_incineration_idpe_film": 1},
        }
    },
)
def incineration_idpe_film():
    return _integ_incineration_idpe_film()


_integ_incineration_idpe_film = Integ(
    lambda: sent_to_incineration_idpe_film(), lambda: 0, "_integ_incineration_idpe_film"
)


@component.add(
    name="Incineration other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_other_bottle": 1},
    other_deps={
        "_integ_incineration_other_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_other_bottle": 1},
        }
    },
)
def incineration_other_bottle():
    return _integ_incineration_other_bottle()


_integ_incineration_other_bottle = Integ(
    lambda: sent_to_incineration_other_bottle(),
    lambda: 0,
    "_integ_incineration_other_bottle",
)


@component.add(
    name="Incineration other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_other_film": 1},
    other_deps={
        "_integ_incineration_other_film": {
            "initial": {},
            "step": {"sent_to_incineration_other_film": 1},
        }
    },
)
def incineration_other_film():
    return _integ_incineration_other_film()


_integ_incineration_other_film = Integ(
    lambda: sent_to_incineration_other_film(),
    lambda: 0,
    "_integ_incineration_other_film",
)


@component.add(
    name="Incineration other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_other_other": 1},
    other_deps={
        "_integ_incineration_other_other": {
            "initial": {},
            "step": {"sent_to_incineration_other_other": 1},
        }
    },
)
def incineration_other_other():
    return _integ_incineration_other_other()


_integ_incineration_other_other = Integ(
    lambda: sent_to_incineration_other_other(),
    lambda: 0,
    "_integ_incineration_other_other",
)


@component.add(
    name="Rate of chemical recycling ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ldpe_bottle():
    return 0


@component.add(
    name="Rate of chemical recycling ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ldpe_film():
    return 0


@component.add(
    name="Domestic production recycled ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ldpe_bottle": 1},
)
def domestic_production_recycled_ldpe_bottle():
    return mechanical_recycling_ldpe_bottle()


@component.add(
    name="Domestic production recycled ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_idpe_film": 1},
)
def domestic_production_recycled_ldpe_film():
    return mechanical_recycling_idpe_film()


@component.add(
    name="Domestic production recycled idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_idpe_other": 1},
)
def domestic_production_recycled_idpe_other():
    return mechanical_recycling_idpe_other()


@component.add(
    name="Domestic production recycled ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_ldpe_ptt": 1},
)
def domestic_production_recycled_ldpe_ptt():
    return mechanical_recycling_ldpe_ptt()


@component.add(
    name="Domestic production recycled other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_other_bottle": 1},
)
def domestic_production_recycled_other_bottle():
    return mechanical_recycling_other_bottle()


@component.add(
    name="Domestic production recycled other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_other_film": 1},
)
def domestic_production_recycled_other_film():
    return mechanical_recycling_other_film()


@component.add(
    name="Domestic production recycled other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_other_other": 1},
)
def domestic_production_recycled_other_other():
    return mechanical_recycling_other_other()


@component.add(
    name="Domestic production recycled Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_other_ptt": 1},
)
def domestic_production_recycled_other_ptt():
    return mechanical_recycling_other_ptt()


@component.add(
    name="Domestic production recycled pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pe_film": 1},
)
def domestic_production_recycled_pe_film():
    return mechanical_recycling_pe_film()


@component.add(
    name="Domestic production recycled pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pe_other": 1},
)
def domestic_production_recycled_pe_other():
    return mechanical_recycling_pe_other()


@component.add(
    name="Domestic production recycled pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pe_ptt": 1},
)
def domestic_production_recycled_pe_ptt():
    return mechanical_recycling_pe_ptt()


@component.add(
    name="Domestic production recycled pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pet_bottle": 1},
)
def domestic_production_recycled_pet_bottle():
    return mechanical_recycling_pet_bottle()


@component.add(
    name="Sent to incineration ldpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ldpe_ptt": 1,
        "domestic_residual_treatment_ldpe_ptt": 1,
    },
)
def sent_to_incineration_ldpe_ptt():
    return incineration_rate_ldpe_ptt() * domestic_residual_treatment_ldpe_ptt()


@component.add(
    name="Rate of chemical recycling pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pp_film():
    return 0


@component.add(
    name="Rate of chemical recycling pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pp_bottle():
    return 0


@component.add(
    name="Domestic production recycled pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pp_film": 1},
)
def domestic_production_recycled_pp_film():
    return mechanical_recycling_pp_film()


@component.add(
    name="Domestic production recycled pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pp_bottle": 1},
)
def domestic_production_recycled_pp_bottle():
    return mechanical_recycling_pp_bottle()


@component.add(
    name="Incineration rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_other_bottle": 1},
)
def incineration_rate_other_bottle():
    return 1 - landfill_rate_other_bottle()


@component.add(
    name="Incineration rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_other_film": 1},
)
def incineration_rate_other_film():
    return 1 - landfill_rate_other_film()


@component.add(
    name="Incineration rate other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_other_other": 1},
)
def incineration_rate_other_other():
    return 1 - landfill_rate_other_other()


@component.add(
    name="Incineration rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_other_ptt": 1},
)
def incineration_rate_other_ptt():
    return 1 - landfill_rate_other_ptt()


@component.add(
    name="Incineration rate pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_film": 1},
)
def incineration_rate_pe_film():
    return 1 - landfill_rate_pe_film()


@component.add(
    name="rate of mechanical recycling ldpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ldpe_bottle():
    return 1


@component.add(
    name="rate of mechanical recycling ldpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ldpe_film():
    return 1


@component.add(
    name="rate of mechanical recycling ldpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ldpe_other():
    return 1


@component.add(
    name="rate of mechanical recycling ldpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_ldpe_ptt():
    return 1


@component.add(
    name="Domestic Recycling ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ldpe_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_ldpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_ldpe_bottle": 1,
                "mechanical_recycling_ldpe_bottle": 1,
                "chemical_recycling_ldpe_bottle": 1,
            },
        }
    },
)
def domestic_recycling_ldpe_bottle():
    return _integ_domestic_recycling_ldpe_bottle()


_integ_domestic_recycling_ldpe_bottle = Integ(
    lambda: sent_for_recycling_ldpe_bottle()
    - mechanical_recycling_ldpe_bottle()
    - chemical_recycling_ldpe_bottle(),
    lambda: 0,
    "_integ_domestic_recycling_ldpe_bottle",
)


@component.add(
    name="Domestic Recycling idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_idpe_film": 1},
    other_deps={
        "_integ_domestic_recycling_idpe_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_idpe_film": 1,
                "mechanical_recycling_idpe_film": 1,
                "chemical_recycling_ldpe_film": 1,
            },
        }
    },
)
def domestic_recycling_idpe_film():
    return _integ_domestic_recycling_idpe_film()


_integ_domestic_recycling_idpe_film = Integ(
    lambda: sent_for_recycling_idpe_film()
    - mechanical_recycling_idpe_film()
    - chemical_recycling_ldpe_film(),
    lambda: 51944,
    "_integ_domestic_recycling_idpe_film",
)


@component.add(
    name="Domestic Recycling ldpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ldpe_other": 1},
    other_deps={
        "_integ_domestic_recycling_ldpe_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_idpe_other": 1,
                "mechanical_recycling_idpe_other": 1,
                "chemical_recycling_ldpe_other": 1,
            },
        }
    },
)
def domestic_recycling_ldpe_other():
    return _integ_domestic_recycling_ldpe_other()


_integ_domestic_recycling_ldpe_other = Integ(
    lambda: sent_for_recycling_idpe_other()
    - mechanical_recycling_idpe_other()
    - chemical_recycling_ldpe_other(),
    lambda: 3286,
    "_integ_domestic_recycling_ldpe_other",
)


@component.add(
    name="Domestic Recycling ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_ldpe_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_ldpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_ldpe_ptt": 1,
                "mechanical_recycling_ldpe_ptt": 1,
                "chemical_recycling_ldpe_ptt": 1,
            },
        }
    },
)
def domestic_recycling_ldpe_ptt():
    return _integ_domestic_recycling_ldpe_ptt()


_integ_domestic_recycling_ldpe_ptt = Integ(
    lambda: sent_for_recycling_ldpe_ptt()
    - mechanical_recycling_ldpe_ptt()
    - chemical_recycling_ldpe_ptt(),
    lambda: 143,
    "_integ_domestic_recycling_ldpe_ptt",
)


@component.add(
    name="Domestic Recycling other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_other_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_other_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_other_bottle": 1,
                "mechanical_recycling_other_bottle": 1,
                "chemical_recycling_other_bottle": 1,
            },
        }
    },
)
def domestic_recycling_other_bottle():
    return _integ_domestic_recycling_other_bottle()


_integ_domestic_recycling_other_bottle = Integ(
    lambda: sent_for_recycling_other_bottle()
    - mechanical_recycling_other_bottle()
    - chemical_recycling_other_bottle(),
    lambda: 0,
    "_integ_domestic_recycling_other_bottle",
)


@component.add(
    name="Domestic Recycling other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_other_film": 1},
    other_deps={
        "_integ_domestic_recycling_other_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_other_film": 1,
                "mechanical_recycling_other_film": 1,
                "chemical_recycling_other_film": 1,
            },
        }
    },
)
def domestic_recycling_other_film():
    return _integ_domestic_recycling_other_film()


_integ_domestic_recycling_other_film = Integ(
    lambda: sent_for_recycling_other_film()
    - mechanical_recycling_other_film()
    - chemical_recycling_other_film(),
    lambda: 2715,
    "_integ_domestic_recycling_other_film",
)


@component.add(
    name="Domestic Recycling other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_other_other": 1},
    other_deps={
        "_integ_domestic_recycling_other_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_other_other": 1,
                "mechanical_recycling_other_other": 1,
                "chemical_recycling_other_other": 1,
            },
        }
    },
)
def domestic_recycling_other_other():
    return _integ_domestic_recycling_other_other()


_integ_domestic_recycling_other_other = Integ(
    lambda: sent_for_recycling_other_other()
    - mechanical_recycling_other_other()
    - chemical_recycling_other_other(),
    lambda: 0,
    "_integ_domestic_recycling_other_other",
)


@component.add(
    name="Domestic Recycling Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_other_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_other_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_other_ptt": 1,
                "mechanical_recycling_other_ptt": 1,
                "chemical_recycling_other_ptt": 1,
            },
        }
    },
)
def domestic_recycling_other_ptt():
    return _integ_domestic_recycling_other_ptt()


_integ_domestic_recycling_other_ptt = Integ(
    lambda: sent_for_recycling_other_ptt()
    - mechanical_recycling_other_ptt()
    - chemical_recycling_other_ptt(),
    lambda: 285,
    "_integ_domestic_recycling_other_ptt",
)


@component.add(
    name="Domestic Recycling pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pe_film": 1},
    other_deps={
        "_integ_domestic_recycling_pe_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_pe_film": 1,
                "mechanical_recycling_pe_film": 1,
                "chemical_recycling_pe_film": 1,
            },
        }
    },
)
def domestic_recycling_pe_film():
    return _integ_domestic_recycling_pe_film()


_integ_domestic_recycling_pe_film = Integ(
    lambda: sent_for_recycling_pe_film()
    - mechanical_recycling_pe_film()
    - chemical_recycling_pe_film(),
    lambda: 14894,
    "_integ_domestic_recycling_pe_film",
)


@component.add(
    name="Domestic Recycling pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pe_other": 1},
    other_deps={
        "_integ_domestic_recycling_pe_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_pe_other": 1,
                "mechanical_recycling_pe_other": 1,
                "chemical_recycling_pe_other": 1,
            },
        }
    },
)
def domestic_recycling_pe_other():
    return _integ_domestic_recycling_pe_other()


_integ_domestic_recycling_pe_other = Integ(
    lambda: sent_for_recycling_pe_other()
    - mechanical_recycling_pe_other()
    - chemical_recycling_pe_other(),
    lambda: 142,
    "_integ_domestic_recycling_pe_other",
)


@component.add(
    name="Domestic Recycling pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pe_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_pe_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_pe_ptt": 1,
                "mechanical_recycling_pe_ptt": 1,
                "chemical_recycling_pe_ptt": 1,
            },
        }
    },
)
def domestic_recycling_pe_ptt():
    return _integ_domestic_recycling_pe_ptt()


_integ_domestic_recycling_pe_ptt = Integ(
    lambda: sent_for_recycling_pe_ptt()
    - mechanical_recycling_pe_ptt()
    - chemical_recycling_pe_ptt(),
    lambda: 1720,
    "_integ_domestic_recycling_pe_ptt",
)


@component.add(
    name="Domestic Recycling pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pet_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_pet_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_pet_bottle": 1,
                "mechanical_recycling_pet_bottle": 1,
                "chemical_recycling_pet_bottle": 1,
            },
        }
    },
)
def domestic_recycling_pet_bottle():
    return _integ_domestic_recycling_pet_bottle()


_integ_domestic_recycling_pet_bottle = Integ(
    lambda: sent_for_recycling_pet_bottle()
    - mechanical_recycling_pet_bottle()
    - chemical_recycling_pet_bottle(),
    lambda: 63074,
    "_integ_domestic_recycling_pet_bottle",
)


@component.add(
    name="rate of mechanical recycling pp bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pp_bottle():
    return 1


@component.add(
    name="Sent to landfill other other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_other_other": 1,
        "domestic_residual_treatment_other_other": 1,
    },
)
def sent_to_landfill_other_other():
    return landfill_rate_other_other() * domestic_residual_treatment_other_other()


@component.add(
    name="Landfill ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ldpe_bottle": 1},
    other_deps={
        "_integ_landfill_ldpe_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_ldpe_bottle": 1},
        }
    },
)
def landfill_ldpe_bottle():
    return _integ_landfill_ldpe_bottle()


_integ_landfill_ldpe_bottle = Integ(
    lambda: sent_to_landfill_ldpe_bottle(), lambda: 0, "_integ_landfill_ldpe_bottle"
)


@component.add(
    name="Domestic Recycling pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pp_film": 1},
    other_deps={
        "_integ_domestic_recycling_pp_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_pp_film": 1,
                "mechanical_recycling_pp_film": 1,
                "chemical_recycling_pp_film": 1,
            },
        }
    },
)
def domestic_recycling_pp_film():
    return _integ_domestic_recycling_pp_film()


_integ_domestic_recycling_pp_film = Integ(
    lambda: sent_for_recycling_pp_film()
    - mechanical_recycling_pp_film()
    - chemical_recycling_pp_film(),
    lambda: 18735,
    "_integ_domestic_recycling_pp_film",
)


@component.add(
    name="Domestic Recycling pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pp_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_pp_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_pp_bottle": 1,
                "mechanical_recycling_pp_bottle": 1,
                "chemical_recycling_pp_bottle": 1,
            },
        }
    },
)
def domestic_recycling_pp_bottle():
    return _integ_domestic_recycling_pp_bottle()


_integ_domestic_recycling_pp_bottle = Integ(
    lambda: sent_for_recycling_pp_bottle()
    - mechanical_recycling_pp_bottle()
    - chemical_recycling_pp_bottle(),
    lambda: 2439,
    "_integ_domestic_recycling_pp_bottle",
)


@component.add(
    name="Landfill ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_ldpe_ptt": 1},
    other_deps={
        "_integ_landfill_ldpe_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_ldpe_ptt": 1},
        }
    },
)
def landfill_ldpe_ptt():
    return _integ_landfill_ldpe_ptt()


_integ_landfill_ldpe_ptt = Integ(
    lambda: sent_to_landfill_ldpe_ptt(), lambda: 0, "_integ_landfill_ldpe_ptt"
)


@component.add(
    name="Landfill other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_other_bottle": 1},
    other_deps={
        "_integ_landfill_other_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_other_bottle": 1},
        }
    },
)
def landfill_other_bottle():
    return _integ_landfill_other_bottle()


_integ_landfill_other_bottle = Integ(
    lambda: sent_to_landfill_other_bottle(), lambda: 0, "_integ_landfill_other_bottle"
)


@component.add(
    name="Landfill other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_other_film": 1},
    other_deps={
        "_integ_landfill_other_film": {
            "initial": {},
            "step": {"sent_to_landfill_other_film": 1},
        }
    },
)
def landfill_other_film():
    return _integ_landfill_other_film()


_integ_landfill_other_film = Integ(
    lambda: sent_to_landfill_other_film(), lambda: 0, "_integ_landfill_other_film"
)


@component.add(
    name="rate of recycling ldpe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ldpe_bottle": 1,
        "historical_on_rate_of_recycling_ldpe_bottle": 1,
    },
)
def rate_of_recycling_ldpe_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_ldpe_bottle(),
        lambda: historical_on_rate_of_recycling_ldpe_bottle(),
    )


@component.add(
    name="rate of recycling idpe film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_idpe_film": 1,
        "historical_on_rate_of_recycling_idpe_film": 1,
    },
)
def rate_of_recycling_idpe_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: formulation_for_rate_of_recycling_idpe_film(),
        lambda: historical_on_rate_of_recycling_idpe_film(),
    )


@component.add(
    name="rate of recycling idpe other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_idpe_other": 1,
        "historical_on_rate_of_recycling_idpe_other": 1,
    },
)
def rate_of_recycling_idpe_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: formulation_for_rate_of_recycling_idpe_other(),
        lambda: historical_on_rate_of_recycling_idpe_other(),
    )


@component.add(
    name="rate of recycling ldpe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_ldpe_ptt": 1,
        "historical_on_rate_of_recycling_ldpe_ptt": 1,
    },
)
def rate_of_recycling_ldpe_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_ldpe_ptt(),
        lambda: historical_on_rate_of_recycling_ldpe_ptt(),
    )


@component.add(
    name="Domestic Residual treatment ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ldpe_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ldpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ldpe_bottle": 1,
                "sent_to_incineration_ldpe_bottle": 1,
                "sent_to_landfill_ldpe_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_ldpe_bottle():
    return _integ_domestic_residual_treatment_ldpe_bottle()


_integ_domestic_residual_treatment_ldpe_bottle = Integ(
    lambda: sent_for_residual_treatment_ldpe_bottle()
    - sent_to_incineration_ldpe_bottle()
    - sent_to_landfill_ldpe_bottle(),
    lambda: 0,
    "_integ_domestic_residual_treatment_ldpe_bottle",
)


@component.add(
    name="Domestic Residual treatment idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_idpe_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_idpe_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_idpe_film": 1,
                "sent_to_incineration_idpe_film": 1,
                "sent_to_landfill_idpe_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_idpe_film():
    return _integ_domestic_residual_treatment_idpe_film()


_integ_domestic_residual_treatment_idpe_film = Integ(
    lambda: sent_for_residual_treatment_idpe_film()
    - sent_to_incineration_idpe_film()
    - sent_to_landfill_idpe_film(),
    lambda: 176138,
    "_integ_domestic_residual_treatment_idpe_film",
)


@component.add(
    name="Domestic Residual treatment idpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_idpe_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_idpe_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_idpe_other": 1,
                "sent_to_incineration_idpe_other": 1,
                "sent_to_landfill_idpe_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_idpe_other():
    return _integ_domestic_residual_treatment_idpe_other()


_integ_domestic_residual_treatment_idpe_other = Integ(
    lambda: sent_for_residual_treatment_idpe_other()
    - sent_to_incineration_idpe_other()
    - sent_to_landfill_idpe_other(),
    lambda: 11148,
    "_integ_domestic_residual_treatment_idpe_other",
)


@component.add(
    name="Domestic Residual treatment ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_ldpe_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_ldpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_ldpe_ptt": 1,
                "sent_to_incineration_ldpe_ptt": 1,
                "sent_to_landfill_ldpe_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_ldpe_ptt():
    return _integ_domestic_residual_treatment_ldpe_ptt()


_integ_domestic_residual_treatment_ldpe_ptt = Integ(
    lambda: sent_for_residual_treatment_ldpe_ptt()
    - sent_to_incineration_ldpe_ptt()
    - sent_to_landfill_ldpe_ptt(),
    lambda: 486,
    "_integ_domestic_residual_treatment_ldpe_ptt",
)


@component.add(
    name="Domestic Residual treatment other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_other_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_other_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_other_bottle": 1,
                "sent_to_incineration_other_bottle": 1,
                "sent_to_landfill_other_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_other_bottle():
    return _integ_domestic_residual_treatment_other_bottle()


_integ_domestic_residual_treatment_other_bottle = Integ(
    lambda: sent_for_residual_treatment_other_bottle()
    - sent_to_incineration_other_bottle()
    - sent_to_landfill_other_bottle(),
    lambda: 238075,
    "_integ_domestic_residual_treatment_other_bottle",
)


@component.add(
    name="Domestic Residual treatment other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_other_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_other_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_other_film": 1,
                "sent_to_incineration_other_film": 1,
                "sent_to_landfill_other_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_other_film():
    return _integ_domestic_residual_treatment_other_film()


_integ_domestic_residual_treatment_other_film = Integ(
    lambda: sent_for_residual_treatment_other_film()
    - sent_to_incineration_other_film()
    - sent_to_landfill_other_film(),
    lambda: 9207,
    "_integ_domestic_residual_treatment_other_film",
)


@component.add(
    name="Domestic Residual treatment other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_other_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_other_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_other_other": 1,
                "sent_to_incineration_other_other": 1,
                "sent_to_landfill_other_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_other_other():
    return _integ_domestic_residual_treatment_other_other()


_integ_domestic_residual_treatment_other_other = Integ(
    lambda: sent_for_residual_treatment_other_other()
    - sent_to_incineration_other_other()
    - sent_to_landfill_other_other(),
    lambda: 0,
    "_integ_domestic_residual_treatment_other_other",
)


@component.add(
    name="Domestic Residual treatment Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_other_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_other_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_other_ptt": 1,
                "sent_to_incineration_other_ptt": 1,
                "sent_to_landfill_other_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_other_ptt():
    return _integ_domestic_residual_treatment_other_ptt()


_integ_domestic_residual_treatment_other_ptt = Integ(
    lambda: sent_for_residual_treatment_other_ptt()
    - sent_to_incineration_other_ptt()
    - sent_to_landfill_other_ptt(),
    lambda: 968,
    "_integ_domestic_residual_treatment_other_ptt",
)


@component.add(
    name="Domestic Residual treatment pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pe_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pe_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pe_film": 1,
                "sent_to_incineration_pe_film": 1,
                "sent_to_landfill_pe_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_pe_film():
    return _integ_domestic_residual_treatment_pe_film()


_integ_domestic_residual_treatment_pe_film = Integ(
    lambda: sent_for_residual_treatment_pe_film()
    - sent_to_incineration_pe_film()
    - sent_to_landfill_pe_film(),
    lambda: 50144,
    "_integ_domestic_residual_treatment_pe_film",
)


@component.add(
    name="Domestic Residual treatment pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pe_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pe_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pe_other": 1,
                "sent_to_incineration_pe_other": 1,
                "sent_to_landfill_pe_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_pe_other():
    return _integ_domestic_residual_treatment_pe_other()


_integ_domestic_residual_treatment_pe_other = Integ(
    lambda: sent_for_residual_treatment_pe_other()
    - sent_to_incineration_pe_other()
    - sent_to_landfill_pe_other(),
    lambda: 483,
    "_integ_domestic_residual_treatment_pe_other",
)


@component.add(
    name="Domestic Residual treatment pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pe_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pe_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pe_ptt": 1,
                "sent_to_incineration_pe_ptt": 1,
                "sent_to_landfill_pe_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_pe_ptt():
    return _integ_domestic_residual_treatment_pe_ptt()


_integ_domestic_residual_treatment_pe_ptt = Integ(
    lambda: sent_for_residual_treatment_pe_ptt()
    - sent_to_incineration_pe_ptt()
    - sent_to_landfill_pe_ptt(),
    lambda: 5833,
    "_integ_domestic_residual_treatment_pe_ptt",
)


@component.add(
    name="Domestic Residual treatment pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pet_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pet_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pet_bottle": 1,
                "sent_to_incineration_pet_bottle": 1,
                "sent_to_landfill_pet_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_pet_bottle():
    return _integ_domestic_residual_treatment_pet_bottle()


_integ_domestic_residual_treatment_pet_bottle = Integ(
    lambda: sent_for_residual_treatment_pet_bottle()
    - sent_to_incineration_pet_bottle()
    - sent_to_landfill_pet_bottle(),
    lambda: 1000,
    "_integ_domestic_residual_treatment_pet_bottle",
)


@component.add(
    name="rate of recycling pp bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pp_bottle": 1,
        "historical_on_rate_of_recycling_pp_bottle": 1,
    },
)
def rate_of_recycling_pp_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_pp_bottle(),
        lambda: historical_on_rate_of_recycling_pp_bottle(),
    )


@component.add(
    name="landfill rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ldpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ldpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Domestic Residual treatment pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pp_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pp_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pp_film": 1,
                "sent_to_incineration_pp_film": 1,
                "sent_to_landfill_pp_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_pp_film():
    return _integ_domestic_residual_treatment_pp_film()


_integ_domestic_residual_treatment_pp_film = Integ(
    lambda: sent_for_residual_treatment_pp_film()
    - sent_to_incineration_pp_film()
    - sent_to_landfill_pp_film(),
    lambda: 64357,
    "_integ_domestic_residual_treatment_pp_film",
)


@component.add(
    name="Domestic Residual treatment pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pp_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pp_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pp_bottle": 1,
                "sent_to_incineration_pp_bottle": 1,
                "sent_to_landfill_pp_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_pp_bottle():
    return _integ_domestic_residual_treatment_pp_bottle()


_integ_domestic_residual_treatment_pp_bottle = Integ(
    lambda: sent_for_residual_treatment_pp_bottle()
    - sent_to_incineration_pp_bottle()
    - sent_to_landfill_pp_bottle(),
    lambda: 8271,
    "_integ_domestic_residual_treatment_pp_bottle",
)


@component.add(
    name="landfill rate other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="rate of recycling reject ldpe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "historical_on_recycling_ldpe_bottle": 2,
        "formulation_for_recycling_rate_ldpe_bottle": 1,
    },
)
def rate_of_recycling_reject_ldpe_bottle():
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: historical_on_recycling_ldpe_bottle()
        * formulation_for_recycling_rate_ldpe_bottle(),
        lambda: historical_on_recycling_ldpe_bottle(),
    )


@component.add(
    name="rate of recycling reject idpe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "historical_on_recycling_ldpe_film": 2,
        "formulation_for_recycling_rate_ldpe_film": 1,
    },
)
def rate_of_recycling_reject_idpe_film():
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: historical_on_recycling_ldpe_film()
        * formulation_for_recycling_rate_ldpe_film(),
        lambda: historical_on_recycling_ldpe_film(),
    )


@component.add(
    name="rate of recycling reject ldpe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "historical_on_recycling_ldpe_other": 2,
        "formulation_for_recycling_rate_idpe_other": 1,
    },
)
def rate_of_recycling_reject_ldpe_other():
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: historical_on_recycling_ldpe_other()
        * formulation_for_recycling_rate_idpe_other(),
        lambda: historical_on_recycling_ldpe_other(),
    )


@component.add(
    name="rate of recycling reject ldpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_ldpe_ptt": 1,
        "historical_on_recycling_ldpe_ptt": 2,
    },
)
def rate_of_recycling_reject_ldpe_ptt():
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: historical_on_recycling_ldpe_ptt()
        * formulation_for_recycling_rate_ldpe_ptt(),
        lambda: historical_on_recycling_ldpe_ptt(),
    )


@component.add(
    name="rate of recycling reject other bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "historical_on_recycling_other_bottle": 2,
        "formulation_for_recycling_rate_other_bottle": 1,
    },
)
def rate_of_recycling_reject_other_bottle():
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: historical_on_recycling_other_bottle()
        * formulation_for_recycling_rate_other_bottle(),
        lambda: historical_on_recycling_other_bottle(),
    )


@component.add(
    name="rate of recycling reject other film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "formulation_for_recycling_rate_other_film": 1,
        "historical_on_recycling_other_film": 2,
    },
)
def rate_of_recycling_reject_other_film():
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: historical_on_recycling_other_film()
        * formulation_for_recycling_rate_other_film(),
        lambda: historical_on_recycling_other_film(),
    )


@component.add(
    name="Dumped ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ldpe_bottle": 1},
    other_deps={
        "_integ_dumped_ldpe_bottle": {
            "initial": {},
            "step": {"mismanagement_ldpe_bottle": 1},
        }
    },
)
def dumped_ldpe_bottle():
    return _integ_dumped_ldpe_bottle()


_integ_dumped_ldpe_bottle = Integ(
    lambda: mismanagement_ldpe_bottle(), lambda: 0, "_integ_dumped_ldpe_bottle"
)


@component.add(
    name="Dumped ldpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ldpe_film": 1},
    other_deps={
        "_integ_dumped_ldpe_film": {
            "initial": {},
            "step": {"mismanagement_idpe_film": 1},
        }
    },
)
def dumped_ldpe_film():
    return _integ_dumped_ldpe_film()


_integ_dumped_ldpe_film = Integ(
    lambda: mismanagement_idpe_film(), lambda: 0, "_integ_dumped_ldpe_film"
)


@component.add(
    name="Dumped ldpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ldpe_other": 1},
    other_deps={
        "_integ_dumped_ldpe_other": {
            "initial": {},
            "step": {"mismanagement_idpe_other": 1},
        }
    },
)
def dumped_ldpe_other():
    return _integ_dumped_ldpe_other()


_integ_dumped_ldpe_other = Integ(
    lambda: mismanagement_idpe_other(), lambda: 0, "_integ_dumped_ldpe_other"
)


@component.add(
    name="Dumped ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_ldpe_ptt": 1},
    other_deps={
        "_integ_dumped_ldpe_ptt": {"initial": {}, "step": {"mismanagement_ldpe_ptt": 1}}
    },
)
def dumped_ldpe_ptt():
    return _integ_dumped_ldpe_ptt()


_integ_dumped_ldpe_ptt = Integ(
    lambda: mismanagement_ldpe_ptt(), lambda: 0, "_integ_dumped_ldpe_ptt"
)


@component.add(
    name="Dumped other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_other_bottle": 1},
    other_deps={
        "_integ_dumped_other_bottle": {
            "initial": {},
            "step": {"mismanagement_other_bottle": 1},
        }
    },
)
def dumped_other_bottle():
    return _integ_dumped_other_bottle()


_integ_dumped_other_bottle = Integ(
    lambda: mismanagement_other_bottle(), lambda: 0, "_integ_dumped_other_bottle"
)


@component.add(
    name="Dumped other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_other_film": 1},
    other_deps={
        "_integ_dumped_other_film": {
            "initial": {},
            "step": {"mismanagement_other_film": 1},
        }
    },
)
def dumped_other_film():
    return _integ_dumped_other_film()


_integ_dumped_other_film = Integ(
    lambda: mismanagement_other_film(), lambda: 0, "_integ_dumped_other_film"
)


@component.add(
    name="Dumped other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_other_other": 1},
    other_deps={
        "_integ_dumped_other_other": {
            "initial": {},
            "step": {"mismanagement_other_other": 1},
        }
    },
)
def dumped_other_other():
    return _integ_dumped_other_other()


_integ_dumped_other_other = Integ(
    lambda: mismanagement_other_other(), lambda: 0, "_integ_dumped_other_other"
)


@component.add(
    name="Dumped Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_other_ptt": 1},
    other_deps={
        "_integ_dumped_other_ptt": {
            "initial": {},
            "step": {"mismanagement_other_ptt": 1},
        }
    },
)
def dumped_other_ptt():
    return _integ_dumped_other_ptt()


_integ_dumped_other_ptt = Integ(
    lambda: mismanagement_other_ptt(), lambda: 0, "_integ_dumped_other_ptt"
)


@component.add(
    name="Dumped pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pe_film": 1},
    other_deps={
        "_integ_dumped_pe_film": {"initial": {}, "step": {"mismanagement_pe_film": 1}}
    },
)
def dumped_pe_film():
    return _integ_dumped_pe_film()


_integ_dumped_pe_film = Integ(
    lambda: mismanagement_pe_film(), lambda: 0, "_integ_dumped_pe_film"
)


@component.add(
    name="Dumped pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pe_other": 1},
    other_deps={
        "_integ_dumped_pe_other": {"initial": {}, "step": {"mismanagement_pe_other": 1}}
    },
)
def dumped_pe_other():
    return _integ_dumped_pe_other()


_integ_dumped_pe_other = Integ(
    lambda: mismanagement_pe_other(), lambda: 0, "_integ_dumped_pe_other"
)


@component.add(
    name="Dumped pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pe_ptt": 1},
    other_deps={
        "_integ_dumped_pe_ptt": {"initial": {}, "step": {"mismanagement_pe_ptt": 1}}
    },
)
def dumped_pe_ptt():
    return _integ_dumped_pe_ptt()


_integ_dumped_pe_ptt = Integ(
    lambda: mismanagement_pe_ptt(), lambda: 0, "_integ_dumped_pe_ptt"
)


@component.add(
    name="Dumped pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pet_bottle": 1},
    other_deps={
        "_integ_dumped_pet_bottle": {
            "initial": {},
            "step": {"mismanagement_pet_bottle": 1},
        }
    },
)
def dumped_pet_bottle():
    return _integ_dumped_pet_bottle()


_integ_dumped_pet_bottle = Integ(
    lambda: mismanagement_pet_bottle(), lambda: 0, "_integ_dumped_pet_bottle"
)


@component.add(
    name="to waste generated ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ldpe_ptt": 1},
)
def to_waste_generated_ldpe_ptt():
    return total_pom_ldpe_ptt()


@component.add(
    name="to waste generated other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_other_bottle": 1},
)
def to_waste_generated_other_bottle():
    return total_pom_other_bottle()


@component.add(
    name="Littered ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ldpe_bottle": 1},
    other_deps={
        "_integ_littered_ldpe_bottle": {
            "initial": {},
            "step": {"littering_ldpe_bottle": 1},
        }
    },
)
def littered_ldpe_bottle():
    return _integ_littered_ldpe_bottle()


_integ_littered_ldpe_bottle = Integ(
    lambda: littering_ldpe_bottle(), lambda: 0, "_integ_littered_ldpe_bottle"
)


@component.add(
    name="Dumped pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pp_film": 1},
    other_deps={
        "_integ_dumped_pp_film": {"initial": {}, "step": {"mismanagement_pp_film": 1}}
    },
)
def dumped_pp_film():
    return _integ_dumped_pp_film()


_integ_dumped_pp_film = Integ(
    lambda: mismanagement_pp_film(), lambda: 0, "_integ_dumped_pp_film"
)


@component.add(
    name="Dumped pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pp_bottle": 1},
    other_deps={
        "_integ_dumped_pp_bottle": {
            "initial": {},
            "step": {"mismanagement_pp_bottle": 1},
        }
    },
)
def dumped_pp_bottle():
    return _integ_dumped_pp_bottle()


_integ_dumped_pp_bottle = Integ(
    lambda: mismanagement_pp_bottle(), lambda: 0, "_integ_dumped_pp_bottle"
)


@component.add(
    name="Littered ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ldpe_ptt": 1},
    other_deps={
        "_integ_littered_ldpe_ptt": {"initial": {}, "step": {"littering_ldpe_ptt": 1}}
    },
)
def littered_ldpe_ptt():
    return _integ_littered_ldpe_ptt()


_integ_littered_ldpe_ptt = Integ(
    lambda: littering_ldpe_ptt(), lambda: 0, "_integ_littered_ldpe_ptt"
)


@component.add(
    name="Littered other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_other_bottle": 1},
    other_deps={
        "_integ_littered_other_bottle": {
            "initial": {},
            "step": {"littering_other_bottle": 1},
        }
    },
)
def littered_other_bottle():
    return _integ_littered_other_bottle()


_integ_littered_other_bottle = Integ(
    lambda: littering_other_bottle(), lambda: 0, "_integ_littered_other_bottle"
)


@component.add(
    name="Littered other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_other_film": 1},
    other_deps={
        "_integ_littered_other_film": {
            "initial": {},
            "step": {"littering_other_film": 1},
        }
    },
)
def littered_other_film():
    return _integ_littered_other_film()


_integ_littered_other_film = Integ(
    lambda: littering_other_film(), lambda: 0, "_integ_littered_other_film"
)


@component.add(
    name="rate overseas ldpe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_ldpe_bottle": 1,
        "historical_overseas_rate_ldpe_bottle": 1,
    },
)
def rate_overseas_ldpe_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ldpe_bottle() < time(),
        lambda: formulation_of_overseas_rate_ldpe_bottle(),
        lambda: historical_overseas_rate_ldpe_bottle(),
    )


@component.add(
    name="rate overseas idpe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_idpe_film": 1,
        "historical_overseas_rate_idpe_film": 1,
    },
)
def rate_overseas_idpe_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_idpe_film() < time(),
        lambda: formulation_of_overseas_rate_idpe_film(),
        lambda: historical_overseas_rate_idpe_film(),
    )


@component.add(
    name="rate overseas idpe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_idpe_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_idpe_other": 1,
        "historical_overseas_rate_idpe_other": 1,
    },
)
def rate_overseas_idpe_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_idpe_other() < time(),
        lambda: formulation_of_overseas_rate_idpe_other(),
        lambda: historical_overseas_rate_idpe_other(),
    )


@component.add(
    name="rate overseas ldpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_ldpe_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_ldpe_ptt": 1,
        "historical_overseas_rate_ldpe_ptt": 1,
    },
)
def rate_overseas_ldpe_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_ldpe_ptt() < time(),
        lambda: formulation_of_overseas_rate_ldpe_ptt(),
        lambda: historical_overseas_rate_ldpe_ptt(),
    )


@component.add(
    name="Formal domestic treatment ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ldpe_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ldpe_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ldpe_bottle": 1,
                "sent_for_sorting_ldpe_bottle": 1,
                "sent_for_residual_treatment_ldpe_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_ldpe_bottle():
    return _integ_formal_domestic_treatment_ldpe_bottle()


_integ_formal_domestic_treatment_ldpe_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ldpe_bottle()
    - sent_for_sorting_ldpe_bottle()
    - sent_for_residual_treatment_ldpe_bottle(),
    lambda: 0,
    "_integ_formal_domestic_treatment_ldpe_bottle",
)


@component.add(
    name="Formal domestic treatment idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_idpe_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_idpe_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_idpe_film": 1,
                "sent_for_sorting_idpe_film": 1,
                "sent_for_residual_treatment_idpe_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_idpe_film():
    return _integ_formal_domestic_treatment_idpe_film()


_integ_formal_domestic_treatment_idpe_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_idpe_film()
    - sent_for_sorting_idpe_film()
    - sent_for_residual_treatment_idpe_film(),
    lambda: 324977,
    "_integ_formal_domestic_treatment_idpe_film",
)


@component.add(
    name="Formal domestic treatment ldpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ldpe_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ldpe_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_idpe_other": 1,
                "sent_for_sorting_idpe_other": 1,
                "sent_for_residual_treatment_idpe_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_ldpe_other():
    return _integ_formal_domestic_treatment_ldpe_other()


_integ_formal_domestic_treatment_ldpe_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_idpe_other()
    - sent_for_sorting_idpe_other()
    - sent_for_residual_treatment_idpe_other(),
    lambda: 20564,
    "_integ_formal_domestic_treatment_ldpe_other",
)


@component.add(
    name="Formal domestic treatment ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_ldpe_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_ldpe_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_ldpe_ptt": 1,
                "sent_for_sorting_ldpe_ptt": 1,
                "sent_for_residual_treatment_ldpe_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_ldpe_ptt():
    return _integ_formal_domestic_treatment_ldpe_ptt()


_integ_formal_domestic_treatment_ldpe_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_ldpe_ptt()
    - sent_for_sorting_ldpe_ptt()
    - sent_for_residual_treatment_ldpe_ptt(),
    lambda: 898,
    "_integ_formal_domestic_treatment_ldpe_ptt",
)


@component.add(
    name="Formal domestic treatment other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_other_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_other_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_other_bottle": 1,
                "sent_for_sorting_other_bottle": 1,
                "sent_for_residual_treatment_other_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_other_bottle():
    return _integ_formal_domestic_treatment_other_bottle()


_integ_formal_domestic_treatment_other_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_other_bottle()
    - sent_for_sorting_other_bottle()
    - sent_for_residual_treatment_other_bottle(),
    lambda: 0,
    "_integ_formal_domestic_treatment_other_bottle",
)


@component.add(
    name="Formal domestic treatment other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_other_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_other_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_other_film": 1,
                "sent_for_sorting_other_film": 1,
                "sent_for_residual_treatment_other_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_other_film():
    return _integ_formal_domestic_treatment_other_film()


_integ_formal_domestic_treatment_other_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_other_film()
    - sent_for_sorting_other_film()
    - sent_for_residual_treatment_other_film(),
    lambda: 16988,
    "_integ_formal_domestic_treatment_other_film",
)


@component.add(
    name="Formal domestic treatment other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_other_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_other_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_other_other": 1,
                "sent_for_sorting_other_other": 1,
                "sent_for_residual_treatment_other_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_other_other():
    return _integ_formal_domestic_treatment_other_other()


_integ_formal_domestic_treatment_other_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_other_other()
    - sent_for_sorting_other_other()
    - sent_for_residual_treatment_other_other(),
    lambda: 0,
    "_integ_formal_domestic_treatment_other_other",
)


@component.add(
    name="Formal domestic treatment Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_other_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_other_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_other_ptt": 1,
                "sent_for_sorting_other_ptt": 1,
                "sent_for_residual_treatment_other_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_other_ptt():
    return _integ_formal_domestic_treatment_other_ptt()


_integ_formal_domestic_treatment_other_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_other_ptt()
    - sent_for_sorting_other_ptt()
    - sent_for_residual_treatment_other_ptt(),
    lambda: 1786,
    "_integ_formal_domestic_treatment_other_ptt",
)


@component.add(
    name="Formal domestic treatment pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pe_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pe_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pe_film": 1,
                "sent_for_sorting_pe_film": 1,
                "sent_for_residual_treatment_pe_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_pe_film():
    return _integ_formal_domestic_treatment_pe_film()


_integ_formal_domestic_treatment_pe_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pe_film()
    - sent_for_sorting_pe_film()
    - sent_for_residual_treatment_pe_film(),
    lambda: 92517,
    "_integ_formal_domestic_treatment_pe_film",
)


@component.add(
    name="Formal domestic treatment pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pe_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pe_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pe_other": 1,
                "sent_for_sorting_pe_other": 1,
                "sent_for_residual_treatment_pe_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_pe_other():
    return _integ_formal_domestic_treatment_pe_other()


_integ_formal_domestic_treatment_pe_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pe_other()
    - sent_for_sorting_pe_other()
    - sent_for_residual_treatment_pe_other(),
    lambda: 892,
    "_integ_formal_domestic_treatment_pe_other",
)


@component.add(
    name="Formal domestic treatment pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pe_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pe_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pe_ptt": 1,
                "sent_for_sorting_pe_ptt": 1,
                "sent_for_residual_treatment_pe_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_pe_ptt():
    return _integ_formal_domestic_treatment_pe_ptt()


_integ_formal_domestic_treatment_pe_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pe_ptt()
    - sent_for_sorting_pe_ptt()
    - sent_for_residual_treatment_pe_ptt(),
    lambda: 10713,
    "_integ_formal_domestic_treatment_pe_ptt",
)


@component.add(
    name="Formal domestic treatment pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pet_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pet_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pet_bottle": 1,
                "sent_for_sorting_pet_bottle": 1,
                "sent_for_residual_treatment_pet_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_pet_bottle():
    return _integ_formal_domestic_treatment_pet_bottle()


_integ_formal_domestic_treatment_pet_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pet_bottle()
    - sent_for_sorting_pet_bottle()
    - sent_for_residual_treatment_pet_bottle(),
    lambda: 394615,
    "_integ_formal_domestic_treatment_pet_bottle",
)


@component.add(
    name="rate overseas pp bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_pp_bottle": 1,
        "historical_overseas_rate_pp_bottle": 1,
    },
)
def rate_overseas_pp_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: formulation_of_overseas_rate_pp_bottle(),
        lambda: historical_overseas_rate_pp_bottle(),
    )


@component.add(
    name="littering ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ldpe_bottle": 1, "waste_generated_ldpe_bottle": 1},
)
def littering_ldpe_bottle():
    return littering_rate_ldpe_bottle() * waste_generated_ldpe_bottle()


@component.add(
    name="Formal domestic treatment pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pp_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pp_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pp_film": 1,
                "sent_for_sorting_pp_film": 1,
                "sent_for_residual_treatment_pp_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_pp_film():
    return _integ_formal_domestic_treatment_pp_film()


_integ_formal_domestic_treatment_pp_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pp_film()
    - sent_for_sorting_pp_film()
    - sent_for_residual_treatment_pp_film(),
    lambda: 118741,
    "_integ_formal_domestic_treatment_pp_film",
)


@component.add(
    name="Formal domestic treatment pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pp_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pp_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pp_bottle": 1,
                "sent_for_sorting_pp_bottle": 1,
                "sent_for_residual_treatment_pp_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_pp_bottle():
    return _integ_formal_domestic_treatment_pp_bottle()


_integ_formal_domestic_treatment_pp_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pp_bottle()
    - sent_for_sorting_pp_bottle()
    - sent_for_residual_treatment_pp_bottle(),
    lambda: 15261,
    "_integ_formal_domestic_treatment_pp_bottle",
)


@component.add(
    name="littering ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ldpe_ptt": 1, "waste_generated_ldpe_ptt": 1},
)
def littering_ldpe_ptt():
    return littering_rate_ldpe_ptt() * waste_generated_ldpe_ptt()


@component.add(
    name="littering other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_other_bottle": 1, "waste_generated_other_bottle": 1},
)
def littering_other_bottle():
    return littering_rate_other_bottle() * waste_generated_other_bottle()


@component.add(
    name="rate sent for domestic recycling ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ldpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ldpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ldpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_ldpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Formal Waste Collection ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ldpe_bottle": 1,
        "actual_rvm_collected_ldpe_bottle": 1,
        "actual_wmc_collected_ldpe_bottle": 1,
        "waste_generated_ldpe_bottle": 1,
    },
)
def formal_waste_collection_ldpe_bottle():
    return (
        actual_la_collected_ldpe_bottle()
        + actual_rvm_collected_ldpe_bottle()
        + actual_wmc_collected_ldpe_bottle()
    ) * waste_generated_ldpe_bottle()


@component.add(
    name="Formal Waste Collection ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ldpe_other": 1,
        "actual_rvm_collected_ldpe_other": 1,
        "actual_wmc_collected_ldpe_other": 1,
        "waste_generated_ldpe_other": 1,
    },
)
def formal_waste_collection_ldpe_other():
    return (
        actual_la_collected_ldpe_other()
        + actual_rvm_collected_ldpe_other()
        + actual_wmc_collected_ldpe_other()
    ) * waste_generated_ldpe_other()


@component.add(
    name="Formal Waste Collection ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_ldpe_ptt": 1,
        "actual_rvm_collected_ldpe_ptt": 1,
        "actual_wmc_collected_ldpe_ptt": 1,
        "waste_generated_ldpe_ptt": 1,
    },
)
def formal_waste_collection_ldpe_ptt():
    return (
        actual_la_collected_ldpe_ptt()
        + actual_rvm_collected_ldpe_ptt()
        + actual_wmc_collected_ldpe_ptt()
    ) * waste_generated_ldpe_ptt()


@component.add(
    name="Formal Waste Collection other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_other_bottle": 1,
        "actual_rvm_collected_other_bottle": 1,
        "actual_wmc_collected_other_bottle": 1,
        "waste_generated_other_bottle": 1,
    },
)
def formal_waste_collection_other_bottle():
    return (
        actual_la_collected_other_bottle()
        + actual_rvm_collected_other_bottle()
        + actual_wmc_collected_other_bottle()
    ) * waste_generated_other_bottle()


@component.add(
    name="Formal Waste Collection other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_other_other": 1,
        "actual_rvm_collected_other_other": 1,
        "actual_wmc_collected_other_other": 1,
        "waste_generated_other_other": 1,
    },
)
def formal_waste_collection_other_other():
    return (
        actual_la_collected_other_other()
        + actual_rvm_collected_other_other()
        + actual_wmc_collected_other_other()
    ) * waste_generated_other_other()


@component.add(
    name="Formal Waste Collection Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_other_ptt": 1,
        "actual_rvm_collected_other_ptt": 1,
        "actual_wmc_collected_other_ptt": 1,
        "waste_generated_other_ptt": 1,
    },
)
def formal_waste_collection_other_ptt():
    return (
        actual_la_collected_other_ptt()
        + actual_rvm_collected_other_ptt()
        + actual_wmc_collected_other_ptt()
    ) * waste_generated_other_ptt()


@component.add(
    name="Formal Waste Collection pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pe_film": 1,
        "actual_rvm_collected_pe_film": 1,
        "actual_wmc_collected_pe_film": 1,
        "waste_generated_pe_film": 1,
    },
)
def formal_waste_collection_pe_film():
    return (
        actual_la_collected_pe_film()
        + actual_rvm_collected_pe_film()
        + actual_wmc_collected_pe_film()
    ) * waste_generated_pe_film()


@component.add(
    name="Formal Waste Collection pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pe_other": 1,
        "actual_rvm_collected_pe_other": 1,
        "actual_wmc_collected_pe_other": 1,
        "waste_generated_pe_other": 1,
    },
)
def formal_waste_collection_pe_other():
    return (
        actual_la_collected_pe_other()
        + actual_rvm_collected_pe_other()
        + actual_wmc_collected_pe_other()
    ) * waste_generated_pe_other()


@component.add(
    name="Formal Waste Collection pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pe_ptt": 1,
        "actual_rvm_collected_pe_ptt": 1,
        "actual_wmc_collected_pe_ptt": 1,
        "waste_generated_pe_ptt": 1,
    },
)
def formal_waste_collection_pe_ptt():
    return (
        actual_la_collected_pe_ptt()
        + actual_rvm_collected_pe_ptt()
        + actual_wmc_collected_pe_ptt()
    ) * waste_generated_pe_ptt()


@component.add(
    name="Formal Waste Collection pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pet_bottle": 1,
        "actual_rvm_collected_pet_bottle": 1,
        "actual_wmc_collected_pet_bottle": 1,
        "waste_generated_pet_bottle": 1,
    },
)
def formal_waste_collection_pet_bottle():
    return (
        actual_la_collected_pet_bottle()
        + actual_rvm_collected_pet_bottle()
        + actual_wmc_collected_pet_bottle()
    ) * waste_generated_pet_bottle()


@component.add(
    name="rate sent for domestic recycling pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pp_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="littering rate formulation ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ldpe_bottle():
    return 0.01


@component.add(
    name="littering rate formulation idpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_idpe_film():
    return 0.01


@component.add(
    name="Formal Waste Collection pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pp_bottle": 1,
        "actual_rvm_collected_pp_bottle": 1,
        "actual_wmc_collected_pp_bottle": 1,
        "waste_generated_pp_bottle": 1,
    },
)
def formal_waste_collection_pp_bottle():
    return (
        actual_la_collected_pp_bottle()
        + actual_rvm_collected_pp_bottle()
        + actual_wmc_collected_pp_bottle()
    ) * waste_generated_pp_bottle()


@component.add(
    name="littering rate formulation other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_other_bottle():
    return 0.01


@component.add(
    name="littering rate formulation other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_other_film():
    return 0.01


@component.add(
    name="littering rate formulation other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_other_other():
    return 0.01


@component.add(
    name="rate sent for reuse ldpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ldpe_bottle():
    return 0


@component.add(
    name="rate sent for reuse ldpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ldpe_film():
    return 0


@component.add(
    name="rate sent for reuse ldpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ldpe_other():
    return 0


@component.add(
    name="rate sent for reuse ldpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_ldpe_ptt():
    return 0


@component.add(
    name="formulation for domestic rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_bottle": 1,
        "historical_rate_for_domestic_ldpe_bottle": 1,
    },
)
def formulation_for_domestic_rate_ldpe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_ldpe_bottle(),
        lambda: historical_rate_for_domestic_ldpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_idpe_other": 1,
        "historical_rate_for_domestic_idpe_other": 1,
    },
)
def formulation_for_domestic_rate_idpe_other():
    return if_then_else(
        time() > policy1_introduction_time_idpe_other(),
        lambda: historical_rate_for_domestic_idpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_ptt": 1,
        "historical_rate_for_domestic_ldpe_ptt": 1,
    },
)
def formulation_for_domestic_rate_ldpe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_ldpe_ptt(),
        lambda: historical_rate_for_domestic_ldpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_bottle": 1,
        "historical_rate_for_domestic_other_bottle": 1,
    },
)
def formulation_for_domestic_rate_other_bottle():
    return if_then_else(
        time() > policy1_introduction_time_other_bottle(),
        lambda: historical_rate_for_domestic_other_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_film": 1,
        "historical_rate_for_domestic_other_film": 1,
    },
)
def formulation_for_domestic_rate_other_film():
    return if_then_else(
        time() > policy1_introduction_time_other_film(),
        lambda: historical_rate_for_domestic_other_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_other": 1,
        "historical_rate_for_domestic_other_other": 1,
    },
)
def formulation_for_domestic_rate_other_other():
    return if_then_else(
        time() > policy1_introduction_time_other_other(),
        lambda: historical_rate_for_domestic_other_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_ptt": 1,
        "historical_rate_for_domestic_other_ptt": 1,
    },
)
def formulation_for_domestic_rate_other_ptt():
    return if_then_else(
        time() > policy1_introduction_time_other_ptt(),
        lambda: historical_rate_for_domestic_other_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_film": 1,
        "historical_rate_for_domestic_pe_film": 1,
    },
)
def formulation_for_domestic_rate_pe_film():
    return if_then_else(
        time() > policy1_introduction_time_pe_film(),
        lambda: historical_rate_for_domestic_pe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_other": 1,
        "historical_rate_for_domestic_pe_other": 1,
    },
)
def formulation_for_domestic_rate_pe_other():
    return if_then_else(
        time() > policy1_introduction_time_pe_other(),
        lambda: historical_rate_for_domestic_pe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_ptt": 1,
        "historical_rate_for_domestic_pe_ptt": 1,
    },
)
def formulation_for_domestic_rate_pe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pe_ptt(),
        lambda: historical_rate_for_domestic_pe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_bottle": 1,
        "historical_rate_for_domestic_pet_bottle": 1,
    },
)
def formulation_for_domestic_rate_pet_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: historical_rate_for_domestic_pet_bottle(),
        lambda: 0,
    )


@component.add(
    name="rate sent for reuse pp bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pp_bottle():
    return 0


@component.add(
    name="Waste collected idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_idpe_film": 1},
    other_deps={
        "_integ_waste_collected_idpe_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_idpe_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_idpe_film": 1,
            },
        }
    },
)
def waste_collected_idpe_film():
    return _integ_waste_collected_idpe_film()


_integ_waste_collected_idpe_film = Integ(
    lambda: formal_waste_collection_idpe_film()
    - waste_collected_sent_to_formal_domestic_treatment_idpe_film(),
    lambda: 326939,
    "_integ_waste_collected_idpe_film",
)


@component.add(
    name="Waste collected ldpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ldpe_other": 1},
    other_deps={
        "_integ_waste_collected_ldpe_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_ldpe_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_idpe_other": 1,
            },
        }
    },
)
def waste_collected_ldpe_other():
    return _integ_waste_collected_ldpe_other()


_integ_waste_collected_ldpe_other = Integ(
    lambda: formal_waste_collection_ldpe_other()
    - waste_collected_sent_to_formal_domestic_treatment_idpe_other(),
    lambda: 20658,
    "_integ_waste_collected_ldpe_other",
)


@component.add(
    name="formulation for domestic rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_film": 1,
        "historical_rate_for_domestic_pp_film": 1,
    },
)
def formulation_for_domestic_rate_pp_film():
    return if_then_else(
        time() > policy1_introduction_time_pp_film(),
        lambda: historical_rate_for_domestic_pp_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_bottle": 1,
        "historical_rate_for_domestic_pp_bottle": 1,
    },
)
def formulation_for_domestic_rate_pp_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pp_bottle(),
        lambda: historical_rate_for_domestic_pp_bottle(),
        lambda: 0,
    )


@component.add(
    name="littering rate historical data ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ldpe_bottle():
    return 0.04


@component.add(
    name="littering rate historical data ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ldpe_film():
    return 0.04


@component.add(
    name="littering rate historical data ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ldpe_other():
    return 0.04


@component.add(
    name="littering rate historical data ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_ldpe_ptt():
    return 0.04


@component.add(
    name="rate to illegal collection ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ldpe_bottle():
    return 0.006


@component.add(
    name="rate to illegal collection ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ldpe_film():
    return 0.006


@component.add(
    name="rate to illegal collection ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ldpe_other():
    return 0.006


@component.add(
    name="formulation for la collected ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ldpe_bottle():
    return 0.15


@component.add(
    name="formulation for la collected idpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_idpe_film():
    return 0.15


@component.add(
    name="formulation for la collected ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ldpe_other():
    return 0.15


@component.add(
    name="formulation for la collected ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_ldpe_ptt():
    return 0.15


@component.add(
    name="formulation for la collected other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_other_bottle():
    return 0.15


@component.add(
    name="formulation for la collected other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_other_film():
    return 0.15


@component.add(
    name="formulation for la collected other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_other_other():
    return 0.15


@component.add(
    name="formulation for la collected Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_other_ptt():
    return 0.15


@component.add(
    name="formulation for la collected pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pe_film():
    return 0.15


@component.add(
    name="formulation for la collected pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pe_other():
    return 0.15


@component.add(
    name="formulation for la collected pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pe_ptt():
    return 0.15


@component.add(
    name="rate to illegal collection pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pp_film():
    return 0.006


@component.add(
    name="rate to illegal collection pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pp_bottle():
    return 0.006


@component.add(
    name="formulation for la collected pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pp_film():
    return 0.15


@component.add(
    name="formulation for la collected pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pp_bottle():
    return 0.15


@component.add(
    name="Recycled chemically ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ldpe_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_ldpe_bottle": {
            "initial": {},
            "step": {"chemical_recycling_ldpe_bottle": 1},
        }
    },
)
def recycled_chemically_ldpe_bottle():
    return _integ_recycled_chemically_ldpe_bottle()


_integ_recycled_chemically_ldpe_bottle = Integ(
    lambda: chemical_recycling_ldpe_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_ldpe_bottle",
)


@component.add(
    name="Recycled chemically idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_idpe_film": 1},
    other_deps={
        "_integ_recycled_chemically_idpe_film": {
            "initial": {},
            "step": {"chemical_recycling_ldpe_film": 1},
        }
    },
)
def recycled_chemically_idpe_film():
    return _integ_recycled_chemically_idpe_film()


_integ_recycled_chemically_idpe_film = Integ(
    lambda: chemical_recycling_ldpe_film(),
    lambda: 0,
    "_integ_recycled_chemically_idpe_film",
)


@component.add(
    name="Recycled chemically idpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_idpe_other": 1},
    other_deps={
        "_integ_recycled_chemically_idpe_other": {
            "initial": {},
            "step": {"chemical_recycling_ldpe_other": 1},
        }
    },
)
def recycled_chemically_idpe_other():
    return _integ_recycled_chemically_idpe_other()


_integ_recycled_chemically_idpe_other = Integ(
    lambda: chemical_recycling_ldpe_other(),
    lambda: 0,
    "_integ_recycled_chemically_idpe_other",
)


@component.add(
    name="formulation for rate of recycling ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_bottle": 1,
        "historical_on_rate_of_recycling_ldpe_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_ldpe_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ldpe_bottle(),
        lambda: historical_on_rate_of_recycling_ldpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_idpe_film": 1,
        "historical_on_rate_of_recycling_idpe_film": 1,
    },
)
def formulation_for_rate_of_recycling_idpe_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_idpe_film(),
        lambda: historical_on_rate_of_recycling_idpe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_idpe_other": 1,
        "historical_on_rate_of_recycling_idpe_other": 1,
    },
)
def formulation_for_rate_of_recycling_idpe_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_idpe_other(),
        lambda: historical_on_rate_of_recycling_idpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_ptt": 1,
        "historical_on_rate_of_recycling_ldpe_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_ldpe_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_ldpe_ptt(),
        lambda: historical_on_rate_of_recycling_ldpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_bottle": 1,
        "historical_on_rate_of_recycling_other_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_other_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_other_bottle(),
        lambda: historical_on_rate_of_recycling_other_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_film": 1,
        "historical_on_rate_of_recycling_other_film": 1,
    },
)
def formulation_for_rate_of_recycling_other_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_other_film(),
        lambda: historical_on_rate_of_recycling_other_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_other": 1,
        "historical_on_rate_of_recycling_other_other": 1,
    },
)
def formulation_for_rate_of_recycling_other_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_other_other(),
        lambda: historical_on_rate_of_recycling_other_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_ptt": 1,
        "historical_on_rate_of_recycling_other_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_other_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_other_ptt(),
        lambda: historical_on_rate_of_recycling_other_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_film": 1,
        "historical_on_rate_of_recycling_pe_film": 1,
    },
)
def formulation_for_rate_of_recycling_pe_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pe_film(),
        lambda: historical_on_rate_of_recycling_pe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_other": 1,
        "historical_on_rate_of_recycling_pe_other": 1,
    },
)
def formulation_for_rate_of_recycling_pe_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pe_other(),
        lambda: historical_on_rate_of_recycling_pe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_ptt": 1,
        "historical_on_rate_of_recycling_pe_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_pe_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pe_ptt(),
        lambda: historical_on_rate_of_recycling_pe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_bottle": 1,
        "historical_on_rate_of_recycling_pet_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_pet_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: historical_on_rate_of_recycling_pet_bottle(),
        lambda: 0,
    )


@component.add(
    name="Recycled chemically pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pp_film": 1},
    other_deps={
        "_integ_recycled_chemically_pp_film": {
            "initial": {},
            "step": {"chemical_recycling_pp_film": 1},
        }
    },
)
def recycled_chemically_pp_film():
    return _integ_recycled_chemically_pp_film()


_integ_recycled_chemically_pp_film = Integ(
    lambda: chemical_recycling_pp_film(),
    lambda: 0,
    "_integ_recycled_chemically_pp_film",
)


@component.add(
    name="Recycled chemically pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pp_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_pp_bottle": {
            "initial": {},
            "step": {"chemical_recycling_pp_bottle": 1},
        }
    },
)
def recycled_chemically_pp_bottle():
    return _integ_recycled_chemically_pp_bottle()


_integ_recycled_chemically_pp_bottle = Integ(
    lambda: chemical_recycling_pp_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_pp_bottle",
)


@component.add(
    name="formulation for rate of recycling pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_film": 1,
        "historical_on_rate_of_recycling_pp_film": 1,
    },
)
def formulation_for_rate_of_recycling_pp_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pp_film(),
        lambda: historical_on_rate_of_recycling_pp_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_bottle": 1,
        "historical_on_rate_of_recycling_pp_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_pp_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pp_bottle(),
        lambda: historical_on_rate_of_recycling_pp_bottle(),
        lambda: 0,
    )


@component.add(
    name="Recycling rejects ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ldpe_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_ldpe_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_ldpe_bottle": 1},
        }
    },
)
def recycling_rejects_ldpe_bottle():
    return _integ_recycling_rejects_ldpe_bottle()


_integ_recycling_rejects_ldpe_bottle = Integ(
    lambda: recycling_rejects_rate_ldpe_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_ldpe_bottle",
)


@component.add(
    name="Recycling rejects idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_idpe_film": 1},
    other_deps={
        "_integ_recycling_rejects_idpe_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_idpe_film": 1},
        }
    },
)
def recycling_rejects_idpe_film():
    return _integ_recycling_rejects_idpe_film()


_integ_recycling_rejects_idpe_film = Integ(
    lambda: recycling_rejects_rate_idpe_film(),
    lambda: 0,
    "_integ_recycling_rejects_idpe_film",
)


@component.add(
    name="Recycling rejects idpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_idpe_other": 1},
    other_deps={
        "_integ_recycling_rejects_idpe_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_idpe_other": 1},
        }
    },
)
def recycling_rejects_idpe_other():
    return _integ_recycling_rejects_idpe_other()


_integ_recycling_rejects_idpe_other = Integ(
    lambda: recycling_rejects_rate_idpe_other(),
    lambda: 0,
    "_integ_recycling_rejects_idpe_other",
)


@component.add(
    name="formulation for recycling rate ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ldpe_bottle():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ldpe_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate idpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_idpe_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_ldpe_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_other_bottle():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_other_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_other_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_other_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pe_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pe_other():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pe_ptt():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Recycling rejects pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pp_film": 1},
    other_deps={
        "_integ_recycling_rejects_pp_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_pp_film": 1},
        }
    },
)
def recycling_rejects_pp_film():
    return _integ_recycling_rejects_pp_film()


_integ_recycling_rejects_pp_film = Integ(
    lambda: recycling_rejects_rate_pp_film(),
    lambda: 0,
    "_integ_recycling_rejects_pp_film",
)


@component.add(
    name="Recycling rejects pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pp_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_pp_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_pp_bottle": 1},
        }
    },
)
def recycling_rejects_pp_bottle():
    return _integ_recycling_rejects_pp_bottle()


_integ_recycling_rejects_pp_bottle = Integ(
    lambda: recycling_rejects_rate_pp_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_pp_bottle",
)


@component.add(
    name="Mechanical recycling idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ldpe_film": 1,
        "domestic_recycling_idpe_film": 1,
    },
)
def mechanical_recycling_idpe_film():
    return rate_of_mechanical_recycling_ldpe_film() * domestic_recycling_idpe_film()


@component.add(
    name="formulation for recycling rate pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pp_film():
    """
    0.03
    """
    return 0.5


@component.add(
    name="formulation for recycling rate pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pp_bottle():
    """
    0.03
    """
    return 0.5


@component.add(
    name="Mechanical recycling other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_other_bottle": 1,
        "domestic_recycling_other_bottle": 1,
    },
)
def mechanical_recycling_other_bottle():
    return (
        rate_of_mechanical_recycling_other_bottle() * domestic_recycling_other_bottle()
    )


@component.add(
    name="Mechanical recycling other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_other_film": 1,
        "domestic_recycling_other_film": 1,
    },
)
def mechanical_recycling_other_film():
    return rate_of_mechanical_recycling_other_film() * domestic_recycling_other_film()


@component.add(
    name="recycling rejects rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ldpe_bottle": 1, "sorting_ldpe_bottle": 1},
)
def recycling_rejects_rate_ldpe_bottle():
    return rate_of_recycling_reject_ldpe_bottle() * sorting_ldpe_bottle()


@component.add(
    name="recycling rejects rate idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_idpe_film": 1, "sorting_idpe_film": 1},
)
def recycling_rejects_rate_idpe_film():
    return rate_of_recycling_reject_idpe_film() * sorting_idpe_film()


@component.add(
    name="recycling rejects rate idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ldpe_other": 1, "sorting_ldpe_other": 1},
)
def recycling_rejects_rate_idpe_other():
    return rate_of_recycling_reject_ldpe_other() * sorting_ldpe_other()


@component.add(
    name="recycling rejects rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_ldpe_ptt": 1, "sorting_ldpe_ptt": 1},
)
def recycling_rejects_rate_ldpe_ptt():
    return rate_of_recycling_reject_ldpe_ptt() * sorting_ldpe_ptt()


@component.add(
    name="recycling rejects rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_other_bottle": 1, "sorting_other_bottle": 1},
)
def recycling_rejects_rate_other_bottle():
    return rate_of_recycling_reject_other_bottle() * sorting_other_bottle()


@component.add(
    name="recycling rejects rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_other_film": 1, "sorting_other_film": 1},
)
def recycling_rejects_rate_other_film():
    return rate_of_recycling_reject_other_film() * sorting_other_film()


@component.add(
    name="formulation of overseas rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_bottle": 1,
        "historical_overseas_rate_ldpe_bottle": 1,
    },
)
def formulation_of_overseas_rate_ldpe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_ldpe_bottle(),
        lambda: historical_overseas_rate_ldpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_idpe_film": 1,
        "historical_overseas_rate_idpe_film": 1,
    },
)
def formulation_of_overseas_rate_idpe_film():
    return if_then_else(
        time() > policy1_introduction_time_idpe_film(),
        lambda: historical_overseas_rate_idpe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_idpe_other": 1,
        "historical_overseas_rate_idpe_other": 1,
    },
)
def formulation_of_overseas_rate_idpe_other():
    return if_then_else(
        time() > policy1_introduction_time_idpe_other(),
        lambda: historical_overseas_rate_idpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_ldpe_ptt": 1,
        "historical_overseas_rate_ldpe_ptt": 1,
    },
)
def formulation_of_overseas_rate_ldpe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_ldpe_ptt(),
        lambda: historical_overseas_rate_ldpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_bottle": 1,
        "historical_overseas_rate_other_bottle": 1,
    },
)
def formulation_of_overseas_rate_other_bottle():
    return if_then_else(
        time() > policy1_introduction_time_other_bottle(),
        lambda: historical_overseas_rate_other_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_film": 1,
        "historical_overseas_rate_other_film": 1,
    },
)
def formulation_of_overseas_rate_other_film():
    return if_then_else(
        time() > policy1_introduction_time_other_film(),
        lambda: historical_overseas_rate_other_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_other": 1,
        "historical_overseas_rate_other_other": 1,
    },
)
def formulation_of_overseas_rate_other_other():
    return if_then_else(
        time() > policy1_introduction_time_other_other(),
        lambda: historical_overseas_rate_other_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_other_ptt": 1,
        "historical_overseas_rate_other_ptt": 1,
    },
)
def formulation_of_overseas_rate_other_ptt():
    return if_then_else(
        time() > policy1_introduction_time_other_ptt(),
        lambda: historical_overseas_rate_other_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_film": 1,
        "historical_overseas_rate_pe_film": 1,
    },
)
def formulation_of_overseas_rate_pe_film():
    return if_then_else(
        time() > policy1_introduction_time_pe_film(),
        lambda: historical_overseas_rate_pe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_other": 1,
        "historical_overseas_rate_pe_other": 1,
    },
)
def formulation_of_overseas_rate_pe_other():
    return if_then_else(
        time() > policy1_introduction_time_pe_other(),
        lambda: historical_overseas_rate_pe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pe_ptt": 1,
        "historical_overseas_rate_pe_ptt": 1,
    },
)
def formulation_of_overseas_rate_pe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_pe_ptt(),
        lambda: historical_overseas_rate_pe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_bottle": 1,
        "historical_overseas_rate_pet_bottle": 1,
    },
)
def formulation_of_overseas_rate_pet_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pet_bottle(),
        lambda: historical_overseas_rate_pet_bottle(),
        lambda: 0,
    )


@component.add(
    name="mismanagement ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ldpe_bottle": 1, "rate_dumped_ldpe_bottle": 1},
)
def mismanagement_ldpe_bottle():
    return illegal_collection_ldpe_bottle() * rate_dumped_ldpe_bottle()


@component.add(
    name="mismanagement idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_idpe_film": 1, "rate_dumped_ldpe_film": 1},
)
def mismanagement_idpe_film():
    return illegal_collection_idpe_film() * rate_dumped_ldpe_film()


@component.add(
    name="mismanagement idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_idpe_other": 1, "rate_dumped_ldpe_other": 1},
)
def mismanagement_idpe_other():
    return illegal_collection_idpe_other() * rate_dumped_ldpe_other()


@component.add(
    name="formulation of overseas rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_film": 1,
        "historical_overseas_rate_pp_film": 1,
    },
)
def formulation_of_overseas_rate_pp_film():
    return if_then_else(
        time() > policy1_introduction_time_pp_film(),
        lambda: historical_overseas_rate_pp_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pp_bottle": 1,
        "historical_overseas_rate_pp_bottle": 1,
    },
)
def formulation_of_overseas_rate_pp_bottle():
    return if_then_else(
        time() > policy1_introduction_time_pp_bottle(),
        lambda: historical_overseas_rate_pp_bottle(),
        lambda: 0,
    )


@component.add(
    name="mismanagement other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_other_film": 1, "rate_dumped_other_film": 1},
)
def mismanagement_other_film():
    return illegal_collection_other_film() * rate_dumped_other_film()


@component.add(
    name="mismanagement other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_other_other": 1, "rate_dumped_other_other": 1},
)
def mismanagement_other_other():
    return illegal_collection_other_other() * rate_dumped_other_other()


@component.add(
    name="mismanagement Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_other_ptt": 1, "rate_dumped_other_ptt": 1},
)
def mismanagement_other_ptt():
    return illegal_collection_other_ptt() * rate_dumped_other_ptt()


@component.add(
    name="residual rate ldpe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_ldpe_bottle():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate ldpe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_ldpe_other():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate ldpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_ldpe_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="historical data for la collected ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ldpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ldpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="mismanagement pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pp_bottle": 1, "rate_dumped_pp_bottle": 1},
)
def mismanagement_pp_bottle():
    return illegal_collection_pp_bottle() * rate_dumped_pp_bottle()


@component.add(
    name="residual rate pe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pe_film():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate pe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pe_other():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate pe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pe_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="historical data for la collected pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="residual rate pp bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pp_bottle():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="Overseas treament rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ldpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ldpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="historical data for la collected pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="Overseas treament rate other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_other_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_other_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_other_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="historical on rate of recycling ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling idpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_idpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Overseas treatment idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_idpe_film": 1},
    other_deps={
        "_integ_overseas_treatment_idpe_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_idpe_film": 1},
        }
    },
)
def overseas_treatment_idpe_film():
    return _integ_overseas_treatment_idpe_film()


_integ_overseas_treatment_idpe_film = Integ(
    lambda: sent_for_overseas_treatment_idpe_film(),
    lambda: 0,
    "_integ_overseas_treatment_idpe_film",
)


@component.add(
    name="Overseas treatment idpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_idpe_other": 1},
    other_deps={
        "_integ_overseas_treatment_idpe_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_idpe_other": 1},
        }
    },
)
def overseas_treatment_idpe_other():
    return _integ_overseas_treatment_idpe_other()


_integ_overseas_treatment_idpe_other = Integ(
    lambda: sent_for_overseas_treatment_idpe_other(),
    lambda: 0,
    "_integ_overseas_treatment_idpe_other",
)


@component.add(
    name="historical on rate of recycling pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Overseas treatment other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_other_film": 1},
    other_deps={
        "_integ_overseas_treatment_other_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_other_film": 1},
        }
    },
)
def overseas_treatment_other_film():
    return _integ_overseas_treatment_other_film()


_integ_overseas_treatment_other_film = Integ(
    lambda: sent_for_overseas_treatment_other_film(),
    lambda: 0,
    "_integ_overseas_treatment_other_film",
)


@component.add(
    name="Overseas treatment other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_other_other": 1},
    other_deps={
        "_integ_overseas_treatment_other_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_other_other": 1},
        }
    },
)
def overseas_treatment_other_other():
    return _integ_overseas_treatment_other_other()


_integ_overseas_treatment_other_other = Integ(
    lambda: sent_for_overseas_treatment_other_other(),
    lambda: 0,
    "_integ_overseas_treatment_other_other",
)


@component.add(
    name="Overseas treatment Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_other_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_other_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_other_ptt": 1},
        }
    },
)
def overseas_treatment_other_ptt():
    return _integ_overseas_treatment_other_ptt()


_integ_overseas_treatment_other_ptt = Integ(
    lambda: sent_for_overseas_treatment_other_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_other_ptt",
)


@component.add(
    name="rvm historical ldpe bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ldpe_bottle():
    return 0


@component.add(
    name="rvm historical ldpe film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ldpe_film():
    return 0


@component.add(
    name="rvm historical ldpe other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_ldpe_other():
    return 0


@component.add(
    name="rate of recycling reject pe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_pe_ptt": 1,
        "historical_on_recycling_pe_ptt": 2,
    },
)
def rate_of_recycling_reject_pe_ptt():
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: historical_on_recycling_pe_ptt()
        * formulation_for_recycling_rate_pe_ptt(),
        lambda: historical_on_recycling_pe_ptt(),
    )


@component.add(
    name="historical on recycling ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_ldpe_bottle():
    return 0.103


@component.add(
    name="historical on recycling ldpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_ldpe_film():
    return 0.103


@component.add(
    name="historical on recycling ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_ldpe_other():
    return 0.103


@component.add(
    name="historical on recycling ldpe ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_ldpe_ptt():
    return 0.103


@component.add(
    name="rvm historical Other PTT", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_other_ptt():
    return 0


@component.add(
    name="rvm historical pe film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pe_film():
    return 0


@component.add(
    name="rvm historical pe other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pe_other():
    return 0


@component.add(
    name="rvm historical pe ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pe_ptt():
    return 0


@component.add(
    name="rvm historical pet bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pet_bottle():
    return 0


@component.add(
    name="historical on recycling pe other", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pe_other():
    return 0.103


@component.add(
    name="historical on recycling pe ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pe_ptt():
    return 0.103


@component.add(
    name="historical on recycling pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pet_bottle():
    return 0.103


@component.add(
    name="rvm historical pp bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pp_bottle():
    return 0


@component.add(
    name="historical on recycling pp film", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pp_film():
    return 0.103


@component.add(
    name="historical on recycling pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pp_bottle():
    return 0.103


@component.add(
    name="sent for formal domestic ldpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ldpe_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic ldpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ldpe_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic ldpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_ldpe_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Littered pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pp_film": 1},
    other_deps={
        "_integ_littered_pp_film": {"initial": {}, "step": {"littering_pp_film": 1}}
    },
)
def littered_pp_film():
    return _integ_littered_pp_film()


_integ_littered_pp_film = Integ(
    lambda: littering_pp_film(), lambda: 0, "_integ_littered_pp_film"
)


@component.add(
    name="historical overseas rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate idpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_idpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate idpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_idpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="sent for formal domestic Other PTT",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_other_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic pe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pe_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic pe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pe_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic pe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pe_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic pet bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pet_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="historical overseas rate pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="sent for formal domestic pp bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pp_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="historical overseas rate pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="Sent for overseas treatment ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ldpe_bottle": 1, "sorting_ldpe_bottle": 1},
)
def sent_for_overseas_treatment_ldpe_bottle():
    return overseas_treament_rate_ldpe_bottle() * sorting_ldpe_bottle()


@component.add(
    name="Sent for overseas treatment idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ldpe_film": 1, "sorting_idpe_film": 1},
)
def sent_for_overseas_treatment_idpe_film():
    return overseas_treament_rate_ldpe_film() * sorting_idpe_film()


@component.add(
    name="Sent for overseas treatment idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_ldpe_other": 1, "sorting_ldpe_other": 1},
)
def sent_for_overseas_treatment_idpe_other():
    return overseas_treament_rate_ldpe_other() * sorting_ldpe_other()


@component.add(
    name="historical rate for domestic ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic idpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_idpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic idpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_idpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Sent for overseas treatment Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_other_ptt": 1, "sorting_other_ptt": 1},
)
def sent_for_overseas_treatment_other_ptt():
    return overseas_treament_rate_other_ptt() * sorting_other_ptt()


@component.add(
    name="Sent for overseas treatment pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pe_film": 1, "sorting_pe_film": 1},
)
def sent_for_overseas_treatment_pe_film():
    return overseas_treament_rate_pe_film() * sorting_pe_film()


@component.add(
    name="Sent for overseas treatment pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pe_other": 1, "sorting_pe_other": 1},
)
def sent_for_overseas_treatment_pe_other():
    return overseas_treament_rate_pe_other() * sorting_pe_other()


@component.add(
    name="Sent for overseas treatment pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pe_ptt": 1, "sorting_pe_ptt": 1},
)
def sent_for_overseas_treatment_pe_ptt():
    return overseas_treament_rate_pe_ptt() * sorting_pe_ptt()


@component.add(
    name="Sent for overseas treatment pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pet_bottle": 1, "sorting_pet_bottle": 1},
)
def sent_for_overseas_treatment_pet_bottle():
    return overseas_treament_rate_pet_bottle() * sorting_pet_bottle()


@component.add(
    name="historical rate for domestic pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Sent for overseas treatment pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pp_bottle": 1, "sorting_pp_bottle": 1},
)
def sent_for_overseas_treatment_pp_bottle():
    return overseas_treament_rate_pp_bottle() * sorting_pp_bottle()


@component.add(
    name="historical rate for domestic pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Sent for recycling ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_ldpe_bottle": 1,
        "rate_sent_for_domestic_recycling_ldpe_bottle": 1,
    },
)
def sent_for_recycling_ldpe_bottle():
    return sorting_ldpe_bottle() * rate_sent_for_domestic_recycling_ldpe_bottle()


@component.add(
    name="Sent for recycling idpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_idpe_film": 1,
        "rate_sent_for_domestic_recycling_ldpe_film": 1,
    },
)
def sent_for_recycling_idpe_film():
    return sorting_idpe_film() * rate_sent_for_domestic_recycling_ldpe_film()


@component.add(
    name="Sent for recycling idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_ldpe_other": 1,
        "rate_sent_for_domestic_recycling_ldpe_other": 1,
    },
)
def sent_for_recycling_idpe_other():
    return sorting_ldpe_other() * rate_sent_for_domestic_recycling_ldpe_other()


@component.add(
    name="littering rate formulation pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pp_bottle():
    return 0.01


@component.add(
    name="Sent for recycling other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_other_bottle": 1,
        "rate_sent_for_domestic_recycling_other_bottle": 1,
    },
)
def sent_for_recycling_other_bottle():
    return sorting_other_bottle() * rate_sent_for_domestic_recycling_other_bottle()


@component.add(
    name="Sent for recycling other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_other_film": 1,
        "rate_sent_for_domestic_recycling_other_film": 1,
    },
)
def sent_for_recycling_other_film():
    return sorting_other_film() * rate_sent_for_domestic_recycling_other_film()


@component.add(
    name="illegal collection data ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_ldpe_bottle": 1,
        "waste_generated_ldpe_bottle": 1,
    },
)
def illegal_collection_data_ldpe_bottle():
    return rate_to_illegal_collection_ldpe_bottle() * waste_generated_ldpe_bottle()


@component.add(
    name="Sent for recycling Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_other_ptt": 1,
        "rate_sent_for_domestic_recycling_other_ptt": 1,
    },
)
def sent_for_recycling_other_ptt():
    return sorting_other_ptt() * rate_sent_for_domestic_recycling_other_ptt()


@component.add(
    name="Sent for recycling pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pe_film": 1, "rate_sent_for_domestic_recycling_pe_film": 1},
)
def sent_for_recycling_pe_film():
    return sorting_pe_film() * rate_sent_for_domestic_recycling_pe_film()


@component.add(
    name="Sent for recycling pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pe_other": 1, "rate_sent_for_domestic_recycling_pe_other": 1},
)
def sent_for_recycling_pe_other():
    return sorting_pe_other() * rate_sent_for_domestic_recycling_pe_other()


@component.add(
    name="Sent for recycling pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pe_ptt": 1, "rate_sent_for_domestic_recycling_pe_ptt": 1},
)
def sent_for_recycling_pe_ptt():
    return sorting_pe_ptt() * rate_sent_for_domestic_recycling_pe_ptt()


@component.add(
    name="Sent for recycling pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pet_bottle": 1,
        "rate_sent_for_domestic_recycling_pet_bottle": 1,
    },
)
def sent_for_recycling_pet_bottle():
    return sorting_pet_bottle() * rate_sent_for_domestic_recycling_pet_bottle()


@component.add(
    name="Waste collected ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ldpe_ptt": 1},
    other_deps={
        "_integ_waste_collected_ldpe_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_ldpe_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ldpe_ptt": 1,
            },
        }
    },
)
def waste_collected_ldpe_ptt():
    return _integ_waste_collected_ldpe_ptt()


_integ_waste_collected_ldpe_ptt = Integ(
    lambda: formal_waste_collection_ldpe_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_ldpe_ptt(),
    lambda: 898,
    "_integ_waste_collected_ldpe_ptt",
)


@component.add(
    name="Waste collected other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_other_bottle": 1},
    other_deps={
        "_integ_waste_collected_other_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_other_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_other_bottle": 1,
            },
        }
    },
)
def waste_collected_other_bottle():
    return _integ_waste_collected_other_bottle()


_integ_waste_collected_other_bottle = Integ(
    lambda: formal_waste_collection_other_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_other_bottle(),
    lambda: 0,
    "_integ_waste_collected_other_bottle",
)


@component.add(
    name="Landfill other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_other_other": 1},
    other_deps={
        "_integ_landfill_other_other": {
            "initial": {},
            "step": {"sent_to_landfill_other_other": 1},
        }
    },
)
def landfill_other_other():
    return _integ_landfill_other_other()


_integ_landfill_other_other = Integ(
    lambda: sent_to_landfill_other_other(), lambda: 0, "_integ_landfill_other_other"
)


@component.add(
    name="illegal collection data pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_to_illegal_collection_pe_ptt": 1, "waste_generated_pe_ptt": 1},
)
def illegal_collection_data_pe_ptt():
    return rate_to_illegal_collection_pe_ptt() * waste_generated_pe_ptt()


@component.add(
    name="illegal collection data pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pet_bottle": 1,
        "waste_generated_pet_bottle": 1,
    },
)
def illegal_collection_data_pet_bottle():
    return rate_to_illegal_collection_pet_bottle() * waste_generated_pet_bottle()


@component.add(
    name="illegal collection data pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pp_bottle": 1,
        "waste_generated_pp_bottle": 1,
    },
)
def illegal_collection_data_pp_bottle():
    return rate_to_illegal_collection_pp_bottle() * waste_generated_pp_bottle()


@component.add(
    name="littering rate historical data pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pe_film():
    return 0.04


@component.add(
    name="Sent for residual treatment ldpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_ldpe_bottle": 1,
        "residual_rate_ldpe_bottle": 1,
    },
)
def sent_for_residual_treatment_ldpe_bottle():
    return formal_domestic_treatment_ldpe_bottle() * residual_rate_ldpe_bottle()


@component.add(
    name="Sent for residual treatment idpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_ldpe_other": 1,
        "residual_rate_ldpe_other": 1,
    },
)
def sent_for_residual_treatment_idpe_other():
    return formal_domestic_treatment_ldpe_other() * residual_rate_ldpe_other()


@component.add(
    name="Sent for residual treatment ldpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_ldpe_ptt": 1, "residual_rate_ldpe_ptt": 1},
)
def sent_for_residual_treatment_ldpe_ptt():
    return formal_domestic_treatment_ldpe_ptt() * residual_rate_ldpe_ptt()


@component.add(
    name="Sent for residual treatment other bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_other_bottle": 1,
        "residual_rate_other_bottle": 1,
    },
)
def sent_for_residual_treatment_other_bottle():
    return formal_domestic_treatment_other_bottle() * residual_rate_other_bottle()


@component.add(
    name="Illegal collection ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ldpe_bottle": 1},
    other_deps={
        "_integ_illegal_collection_ldpe_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_ldpe_bottle": 1,
                "mismanagement_ldpe_bottle": 1,
            },
        }
    },
)
def illegal_collection_ldpe_bottle():
    return _integ_illegal_collection_ldpe_bottle()


_integ_illegal_collection_ldpe_bottle = Integ(
    lambda: illegal_collection_data_ldpe_bottle() - mismanagement_ldpe_bottle(),
    lambda: 0,
    "_integ_illegal_collection_ldpe_bottle",
)


@component.add(
    name="Illegal collection idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_idpe_film": 1},
    other_deps={
        "_integ_illegal_collection_idpe_film": {
            "initial": {},
            "step": {
                "illegal_collection_data_idpe_film": 1,
                "mismanagement_idpe_film": 1,
            },
        }
    },
)
def illegal_collection_idpe_film():
    return _integ_illegal_collection_idpe_film()


_integ_illegal_collection_idpe_film = Integ(
    lambda: illegal_collection_data_idpe_film() - mismanagement_idpe_film(),
    lambda: 2056,
    "_integ_illegal_collection_idpe_film",
)


@component.add(
    name="Illegal collection idpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_idpe_other": 1},
    other_deps={
        "_integ_illegal_collection_idpe_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_ldpe_other": 1,
                "mismanagement_idpe_other": 1,
            },
        }
    },
)
def illegal_collection_idpe_other():
    return _integ_illegal_collection_idpe_other()


_integ_illegal_collection_idpe_other = Integ(
    lambda: illegal_collection_data_ldpe_other() - mismanagement_idpe_other(),
    lambda: 127,
    "_integ_illegal_collection_idpe_other",
)


@component.add(
    name="Illegal collection ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_ldpe_ptt": 1},
    other_deps={
        "_integ_illegal_collection_ldpe_ptt": {
            "initial": {},
            "step": {
                "illegal_collection_data_ldpe_ptt": 1,
                "mismanagement_ldpe_ptt": 1,
            },
        }
    },
)
def illegal_collection_ldpe_ptt():
    return _integ_illegal_collection_ldpe_ptt()


_integ_illegal_collection_ldpe_ptt = Integ(
    lambda: illegal_collection_data_ldpe_ptt() - mismanagement_ldpe_ptt(),
    lambda: 7,
    "_integ_illegal_collection_ldpe_ptt",
)


@component.add(
    name="Illegal collection other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_other_bottle": 1},
    other_deps={
        "_integ_illegal_collection_other_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_other_bottle": 1,
                "mismanagement_other_bottle": 1,
            },
        }
    },
)
def illegal_collection_other_bottle():
    return _integ_illegal_collection_other_bottle()


_integ_illegal_collection_other_bottle = Integ(
    lambda: illegal_collection_data_other_bottle() - mismanagement_other_bottle(),
    lambda: 0,
    "_integ_illegal_collection_other_bottle",
)


@component.add(
    name="Illegal collection other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_other_film": 1},
    other_deps={
        "_integ_illegal_collection_other_film": {
            "initial": {},
            "step": {
                "illegal_collection_data_other_film": 1,
                "mismanagement_other_film": 1,
            },
        }
    },
)
def illegal_collection_other_film():
    return _integ_illegal_collection_other_film()


_integ_illegal_collection_other_film = Integ(
    lambda: illegal_collection_data_other_film() - mismanagement_other_film(),
    lambda: 0,
    "_integ_illegal_collection_other_film",
)


@component.add(
    name="Illegal collection other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_other_other": 1},
    other_deps={
        "_integ_illegal_collection_other_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_other_other": 1,
                "mismanagement_other_other": 1,
            },
        }
    },
)
def illegal_collection_other_other():
    return _integ_illegal_collection_other_other()


_integ_illegal_collection_other_other = Integ(
    lambda: illegal_collection_data_other_other() - mismanagement_other_other(),
    lambda: 0,
    "_integ_illegal_collection_other_other",
)


@component.add(
    name="Illegal collection Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_other_ptt": 1},
    other_deps={
        "_integ_illegal_collection_other_ptt": {
            "initial": {},
            "step": {
                "illegal_collection_data_other_ptt": 1,
                "mismanagement_other_ptt": 1,
            },
        }
    },
)
def illegal_collection_other_ptt():
    return _integ_illegal_collection_other_ptt()


_integ_illegal_collection_other_ptt = Integ(
    lambda: illegal_collection_data_other_ptt() - mismanagement_other_ptt(),
    lambda: 11,
    "_integ_illegal_collection_other_ptt",
)


@component.add(
    name="Illegal collection pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pe_film": 1},
    other_deps={
        "_integ_illegal_collection_pe_film": {
            "initial": {},
            "step": {"illegal_collection_data_pe_film": 1, "mismanagement_pe_film": 1},
        }
    },
)
def illegal_collection_pe_film():
    return _integ_illegal_collection_pe_film()


_integ_illegal_collection_pe_film = Integ(
    lambda: illegal_collection_data_pe_film() - mismanagement_pe_film(),
    lambda: 0,
    "_integ_illegal_collection_pe_film",
)


@component.add(
    name="Illegal collection pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pe_other": 1},
    other_deps={
        "_integ_illegal_collection_pe_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_pe_other": 1,
                "mismanagement_pe_other": 1,
            },
        }
    },
)
def illegal_collection_pe_other():
    return _integ_illegal_collection_pe_other()


_integ_illegal_collection_pe_other = Integ(
    lambda: illegal_collection_data_pe_other() - mismanagement_pe_other(),
    lambda: 0,
    "_integ_illegal_collection_pe_other",
)


@component.add(
    name="Illegal collection pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pe_ptt": 1},
    other_deps={
        "_integ_illegal_collection_pe_ptt": {
            "initial": {},
            "step": {"illegal_collection_data_pe_ptt": 1, "mismanagement_pe_ptt": 1},
        }
    },
)
def illegal_collection_pe_ptt():
    return _integ_illegal_collection_pe_ptt()


_integ_illegal_collection_pe_ptt = Integ(
    lambda: illegal_collection_data_pe_ptt() - mismanagement_pe_ptt(),
    lambda: 0,
    "_integ_illegal_collection_pe_ptt",
)


@component.add(
    name="Illegal collection pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pet_bottle": 1},
    other_deps={
        "_integ_illegal_collection_pet_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_pet_bottle": 1,
                "mismanagement_pet_bottle": 1,
            },
        }
    },
)
def illegal_collection_pet_bottle():
    return _integ_illegal_collection_pet_bottle()


_integ_illegal_collection_pet_bottle = Integ(
    lambda: illegal_collection_data_pet_bottle() - mismanagement_pet_bottle(),
    lambda: 0,
    "_integ_illegal_collection_pet_bottle",
)


@component.add(
    name="Sent for residual treatment pp bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pp_bottle": 1, "residual_rate_pp_bottle": 1},
)
def sent_for_residual_treatment_pp_bottle():
    return formal_domestic_treatment_pp_bottle() * residual_rate_pp_bottle()


@component.add(
    name="Illegal collection pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pp_film": 1},
    other_deps={
        "_integ_illegal_collection_pp_film": {
            "initial": {},
            "step": {"illegal_collection_data_pp_film": 1, "mismanagement_pp_film": 1},
        }
    },
)
def illegal_collection_pp_film():
    return _integ_illegal_collection_pp_film()


_integ_illegal_collection_pp_film = Integ(
    lambda: illegal_collection_data_pp_film() - mismanagement_pp_film(),
    lambda: 751,
    "_integ_illegal_collection_pp_film",
)


@component.add(
    name="Illegal collection pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pp_bottle": 1},
    other_deps={
        "_integ_illegal_collection_pp_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_pp_bottle": 1,
                "mismanagement_pp_bottle": 1,
            },
        }
    },
)
def illegal_collection_pp_bottle():
    return _integ_illegal_collection_pp_bottle()


_integ_illegal_collection_pp_bottle = Integ(
    lambda: illegal_collection_data_pp_bottle() - mismanagement_pp_bottle(),
    lambda: 0,
    "_integ_illegal_collection_pp_bottle",
)


@component.add(
    name="landfill rate pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="sent for sorting ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_ldpe_bottle": 1,
        "sent_for_sorting_rate_ldpe_bottle": 1,
    },
)
def sent_for_sorting_ldpe_bottle():
    return formal_domestic_treatment_ldpe_bottle() * sent_for_sorting_rate_ldpe_bottle()


@component.add(
    name="sent for sorting idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_ldpe_other": 1,
        "sent_for_sorting_rate_ldpe_other": 1,
    },
)
def sent_for_sorting_idpe_other():
    return formal_domestic_treatment_ldpe_other() * sent_for_sorting_rate_ldpe_other()


@component.add(
    name="sent for sorting ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_ldpe_ptt": 1,
        "sent_for_sorting_rate_ldpe_ptt": 1,
    },
)
def sent_for_sorting_ldpe_ptt():
    return formal_domestic_treatment_ldpe_ptt() * sent_for_sorting_rate_ldpe_ptt()


@component.add(
    name="sent for sorting other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_other_bottle": 1,
        "sent_for_sorting_rate_other_bottle": 1,
    },
)
def sent_for_sorting_other_bottle():
    return (
        formal_domestic_treatment_other_bottle() * sent_for_sorting_rate_other_bottle()
    )


@component.add(
    name="Impact of policy2 on litering other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time_other_bottle": 1, "time": 1},
)
def impact_of_policy2_on_litering_other_bottle():
    return if_then_else(
        policy2_introduction_time_other_bottle() < time(), lambda: 0.75, lambda: 1
    )


@component.add(
    name="rate dumped other bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_other_bottle():
    return 0.006


@component.add(
    name="rate dumped other film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_other_film():
    return 0.006


@component.add(
    name="Impact of policy2 on litering pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time_pp_film": 1, "time": 1},
)
def impact_of_policy2_on_litering_pp_film():
    return if_then_else(
        policy2_introduction_time_pp_film() < time(), lambda: 0.75, lambda: 1
    )


@component.add(
    name="Impact of policy2 on litering pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"policy2_introduction_time_pp_bottle": 1, "time": 1},
)
def impact_of_policy2_on_litering_pp_bottle():
    return if_then_else(
        policy2_introduction_time_pp_bottle() < time(), lambda: 0.75, lambda: 1
    )


@component.add(
    name="sent for sorting rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ldpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ldpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_ldpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_other_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_other_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Recycling rejects pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pe_other": 1},
    other_deps={
        "_integ_recycling_rejects_pe_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_pe_other": 1},
        }
    },
)
def recycling_rejects_pe_other():
    return _integ_recycling_rejects_pe_other()


_integ_recycling_rejects_pe_other = Integ(
    lambda: recycling_rejects_rate_pe_other(),
    lambda: 0,
    "_integ_recycling_rejects_pe_other",
)


@component.add(
    name="sent for sorting rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_other_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Incineration idpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_idpe_other": 1},
    other_deps={
        "_integ_incineration_idpe_other": {
            "initial": {},
            "step": {"sent_to_incineration_idpe_other": 1},
        }
    },
)
def incineration_idpe_other():
    return _integ_incineration_idpe_other()


_integ_incineration_idpe_other = Integ(
    lambda: sent_to_incineration_idpe_other(),
    lambda: 0,
    "_integ_incineration_idpe_other",
)


@component.add(
    name="Incineration ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_ldpe_ptt": 1},
    other_deps={
        "_integ_incineration_ldpe_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_ldpe_ptt": 1},
        }
    },
)
def incineration_ldpe_ptt():
    return _integ_incineration_ldpe_ptt()


_integ_incineration_ldpe_ptt = Integ(
    lambda: sent_to_incineration_ldpe_ptt(), lambda: 0, "_integ_incineration_ldpe_ptt"
)


@component.add(
    name="sent for sorting rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pet_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Mechanical recycling ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ldpe_bottle": 1,
        "domestic_recycling_ldpe_bottle": 1,
    },
)
def mechanical_recycling_ldpe_bottle():
    return rate_of_mechanical_recycling_ldpe_bottle() * domestic_recycling_ldpe_bottle()


@component.add(
    name="Incineration Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_other_ptt": 1},
    other_deps={
        "_integ_incineration_other_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_other_ptt": 1},
        }
    },
)
def incineration_other_ptt():
    return _integ_incineration_other_ptt()


_integ_incineration_other_ptt = Integ(
    lambda: sent_to_incineration_other_ptt(), lambda: 0, "_integ_incineration_other_ptt"
)


@component.add(
    name="Incineration pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pe_film": 1},
    other_deps={
        "_integ_incineration_pe_film": {
            "initial": {},
            "step": {"sent_to_incineration_pe_film": 1},
        }
    },
)
def incineration_pe_film():
    return _integ_incineration_pe_film()


_integ_incineration_pe_film = Integ(
    lambda: sent_to_incineration_pe_film(), lambda: 0, "_integ_incineration_pe_film"
)


@component.add(
    name="Incineration pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pe_other": 1},
    other_deps={
        "_integ_incineration_pe_other": {
            "initial": {},
            "step": {"sent_to_incineration_pe_other": 1},
        }
    },
)
def incineration_pe_other():
    return _integ_incineration_pe_other()


_integ_incineration_pe_other = Integ(
    lambda: sent_to_incineration_pe_other(), lambda: 0, "_integ_incineration_pe_other"
)


@component.add(
    name="Incineration pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pe_ptt": 1},
    other_deps={
        "_integ_incineration_pe_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_pe_ptt": 1},
        }
    },
)
def incineration_pe_ptt():
    return _integ_incineration_pe_ptt()


_integ_incineration_pe_ptt = Integ(
    lambda: sent_to_incineration_pe_ptt(), lambda: 0, "_integ_incineration_pe_ptt"
)


@component.add(
    name="Incineration pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pet_bottle": 1},
    other_deps={
        "_integ_incineration_pet_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_pet_bottle": 1},
        }
    },
)
def incineration_pet_bottle():
    return _integ_incineration_pet_bottle()


_integ_incineration_pet_bottle = Integ(
    lambda: sent_to_incineration_pet_bottle(),
    lambda: 0,
    "_integ_incineration_pet_bottle",
)


@component.add(
    name="Rate of chemical recycling other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_other_bottle():
    return 0


@component.add(
    name="Rate of chemical recycling other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_other_film():
    return 0


@component.add(
    name="Rate of chemical recycling other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_other_other():
    return 0


@component.add(
    name="Incineration pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pp_film": 1},
    other_deps={
        "_integ_incineration_pp_film": {
            "initial": {},
            "step": {"sent_to_incineration_pp_film": 1},
        }
    },
)
def incineration_pp_film():
    return _integ_incineration_pp_film()


_integ_incineration_pp_film = Integ(
    lambda: sent_to_incineration_pp_film(), lambda: 0, "_integ_incineration_pp_film"
)


@component.add(
    name="Incineration pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pp_bottle": 1},
    other_deps={
        "_integ_incineration_pp_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_pp_bottle": 1},
        }
    },
)
def incineration_pp_bottle():
    return _integ_incineration_pp_bottle()


_integ_incineration_pp_bottle = Integ(
    lambda: sent_to_incineration_pp_bottle(), lambda: 0, "_integ_incineration_pp_bottle"
)


@component.add(
    name="Rate of chemical recycling pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pe_other():
    return 0


@component.add(
    name="Sent to incineration ldpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ldpe_bottle": 1,
        "domestic_residual_treatment_ldpe_bottle": 1,
    },
)
def sent_to_incineration_ldpe_bottle():
    return incineration_rate_ldpe_bottle() * domestic_residual_treatment_ldpe_bottle()


@component.add(
    name="Sent to incineration idpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ldpe_film": 1,
        "domestic_residual_treatment_idpe_film": 1,
    },
)
def sent_to_incineration_idpe_film():
    return incineration_rate_ldpe_film() * domestic_residual_treatment_idpe_film()


@component.add(
    name="Sent to incineration idpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_ldpe_other": 1,
        "domestic_residual_treatment_idpe_other": 1,
    },
)
def sent_to_incineration_idpe_other():
    return incineration_rate_ldpe_other() * domestic_residual_treatment_idpe_other()


@component.add(
    name="Mechanical recycling pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pp_film": 1,
        "domestic_recycling_pp_film": 1,
    },
)
def mechanical_recycling_pp_film():
    return rate_of_mechanical_recycling_pp_film() * domestic_recycling_pp_film()


@component.add(
    name="Incineration rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ldpe_bottle": 1},
)
def incineration_rate_ldpe_bottle():
    return 1 - landfill_rate_ldpe_bottle()


@component.add(
    name="Incineration rate ldpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ldpe_film": 1},
)
def incineration_rate_ldpe_film():
    return 1 - landfill_rate_ldpe_film()


@component.add(
    name="Incineration rate ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ldpe_other": 1},
)
def incineration_rate_ldpe_other():
    return 1 - landfill_rate_ldpe_other()


@component.add(
    name="Incineration rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ldpe_ptt": 1},
)
def incineration_rate_ldpe_ptt():
    return 1 - landfill_rate_ldpe_ptt()


@component.add(
    name="Sent to incineration Other PTT",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_other_ptt": 1,
        "domestic_residual_treatment_other_ptt": 1,
    },
)
def sent_to_incineration_other_ptt():
    return incineration_rate_other_ptt() * domestic_residual_treatment_other_ptt()


@component.add(
    name="Sent to incineration pe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pe_film": 1,
        "domestic_residual_treatment_pe_film": 1,
    },
)
def sent_to_incineration_pe_film():
    return incineration_rate_pe_film() * domestic_residual_treatment_pe_film()


@component.add(
    name="Sent to incineration pe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pe_other": 1,
        "domestic_residual_treatment_pe_other": 1,
    },
)
def sent_to_incineration_pe_other():
    return incineration_rate_pe_other() * domestic_residual_treatment_pe_other()


@component.add(
    name="Sent to incineration pe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"incineration_rate_pe_ptt": 1, "domestic_residual_treatment_pe_ptt": 1},
)
def sent_to_incineration_pe_ptt():
    return incineration_rate_pe_ptt() * domestic_residual_treatment_pe_ptt()


@component.add(
    name="Sent to incineration pet bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pet_bottle": 1,
        "domestic_residual_treatment_pet_bottle": 1,
    },
)
def sent_to_incineration_pet_bottle():
    return incineration_rate_pet_bottle() * domestic_residual_treatment_pet_bottle()


@component.add(
    name="Incineration rate pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_other": 1},
)
def incineration_rate_pe_other():
    return 1 - landfill_rate_pe_other()


@component.add(
    name="Incineration rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_ptt": 1},
)
def incineration_rate_pe_ptt():
    return 1 - landfill_rate_pe_ptt()


@component.add(
    name="Incineration rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_bottle": 1},
)
def incineration_rate_pet_bottle():
    return 1 - landfill_rate_pet_bottle()


@component.add(
    name="Sent to incineration pp bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pp_bottle": 1,
        "domestic_residual_treatment_pp_bottle": 1,
    },
)
def sent_to_incineration_pp_bottle():
    return incineration_rate_pp_bottle() * domestic_residual_treatment_pp_bottle()


@component.add(
    name="wmc historical other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_other_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate of mechanical recycling other bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_other_bottle():
    return 1


@component.add(
    name="Incineration rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_film": 1},
)
def incineration_rate_pp_film():
    return 1 - landfill_rate_pp_film()


@component.add(
    name="Incineration rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_bottle": 1},
)
def incineration_rate_pp_bottle():
    return 1 - landfill_rate_pp_bottle()


@component.add(
    name="rate of mechanical recycling Other PTT",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_other_ptt():
    return 1


@component.add(
    name="rate of mechanical recycling pe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pe_film():
    return 1


@component.add(
    name="rate of mechanical recycling pe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pe_other():
    return 1


@component.add(
    name="Sent to landfill ldpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_ldpe_bottle": 1,
        "domestic_residual_treatment_ldpe_bottle": 1,
    },
)
def sent_to_landfill_ldpe_bottle():
    return landfill_rate_ldpe_bottle() * domestic_residual_treatment_ldpe_bottle()


@component.add(
    name="Sent to landfill idpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_ldpe_film": 1,
        "domestic_residual_treatment_idpe_film": 1,
    },
)
def sent_to_landfill_idpe_film():
    return landfill_rate_ldpe_film() * domestic_residual_treatment_idpe_film()


@component.add(
    name="Sent to landfill idpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_ldpe_other": 1,
        "domestic_residual_treatment_idpe_other": 1,
    },
)
def sent_to_landfill_idpe_other():
    return landfill_rate_ldpe_other() * domestic_residual_treatment_idpe_other()


@component.add(
    name="Sent to landfill ldpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_ldpe_ptt": 1, "domestic_residual_treatment_ldpe_ptt": 1},
)
def sent_to_landfill_ldpe_ptt():
    return landfill_rate_ldpe_ptt() * domestic_residual_treatment_ldpe_ptt()


@component.add(
    name="Sent to landfill other bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_other_bottle": 1,
        "domestic_residual_treatment_other_bottle": 1,
    },
)
def sent_to_landfill_other_bottle():
    return landfill_rate_other_bottle() * domestic_residual_treatment_other_bottle()


@component.add(
    name="Sent to landfill other film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_other_film": 1,
        "domestic_residual_treatment_other_film": 1,
    },
)
def sent_to_landfill_other_film():
    return landfill_rate_other_film() * domestic_residual_treatment_other_film()


@component.add(
    name="rate of mechanical recycling pp film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pp_film():
    return 1


@component.add(
    name="Littered pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pe_ptt": 1},
    other_deps={
        "_integ_littered_pe_ptt": {"initial": {}, "step": {"littering_pe_ptt": 1}}
    },
)
def littered_pe_ptt():
    return _integ_littered_pe_ptt()


_integ_littered_pe_ptt = Integ(
    lambda: littering_pe_ptt(), lambda: 0, "_integ_littered_pe_ptt"
)


@component.add(
    name="Landfill idpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_idpe_film": 1},
    other_deps={
        "_integ_landfill_idpe_film": {
            "initial": {},
            "step": {"sent_to_landfill_idpe_film": 1},
        }
    },
)
def landfill_idpe_film():
    return _integ_landfill_idpe_film()


_integ_landfill_idpe_film = Integ(
    lambda: sent_to_landfill_idpe_film(), lambda: 0, "_integ_landfill_idpe_film"
)


@component.add(
    name="Landfill idpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_idpe_other": 1},
    other_deps={
        "_integ_landfill_idpe_other": {
            "initial": {},
            "step": {"sent_to_landfill_idpe_other": 1},
        }
    },
)
def landfill_idpe_other():
    return _integ_landfill_idpe_other()


_integ_landfill_idpe_other = Integ(
    lambda: sent_to_landfill_idpe_other(), lambda: 0, "_integ_landfill_idpe_other"
)


@component.add(
    name="Sent to landfill pe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_other": 1, "domestic_residual_treatment_pe_other": 1},
)
def sent_to_landfill_pe_other():
    return landfill_rate_pe_other() * domestic_residual_treatment_pe_other()


@component.add(
    name="Sent to landfill pe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_ptt": 1, "domestic_residual_treatment_pe_ptt": 1},
)
def sent_to_landfill_pe_ptt():
    return landfill_rate_pe_ptt() * domestic_residual_treatment_pe_ptt()


@component.add(
    name="Sent to landfill pet bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pet_bottle": 1,
        "domestic_residual_treatment_pet_bottle": 1,
    },
)
def sent_to_landfill_pet_bottle():
    return landfill_rate_pet_bottle() * domestic_residual_treatment_pet_bottle()


@component.add(
    name="Landfill Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_other_ptt": 1},
    other_deps={
        "_integ_landfill_other_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_other_ptt": 1},
        }
    },
)
def landfill_other_ptt():
    return _integ_landfill_other_ptt()


_integ_landfill_other_ptt = Integ(
    lambda: sent_to_landfill_other_ptt(), lambda: 0, "_integ_landfill_other_ptt"
)


@component.add(
    name="Landfill pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pe_film": 1},
    other_deps={
        "_integ_landfill_pe_film": {
            "initial": {},
            "step": {"sent_to_landfill_pe_film": 1},
        }
    },
)
def landfill_pe_film():
    return _integ_landfill_pe_film()


_integ_landfill_pe_film = Integ(
    lambda: sent_to_landfill_pe_film(), lambda: 0, "_integ_landfill_pe_film"
)


@component.add(
    name="Landfill pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pe_other": 1},
    other_deps={
        "_integ_landfill_pe_other": {
            "initial": {},
            "step": {"sent_to_landfill_pe_other": 1},
        }
    },
)
def landfill_pe_other():
    return _integ_landfill_pe_other()


_integ_landfill_pe_other = Integ(
    lambda: sent_to_landfill_pe_other(), lambda: 0, "_integ_landfill_pe_other"
)


@component.add(
    name="Landfill pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pe_ptt": 1},
    other_deps={
        "_integ_landfill_pe_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_pe_ptt": 1},
        }
    },
)
def landfill_pe_ptt():
    return _integ_landfill_pe_ptt()


_integ_landfill_pe_ptt = Integ(
    lambda: sent_to_landfill_pe_ptt(), lambda: 0, "_integ_landfill_pe_ptt"
)


@component.add(
    name="Landfill pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pet_bottle": 1},
    other_deps={
        "_integ_landfill_pet_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_pet_bottle": 1},
        }
    },
)
def landfill_pet_bottle():
    return _integ_landfill_pet_bottle()


_integ_landfill_pet_bottle = Integ(
    lambda: sent_to_landfill_pet_bottle(), lambda: 213881, "_integ_landfill_pet_bottle"
)


@component.add(
    name="rate of recycling other film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_other_film": 1,
        "historical_on_rate_of_recycling_other_film": 1,
    },
)
def rate_of_recycling_other_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: formulation_for_rate_of_recycling_other_film(),
        lambda: historical_on_rate_of_recycling_other_film(),
    )


@component.add(
    name="rate of recycling other other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_other_other": 1,
        "historical_on_rate_of_recycling_other_other": 1,
    },
)
def rate_of_recycling_other_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: formulation_for_rate_of_recycling_other_other(),
        lambda: historical_on_rate_of_recycling_other_other(),
    )


@component.add(
    name="rate of recycling Other PTT",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_other_ptt": 1,
        "historical_on_rate_of_recycling_other_ptt": 1,
    },
)
def rate_of_recycling_other_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_other_ptt(),
        lambda: historical_on_rate_of_recycling_other_ptt(),
    )


@component.add(
    name="Landfill pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pp_film": 1},
    other_deps={
        "_integ_landfill_pp_film": {
            "initial": {},
            "step": {"sent_to_landfill_pp_film": 1},
        }
    },
)
def landfill_pp_film():
    return _integ_landfill_pp_film()


_integ_landfill_pp_film = Integ(
    lambda: sent_to_landfill_pp_film(), lambda: 0, "_integ_landfill_pp_film"
)


@component.add(
    name="Landfill pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pp_bottle": 1},
    other_deps={
        "_integ_landfill_pp_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_pp_bottle": 1},
        }
    },
)
def landfill_pp_bottle():
    return _integ_landfill_pp_bottle()


_integ_landfill_pp_bottle = Integ(
    lambda: sent_to_landfill_pp_bottle(), lambda: 0, "_integ_landfill_pp_bottle"
)


@component.add(
    name="Sorting ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ldpe_bottle": 1},
    other_deps={
        "_integ_sorting_ldpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_ldpe_bottle": 1,
                "sent_for_recycling_ldpe_bottle": 1,
                "recycling_rejects_rate_ldpe_bottle": 1,
                "sent_for_overseas_treatment_ldpe_bottle": 1,
            },
        }
    },
)
def sorting_ldpe_bottle():
    return _integ_sorting_ldpe_bottle()


_integ_sorting_ldpe_bottle = Integ(
    lambda: sent_for_sorting_ldpe_bottle()
    - sent_for_recycling_ldpe_bottle()
    - recycling_rejects_rate_ldpe_bottle()
    - sent_for_overseas_treatment_ldpe_bottle(),
    lambda: 0,
    "_integ_sorting_ldpe_bottle",
)


@component.add(
    name="Sorting idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_idpe_film": 1},
    other_deps={
        "_integ_sorting_idpe_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_idpe_film": 1,
                "sent_for_recycling_idpe_film": 1,
                "recycling_rejects_rate_idpe_film": 1,
                "sent_for_overseas_treatment_idpe_film": 1,
            },
        }
    },
)
def sorting_idpe_film():
    return _integ_sorting_idpe_film()


_integ_sorting_idpe_film = Integ(
    lambda: sent_for_sorting_idpe_film()
    - sent_for_recycling_idpe_film()
    - recycling_rejects_rate_idpe_film()
    - sent_for_overseas_treatment_idpe_film(),
    lambda: 148839,
    "_integ_sorting_idpe_film",
)


@component.add(
    name="Sorting ldpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ldpe_other": 1},
    other_deps={
        "_integ_sorting_ldpe_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_idpe_other": 1,
                "sent_for_recycling_idpe_other": 1,
                "recycling_rejects_rate_idpe_other": 1,
                "sent_for_overseas_treatment_idpe_other": 1,
            },
        }
    },
)
def sorting_ldpe_other():
    return _integ_sorting_ldpe_other()


_integ_sorting_ldpe_other = Integ(
    lambda: sent_for_sorting_idpe_other()
    - sent_for_recycling_idpe_other()
    - recycling_rejects_rate_idpe_other()
    - sent_for_overseas_treatment_idpe_other(),
    lambda: 9418,
    "_integ_sorting_ldpe_other",
)


@component.add(
    name="Sorting ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_ldpe_ptt": 1},
    other_deps={
        "_integ_sorting_ldpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_ldpe_ptt": 1,
                "sent_for_recycling_ldpe_ptt": 1,
                "recycling_rejects_rate_ldpe_ptt": 1,
                "sent_for_overseas_treatment_ldpe_ptt": 1,
            },
        }
    },
)
def sorting_ldpe_ptt():
    return _integ_sorting_ldpe_ptt()


_integ_sorting_ldpe_ptt = Integ(
    lambda: sent_for_sorting_ldpe_ptt()
    - sent_for_recycling_ldpe_ptt()
    - recycling_rejects_rate_ldpe_ptt()
    - sent_for_overseas_treatment_ldpe_ptt(),
    lambda: 411,
    "_integ_sorting_ldpe_ptt",
)


@component.add(
    name="Sorting other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_other_bottle": 1},
    other_deps={
        "_integ_sorting_other_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_other_bottle": 1,
                "sent_for_recycling_other_bottle": 1,
                "recycling_rejects_rate_other_bottle": 1,
                "sent_for_overseas_treatment_other_bottle": 1,
            },
        }
    },
)
def sorting_other_bottle():
    return _integ_sorting_other_bottle()


_integ_sorting_other_bottle = Integ(
    lambda: sent_for_sorting_other_bottle()
    - sent_for_recycling_other_bottle()
    - recycling_rejects_rate_other_bottle()
    - sent_for_overseas_treatment_other_bottle(),
    lambda: 0,
    "_integ_sorting_other_bottle",
)


@component.add(
    name="landfill rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Sorting other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_other_film": 1},
    other_deps={
        "_integ_sorting_other_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_other_film": 1,
                "sent_for_recycling_other_film": 1,
                "recycling_rejects_rate_other_film": 1,
                "sent_for_overseas_treatment_other_film": 1,
            },
        }
    },
)
def sorting_other_film():
    return _integ_sorting_other_film()


_integ_sorting_other_film = Integ(
    lambda: sent_for_sorting_other_film()
    - sent_for_recycling_other_film()
    - recycling_rejects_rate_other_film()
    - sent_for_overseas_treatment_other_film(),
    lambda: 7780,
    "_integ_sorting_other_film",
)


@component.add(
    name="Sorting other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_other_other": 1},
    other_deps={
        "_integ_sorting_other_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_other_other": 1,
                "sent_for_recycling_other_other": 1,
                "recycling_rejects_rate_other_other": 1,
                "sent_for_overseas_treatment_other_other": 1,
            },
        }
    },
)
def sorting_other_other():
    return _integ_sorting_other_other()


_integ_sorting_other_other = Integ(
    lambda: sent_for_sorting_other_other()
    - sent_for_recycling_other_other()
    - recycling_rejects_rate_other_other()
    - sent_for_overseas_treatment_other_other(),
    lambda: 0,
    "_integ_sorting_other_other",
)


@component.add(
    name="landfill rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Sorting pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pe_other": 1},
    other_deps={
        "_integ_sorting_pe_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_pe_other": 1,
                "sent_for_recycling_pe_other": 1,
                "recycling_rejects_rate_pe_other": 1,
                "sent_for_overseas_treatment_pe_other": 1,
            },
        }
    },
)
def sorting_pe_other():
    return _integ_sorting_pe_other()


_integ_sorting_pe_other = Integ(
    lambda: sent_for_sorting_pe_other()
    - sent_for_recycling_pe_other()
    - recycling_rejects_rate_pe_other()
    - sent_for_overseas_treatment_pe_other(),
    lambda: 408,
    "_integ_sorting_pe_other",
)


@component.add(
    name="landfill rate other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="Sorting pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pp_bottle": 1},
    other_deps={
        "_integ_sorting_pp_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_pp_bottle": 1,
                "sent_for_recycling_pp_bottle": 1,
                "recycling_rejects_rate_pp_bottle": 1,
                "sent_for_overseas_treatment_pp_bottle": 1,
            },
        }
    },
)
def sorting_pp_bottle():
    return _integ_sorting_pp_bottle()


_integ_sorting_pp_bottle = Integ(
    lambda: sent_for_sorting_pp_bottle()
    - sent_for_recycling_pp_bottle()
    - recycling_rejects_rate_pp_bottle()
    - sent_for_overseas_treatment_pp_bottle(),
    lambda: 6989,
    "_integ_sorting_pp_bottle",
)


@component.add(
    name="rate of recycling reject other other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "historical_on_recycling_other_other": 2,
        "formulation_for_recycling_rate_other_other": 1,
    },
)
def rate_of_recycling_reject_other_other():
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: historical_on_recycling_other_other()
        * formulation_for_recycling_rate_other_other(),
        lambda: historical_on_recycling_other_other(),
    )


@component.add(
    name="rate of recycling reject Other PTT",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_other_ptt": 1,
        "historical_on_recycling_other_ptt": 2,
    },
)
def rate_of_recycling_reject_other_ptt():
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: historical_on_recycling_other_ptt()
        * formulation_for_recycling_rate_other_ptt(),
        lambda: historical_on_recycling_other_ptt(),
    )


@component.add(
    name="Overseas treatment pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pe_film": 1},
    other_deps={
        "_integ_overseas_treatment_pe_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pe_film": 1},
        }
    },
)
def overseas_treatment_pe_film():
    return _integ_overseas_treatment_pe_film()


_integ_overseas_treatment_pe_film = Integ(
    lambda: sent_for_overseas_treatment_pe_film(),
    lambda: 0,
    "_integ_overseas_treatment_pe_film",
)


@component.add(
    name="landfill rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="rate of recycling reject pe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "formulation_for_recycling_rate_pe_other": 1,
        "historical_on_recycling_pe_other": 2,
    },
)
def rate_of_recycling_reject_pe_other():
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: historical_on_recycling_pe_other()
        * formulation_for_recycling_rate_pe_other(),
        lambda: historical_on_recycling_pe_other(),
    )


@component.add(
    name="rvm historical other bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_other_bottle():
    return 0


@component.add(
    name="to waste generated ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_ldpe_bottle": 1},
)
def to_waste_generated_ldpe_bottle():
    return total_pom_ldpe_bottle()


@component.add(
    name="to waste generated idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_idpe_other": 1},
)
def to_waste_generated_idpe_other():
    return total_pom_idpe_other()


@component.add(
    name="rate of recycling reject pp bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_bottle": 1,
        "time": 1,
        "historical_on_recycling_pp_bottle": 2,
        "formulation_for_recycling_rate_pp_bottle": 1,
    },
)
def rate_of_recycling_reject_pp_bottle():
    return if_then_else(
        policy1_introduction_time_pp_bottle() < time(),
        lambda: historical_on_recycling_pp_bottle()
        * formulation_for_recycling_rate_pp_bottle(),
        lambda: historical_on_recycling_pp_bottle(),
    )


@component.add(
    name="sent for sorting Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_other_ptt": 1,
        "sent_for_sorting_rate_other_ptt": 1,
    },
)
def sent_for_sorting_other_ptt():
    return formal_domestic_treatment_other_ptt() * sent_for_sorting_rate_other_ptt()


@component.add(
    name="Littered idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_idpe_film": 1},
    other_deps={
        "_integ_littered_idpe_film": {"initial": {}, "step": {"littering_idpe_film": 1}}
    },
)
def littered_idpe_film():
    return _integ_littered_idpe_film()


_integ_littered_idpe_film = Integ(
    lambda: littering_idpe_film(), lambda: 0, "_integ_littered_idpe_film"
)


@component.add(
    name="Littered ldpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_ldpe_other": 1},
    other_deps={
        "_integ_littered_ldpe_other": {
            "initial": {},
            "step": {"littering_ldpe_other": 1},
        }
    },
)
def littered_ldpe_other():
    return _integ_littered_ldpe_other()


_integ_littered_ldpe_other = Integ(
    lambda: littering_ldpe_other(), lambda: 0, "_integ_littered_ldpe_other"
)


@component.add(
    name="to waste generated Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_other_ptt": 1},
)
def to_waste_generated_other_ptt():
    return total_pom_other_ptt()


@component.add(
    name="to waste generated pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pe_film": 1},
)
def to_waste_generated_pe_film():
    return total_pom_pe_film()


@component.add(
    name="to waste generated pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pe_other": 1},
)
def to_waste_generated_pe_other():
    return total_pom_pe_other()


@component.add(
    name="Littered other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_other_other": 1},
    other_deps={
        "_integ_littered_other_other": {
            "initial": {},
            "step": {"littering_other_other": 1},
        }
    },
)
def littered_other_other():
    return _integ_littered_other_other()


_integ_littered_other_other = Integ(
    lambda: littering_other_other(), lambda: 0, "_integ_littered_other_other"
)


@component.add(
    name="Littered Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_other_ptt": 1},
    other_deps={
        "_integ_littered_other_ptt": {"initial": {}, "step": {"littering_other_ptt": 1}}
    },
)
def littered_other_ptt():
    return _integ_littered_other_ptt()


_integ_littered_other_ptt = Integ(
    lambda: littering_other_ptt(), lambda: 0, "_integ_littered_other_ptt"
)


@component.add(
    name="Littered pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pe_film": 1},
    other_deps={
        "_integ_littered_pe_film": {"initial": {}, "step": {"littering_pe_film": 1}}
    },
)
def littered_pe_film():
    return _integ_littered_pe_film()


_integ_littered_pe_film = Integ(
    lambda: littering_pe_film(), lambda: 0, "_integ_littered_pe_film"
)


@component.add(
    name="Littered pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pe_other": 1},
    other_deps={
        "_integ_littered_pe_other": {"initial": {}, "step": {"littering_pe_other": 1}}
    },
)
def littered_pe_other():
    return _integ_littered_pe_other()


_integ_littered_pe_other = Integ(
    lambda: littering_pe_other(), lambda: 0, "_integ_littered_pe_other"
)


@component.add(
    name="Sent for recycling other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_other_other": 1,
        "rate_sent_for_domestic_recycling_other_other": 1,
    },
)
def sent_for_recycling_other_other():
    return sorting_other_other() * rate_sent_for_domestic_recycling_other_other()


@component.add(
    name="Littered pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pet_bottle": 1},
    other_deps={
        "_integ_littered_pet_bottle": {
            "initial": {},
            "step": {"littering_pet_bottle": 1},
        }
    },
)
def littered_pet_bottle():
    return _integ_littered_pet_bottle()


_integ_littered_pet_bottle = Integ(
    lambda: littering_pet_bottle(), lambda: 0, "_integ_littered_pet_bottle"
)


@component.add(
    name="rate overseas other film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_other_film": 1,
        "historical_overseas_rate_other_film": 1,
    },
)
def rate_overseas_other_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_other_film() < time(),
        lambda: formulation_of_overseas_rate_other_film(),
        lambda: historical_overseas_rate_other_film(),
    )


@component.add(
    name="rate overseas other other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_other_other": 1,
        "historical_overseas_rate_other_other": 1,
    },
)
def rate_overseas_other_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_other_other() < time(),
        lambda: formulation_of_overseas_rate_other_other(),
        lambda: historical_overseas_rate_other_other(),
    )


@component.add(
    name="rate overseas Other PTT",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_other_ptt": 1,
        "historical_overseas_rate_other_ptt": 1,
    },
)
def rate_overseas_other_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_other_ptt() < time(),
        lambda: formulation_of_overseas_rate_other_ptt(),
        lambda: historical_overseas_rate_other_ptt(),
    )


@component.add(
    name="Recycling rejects other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_other_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_other_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_other_bottle": 1},
        }
    },
)
def recycling_rejects_other_bottle():
    return _integ_recycling_rejects_other_bottle()


_integ_recycling_rejects_other_bottle = Integ(
    lambda: recycling_rejects_rate_other_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_other_bottle",
)


@component.add(
    name="Littered pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pp_bottle": 1},
    other_deps={
        "_integ_littered_pp_bottle": {"initial": {}, "step": {"littering_pp_bottle": 1}}
    },
)
def littered_pp_bottle():
    return _integ_littered_pp_bottle()


_integ_littered_pp_bottle = Integ(
    lambda: littering_pp_bottle(), lambda: 0, "_integ_littered_pp_bottle"
)


@component.add(
    name="rate overseas pe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_pe_ptt": 1,
        "historical_overseas_rate_pe_ptt": 1,
    },
)
def rate_overseas_pe_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: formulation_of_overseas_rate_pe_ptt(),
        lambda: historical_overseas_rate_pe_ptt(),
    )


@component.add(
    name="rate overseas pet bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_pet_bottle": 1,
        "historical_overseas_rate_pet_bottle": 1,
    },
)
def rate_overseas_pet_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pet_bottle() < time(),
        lambda: formulation_of_overseas_rate_pet_bottle(),
        lambda: historical_overseas_rate_pet_bottle(),
    )


@component.add(
    name="rate overseas pp film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_pp_film": 1,
        "historical_overseas_rate_pp_film": 1,
    },
)
def rate_overseas_pp_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: formulation_of_overseas_rate_pp_film(),
        lambda: historical_overseas_rate_pp_film(),
    )


@component.add(
    name="sent for sorting rate pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="littering ldpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_ldpe_other": 1, "waste_generated_ldpe_other": 1},
)
def littering_ldpe_other():
    return littering_rate_ldpe_other() * waste_generated_ldpe_other()


@component.add(
    name="littering other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_other_other": 1, "waste_generated_other_other": 1},
)
def littering_other_other():
    return littering_rate_other_other() * waste_generated_other_other()


@component.add(
    name="littering Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_other_ptt": 1, "waste_generated_other_ptt": 1},
)
def littering_other_ptt():
    return littering_rate_other_ptt() * waste_generated_other_ptt()


@component.add(
    name="littering pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pe_film": 1, "waste_generated_pe_film": 1},
)
def littering_pe_film():
    return littering_rate_pe_film() * waste_generated_pe_film()


@component.add(
    name="littering pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pe_other": 1, "waste_generated_pe_other": 1},
)
def littering_pe_other():
    return littering_rate_pe_other() * waste_generated_pe_other()


@component.add(
    name="littering pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pe_ptt": 1, "waste_generated_pe_ptt": 1},
)
def littering_pe_ptt():
    return littering_rate_pe_ptt() * waste_generated_pe_ptt()


@component.add(
    name="littering pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pet_bottle": 1, "waste_generated_pet_bottle": 1},
)
def littering_pet_bottle():
    return littering_rate_pet_bottle() * waste_generated_pet_bottle()


@component.add(
    name="rate sent for domestic recycling other film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_other_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_other_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_other_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="recycling rejects rate other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_other_other": 1, "sorting_other_other": 1},
)
def recycling_rejects_rate_other_other():
    return rate_of_recycling_reject_other_other() * sorting_other_other()


@component.add(
    name="littering pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pp_bottle": 1, "waste_generated_pp_bottle": 1},
)
def littering_pp_bottle():
    return littering_rate_pp_bottle() * waste_generated_pp_bottle()


@component.add(
    name="rate sent for domestic recycling pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pet_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Sent for overseas treatment other film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_other_film": 1, "sorting_other_film": 1},
)
def sent_for_overseas_treatment_other_film():
    return overseas_treament_rate_other_film() * sorting_other_film()


@component.add(
    name="Sent for overseas treatment other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_other_other": 1, "sorting_other_other": 1},
)
def sent_for_overseas_treatment_other_other():
    return overseas_treament_rate_other_other() * sorting_other_other()


@component.add(
    name="Sent to incineration other film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_other_film": 1,
        "domestic_residual_treatment_other_film": 1,
    },
)
def sent_to_incineration_other_film():
    return incineration_rate_other_film() * domestic_residual_treatment_other_film()


@component.add(
    name="rate sent for domestic recycling pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pp_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="littering rate formulation idpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_idpe_other():
    return 0.01


@component.add(
    name="littering rate formulation ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_ldpe_ptt():
    return 0.01


@component.add(
    name="littering rate formulation Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_other_ptt():
    return 0.01


@component.add(
    name="littering rate formulation pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pe_film():
    return 0.01


@component.add(
    name="littering rate formulation pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pe_other():
    return 0.01


@component.add(
    name="littering rate formulation pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pe_ptt():
    return 0.01


@component.add(
    name="rate sent for reuse other bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_other_bottle():
    return 0


@component.add(
    name="rate sent for reuse other film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_other_film():
    return 0


@component.add(
    name="littering rate formulation pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pp_film():
    return 0.01


@component.add(
    name="rate sent for reuse Other PTT",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_other_ptt():
    return 0


@component.add(
    name="rate sent for reuse pe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pe_other():
    return 0


@component.add(
    name="rate sent for reuse pe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pe_ptt():
    return 0


@component.add(
    name="rate sent for reuse pet bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pet_bottle():
    return 0


@component.add(
    name="wmc historical pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pp_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="Waste generated Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_other_ptt": 1},
    other_deps={
        "_integ_waste_generated_other_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_other_ptt": 1,
                "illegal_collection_data_other_ptt": 2,
                "littering_other_ptt": 1,
                "formal_waste_collection_other_ptt": 1,
            },
        }
    },
)
def waste_generated_other_ptt():
    return _integ_waste_generated_other_ptt()


_integ_waste_generated_other_ptt = Integ(
    lambda: to_waste_generated_other_ptt()
    - illegal_collection_data_other_ptt()
    - littering_other_ptt()
    - formal_waste_collection_other_ptt()
    - illegal_collection_data_other_ptt(),
    lambda: 1882.99,
    "_integ_waste_generated_other_ptt",
)


@component.add(
    name="Waste collected ldpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_ldpe_bottle": 1},
    other_deps={
        "_integ_waste_collected_ldpe_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_ldpe_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_ldpe_bottle": 1,
            },
        }
    },
)
def waste_collected_ldpe_bottle():
    return _integ_waste_collected_ldpe_bottle()


_integ_waste_collected_ldpe_bottle = Integ(
    lambda: formal_waste_collection_ldpe_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_ldpe_bottle(),
    lambda: 0,
    "_integ_waste_collected_ldpe_bottle",
)


@component.add(
    name="rate sent for reuse pp film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pp_film():
    return 0


@component.add(
    name="Sent to landfill pe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pe_film": 1, "domestic_residual_treatment_pe_film": 1},
)
def sent_to_landfill_pe_film():
    return landfill_rate_pe_film() * domestic_residual_treatment_pe_film()


@component.add(
    name="Overseas treament rate ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ldpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Waste generated pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pp_film": 1},
    other_deps={
        "_integ_waste_generated_pp_film": {
            "initial": {},
            "step": {
                "to_waste_generated_pp_film": 1,
                "illegal_collection_data_pp_film": 2,
                "littering_pp_film": 1,
                "formal_waste_collection_pp_film": 1,
            },
        }
    },
)
def waste_generated_pp_film():
    return _integ_waste_generated_pp_film()


_integ_waste_generated_pp_film = Integ(
    lambda: to_waste_generated_pp_film()
    - illegal_collection_data_pp_film()
    - littering_pp_film()
    - formal_waste_collection_pp_film()
    - illegal_collection_data_pp_film(),
    lambda: 125219,
    "_integ_waste_generated_pp_film",
)


@component.add(
    name="Waste collected other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_other_film": 1},
    other_deps={
        "_integ_waste_collected_other_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_other_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_other_film": 1,
            },
        }
    },
)
def waste_collected_other_film():
    return _integ_waste_collected_other_film()


_integ_waste_collected_other_film = Integ(
    lambda: formal_waste_collection_other_film()
    - waste_collected_sent_to_formal_domestic_treatment_other_film(),
    lambda: 17065,
    "_integ_waste_collected_other_film",
)


@component.add(
    name="Waste collected other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_other_other": 1},
    other_deps={
        "_integ_waste_collected_other_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_other_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_other_other": 1,
            },
        }
    },
)
def waste_collected_other_other():
    return _integ_waste_collected_other_other()


_integ_waste_collected_other_other = Integ(
    lambda: formal_waste_collection_other_other()
    - waste_collected_sent_to_formal_domestic_treatment_other_other(),
    lambda: 0,
    "_integ_waste_collected_other_other",
)


@component.add(
    name="Waste collected Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_other_ptt": 1},
    other_deps={
        "_integ_waste_collected_other_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_other_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_other_ptt": 1,
            },
        }
    },
)
def waste_collected_other_ptt():
    return _integ_waste_collected_other_ptt()


_integ_waste_collected_other_ptt = Integ(
    lambda: formal_waste_collection_other_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_other_ptt(),
    lambda: 1796,
    "_integ_waste_collected_other_ptt",
)


@component.add(
    name="littering rate historical data other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_other_bottle():
    return 0.04


@component.add(
    name="littering rate historical data other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_other_film():
    return 0.04


@component.add(
    name="littering rate historical data other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_other_other():
    return 0.04


@component.add(
    name="littering rate historical data Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_other_ptt():
    return 0.04


@component.add(
    name="Waste collected pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pet_bottle": 1},
    other_deps={
        "_integ_waste_collected_pet_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_pet_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pet_bottle": 1,
            },
        }
    },
)
def waste_collected_pet_bottle():
    return _integ_waste_collected_pet_bottle()


_integ_waste_collected_pet_bottle = Integ(
    lambda: formal_waste_collection_pet_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_pet_bottle(),
    lambda: 396997,
    "_integ_waste_collected_pet_bottle",
)


@component.add(
    name="littering rate historical data pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pe_other():
    return 0.04


@component.add(
    name="littering rate historical data pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pe_ptt():
    return 0.04


@component.add(
    name="rate to illegal collection Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_other_ptt():
    return 0.006


@component.add(
    name="rate to illegal collection pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pe_film():
    return 0.006


@component.add(
    name="rate to illegal collection pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pe_other():
    return 0.006


@component.add(
    name="littering rate historical data pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pp_film():
    return 0.04


@component.add(
    name="littering rate historical data pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pp_bottle():
    return 0.04


@component.add(
    name="Waste collected sent to formal domestic treatment ldpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_ldpe_bottle": 1,
        "waste_collected_ldpe_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_ldpe_bottle():
    return sent_for_formal_domestic_ldpe_bottle() * waste_collected_ldpe_bottle()


@component.add(
    name="Waste collected sent to formal domestic treatment ldpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_ldpe_ptt": 1, "waste_collected_ldpe_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_ldpe_ptt():
    return sent_for_formal_domestic_ldpe_ptt() * waste_collected_ldpe_ptt()


@component.add(
    name="Waste collected sent to formal domestic treatment other other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_other_other": 1,
        "waste_collected_other_other": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_other_other():
    return sent_for_formal_domestic_other_other() * waste_collected_other_other()


@component.add(
    name="Waste collected sent to formal domestic treatment Other PTT",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_other_ptt": 1,
        "waste_collected_other_ptt": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_other_ptt():
    return sent_for_formal_domestic_other_ptt() * waste_collected_other_ptt()


@component.add(
    name="Waste collected sent to formal domestic treatment pe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pe_film": 1, "waste_collected_pe_film": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pe_film():
    return sent_for_formal_domestic_pe_film() * waste_collected_pe_film()


@component.add(
    name="Waste collected sent to formal domestic treatment pe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pe_other": 1, "waste_collected_pe_other": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pe_other():
    return sent_for_formal_domestic_pe_other() * waste_collected_pe_other()


@component.add(
    name="Waste collected sent to formal domestic treatment pet bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pet_bottle": 1,
        "waste_collected_pet_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pet_bottle():
    return sent_for_formal_domestic_pet_bottle() * waste_collected_pet_bottle()


@component.add(
    name="Overseas treatment pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pe_other": 1},
    other_deps={
        "_integ_overseas_treatment_pe_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pe_other": 1},
        }
    },
)
def overseas_treatment_pe_other():
    return _integ_overseas_treatment_pe_other()


_integ_overseas_treatment_pe_other = Integ(
    lambda: sent_for_overseas_treatment_pe_other(),
    lambda: 0,
    "_integ_overseas_treatment_pe_other",
)


@component.add(
    name="Waste collected sent to formal domestic treatment pp bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pp_bottle": 1,
        "waste_collected_pp_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pp_bottle():
    return sent_for_formal_domestic_pp_bottle() * waste_collected_pp_bottle()


@component.add(
    name="Recycled chemically other film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_other_film": 1},
    other_deps={
        "_integ_recycled_chemically_other_film": {
            "initial": {},
            "step": {"chemical_recycling_other_film": 1},
        }
    },
)
def recycled_chemically_other_film():
    return _integ_recycled_chemically_other_film()


_integ_recycled_chemically_other_film = Integ(
    lambda: chemical_recycling_other_film(),
    lambda: 0,
    "_integ_recycled_chemically_other_film",
)


@component.add(
    name="Recycled chemically Other PTT",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_other_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_other_ptt": {
            "initial": {},
            "step": {"chemical_recycling_other_ptt": 1},
        }
    },
)
def recycled_chemically_other_ptt():
    return _integ_recycled_chemically_other_ptt()


_integ_recycled_chemically_other_ptt = Integ(
    lambda: chemical_recycling_other_ptt(),
    lambda: 0,
    "_integ_recycled_chemically_other_ptt",
)


@component.add(
    name="Recycled chemically pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pe_film": 1},
    other_deps={
        "_integ_recycled_chemically_pe_film": {
            "initial": {},
            "step": {"chemical_recycling_pe_film": 1},
        }
    },
)
def recycled_chemically_pe_film():
    return _integ_recycled_chemically_pe_film()


_integ_recycled_chemically_pe_film = Integ(
    lambda: chemical_recycling_pe_film(),
    lambda: 0,
    "_integ_recycled_chemically_pe_film",
)


@component.add(
    name="Recycled chemically pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pe_other": 1},
    other_deps={
        "_integ_recycled_chemically_pe_other": {
            "initial": {},
            "step": {"chemical_recycling_pe_other": 1},
        }
    },
)
def recycled_chemically_pe_other():
    return _integ_recycled_chemically_pe_other()


_integ_recycled_chemically_pe_other = Integ(
    lambda: chemical_recycling_pe_other(),
    lambda: 0,
    "_integ_recycled_chemically_pe_other",
)


@component.add(
    name="Recycled chemically pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pe_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_pe_ptt": {
            "initial": {},
            "step": {"chemical_recycling_pe_ptt": 1},
        }
    },
)
def recycled_chemically_pe_ptt():
    return _integ_recycled_chemically_pe_ptt()


_integ_recycled_chemically_pe_ptt = Integ(
    lambda: chemical_recycling_pe_ptt(), lambda: 0, "_integ_recycled_chemically_pe_ptt"
)


@component.add(
    name="Recycled chemically pet bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pet_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_pet_bottle": {
            "initial": {},
            "step": {"chemical_recycling_pet_bottle": 1},
        }
    },
)
def recycled_chemically_pet_bottle():
    return _integ_recycled_chemically_pet_bottle()


_integ_recycled_chemically_pet_bottle = Integ(
    lambda: chemical_recycling_pet_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_pet_bottle",
)


@component.add(
    name="sent for sorting other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_other_other": 1,
        "sent_for_sorting_rate_other_other": 1,
    },
)
def sent_for_sorting_other_other():
    return formal_domestic_treatment_other_other() * sent_for_sorting_rate_other_other()


@component.add(
    name="Waste generated ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ldpe_bottle": 1},
    other_deps={
        "_integ_waste_generated_ldpe_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_ldpe_bottle": 1,
                "illegal_collection_data_ldpe_bottle": 2,
                "littering_ldpe_bottle": 1,
                "formal_waste_collection_ldpe_bottle": 1,
            },
        }
    },
)
def waste_generated_ldpe_bottle():
    return _integ_waste_generated_ldpe_bottle()


_integ_waste_generated_ldpe_bottle = Integ(
    lambda: to_waste_generated_ldpe_bottle()
    - illegal_collection_data_ldpe_bottle()
    - littering_ldpe_bottle()
    - formal_waste_collection_ldpe_bottle()
    - illegal_collection_data_ldpe_bottle(),
    lambda: 0,
    "_integ_waste_generated_ldpe_bottle",
)


@component.add(
    name="Waste generated idpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_idpe_film": 1},
    other_deps={
        "_integ_waste_generated_idpe_film": {
            "initial": {},
            "step": {
                "to_waste_generated_idpe_film": 1,
                "illegal_collection_data_idpe_film": 2,
                "littering_idpe_film": 1,
                "formal_waste_collection_idpe_film": 1,
            },
        }
    },
)
def waste_generated_idpe_film():
    return _integ_waste_generated_idpe_film()


_integ_waste_generated_idpe_film = Integ(
    lambda: to_waste_generated_idpe_film()
    - illegal_collection_data_idpe_film()
    - littering_idpe_film()
    - formal_waste_collection_idpe_film()
    - illegal_collection_data_idpe_film(),
    lambda: 342703,
    "_integ_waste_generated_idpe_film",
)


@component.add(
    name="sent for sorting pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pe_ptt": 1,
        "sent_for_sorting_rate_pe_ptt": 1,
    },
)
def sent_for_sorting_pe_ptt():
    return formal_domestic_treatment_pe_ptt() * sent_for_sorting_rate_pe_ptt()


@component.add(
    name="Waste generated other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_other_bottle": 1},
    other_deps={
        "_integ_waste_generated_other_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_other_bottle": 1,
                "illegal_collection_data_other_bottle": 2,
                "littering_other_bottle": 1,
                "formal_waste_collection_other_bottle": 1,
            },
        }
    },
)
def waste_generated_other_bottle():
    return _integ_waste_generated_other_bottle()


_integ_waste_generated_other_bottle = Integ(
    lambda: to_waste_generated_other_bottle()
    - illegal_collection_data_other_bottle()
    - littering_other_bottle()
    - formal_waste_collection_other_bottle()
    - illegal_collection_data_other_bottle(),
    lambda: 0,
    "_integ_waste_generated_other_bottle",
)


@component.add(
    name="Waste generated other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_other_other": 1},
    other_deps={
        "_integ_waste_generated_other_other": {
            "initial": {},
            "step": {
                "to_waste_generated_other_other": 1,
                "illegal_collection_data_other_other": 2,
                "littering_other_other": 1,
                "formal_waste_collection_other_other": 1,
            },
        }
    },
)
def waste_generated_other_other():
    return _integ_waste_generated_other_other()


_integ_waste_generated_other_other = Integ(
    lambda: to_waste_generated_other_other()
    - illegal_collection_data_other_other()
    - littering_other_other()
    - formal_waste_collection_other_other()
    - illegal_collection_data_other_other(),
    lambda: 0,
    "_integ_waste_generated_other_other",
)


@component.add(
    name="rate dumped pe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pe_ptt():
    return 0.006


@component.add(
    name="Recycling rejects ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_ldpe_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_ldpe_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_ldpe_ptt": 1},
        }
    },
)
def recycling_rejects_ldpe_ptt():
    return _integ_recycling_rejects_ldpe_ptt()


_integ_recycling_rejects_ldpe_ptt = Integ(
    lambda: recycling_rejects_rate_ldpe_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_ldpe_ptt",
)


@component.add(
    name="Waste generated pp bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pp_bottle": 1},
    other_deps={
        "_integ_waste_generated_pp_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_pp_bottle": 1,
                "illegal_collection_data_pp_bottle": 2,
                "littering_pp_bottle": 1,
                "formal_waste_collection_pp_bottle": 1,
            },
        }
    },
)
def waste_generated_pp_bottle():
    return _integ_waste_generated_pp_bottle()


_integ_waste_generated_pp_bottle = Integ(
    lambda: to_waste_generated_pp_bottle()
    - illegal_collection_data_pp_bottle()
    - littering_pp_bottle()
    - formal_waste_collection_pp_bottle()
    - illegal_collection_data_pp_bottle(),
    lambda: 16005.4,
    "_integ_waste_generated_pp_bottle",
)


@component.add(
    name="rate dumped pp film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pp_film():
    return 0.006


@component.add(
    name="Recycling rejects pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pe_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_pe_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_pe_ptt": 1},
        }
    },
)
def recycling_rejects_pe_ptt():
    return _integ_recycling_rejects_pe_ptt()


_integ_recycling_rejects_pe_ptt = Integ(
    lambda: recycling_rejects_rate_pe_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_pe_ptt",
)


@component.add(
    name="Recycling rejects pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pet_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_pet_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_pet_bottle": 1},
        }
    },
)
def recycling_rejects_pet_bottle():
    return _integ_recycling_rejects_pet_bottle()


_integ_recycling_rejects_pet_bottle = Integ(
    lambda: recycling_rejects_rate_pet_bottle(),
    lambda: 0,
    "_integ_recycling_rejects_pet_bottle",
)


@component.add(
    name="sent for sorting rate pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Overseas treament rate pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="wmc collected formulation ldpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ldpe_bottle():
    return 0.25


@component.add(
    name="wmc collected formulation idpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_idpe_film():
    return 0.25


@component.add(
    name="Mechanical recycling idpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ldpe_other": 1,
        "domestic_recycling_ldpe_other": 1,
    },
)
def mechanical_recycling_idpe_other():
    return rate_of_mechanical_recycling_ldpe_other() * domestic_recycling_ldpe_other()


@component.add(
    name="Mechanical recycling ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_ldpe_ptt": 1,
        "domestic_recycling_ldpe_ptt": 1,
    },
)
def mechanical_recycling_ldpe_ptt():
    return rate_of_mechanical_recycling_ldpe_ptt() * domestic_recycling_ldpe_ptt()


@component.add(
    name="wmc collected formulation other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_other_bottle():
    return 0.25


@component.add(
    name="wmc collected formulation other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_other_film():
    return 0.25


@component.add(
    name="Mechanical recycling other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_other_other": 1,
        "domestic_recycling_other_other": 1,
    },
)
def mechanical_recycling_other_other():
    return rate_of_mechanical_recycling_other_other() * domestic_recycling_other_other()


@component.add(
    name="Mechanical recycling Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_other_ptt": 1,
        "domestic_recycling_other_ptt": 1,
    },
)
def mechanical_recycling_other_ptt():
    return rate_of_mechanical_recycling_other_ptt() * domestic_recycling_other_ptt()


@component.add(
    name="Mechanical recycling pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pe_film": 1,
        "domestic_recycling_pe_film": 1,
    },
)
def mechanical_recycling_pe_film():
    return rate_of_mechanical_recycling_pe_film() * domestic_recycling_pe_film()


@component.add(
    name="Mechanical recycling pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pe_other": 1,
        "domestic_recycling_pe_other": 1,
    },
)
def mechanical_recycling_pe_other():
    return rate_of_mechanical_recycling_pe_other() * domestic_recycling_pe_other()


@component.add(
    name="Mechanical recycling pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pe_ptt": 1,
        "domestic_recycling_pe_ptt": 1,
    },
)
def mechanical_recycling_pe_ptt():
    return rate_of_mechanical_recycling_pe_ptt() * domestic_recycling_pe_ptt()


@component.add(
    name="Mechanical recycling pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pet_bottle": 1,
        "domestic_recycling_pet_bottle": 1,
    },
)
def mechanical_recycling_pet_bottle():
    return rate_of_mechanical_recycling_pet_bottle() * domestic_recycling_pet_bottle()


@component.add(
    name="Rate of chemical recycling pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pe_ptt():
    return 0


@component.add(
    name="wmc collected formulation pp film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pp_film():
    return 0.25


@component.add(
    name="recycling rejects rate Other PTT",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_other_ptt": 1, "sorting_other_ptt": 1},
)
def recycling_rejects_rate_other_ptt():
    return rate_of_recycling_reject_other_ptt() * sorting_other_ptt()


@component.add(
    name="Mechanical recycling pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pp_bottle": 1,
        "domestic_recycling_pp_bottle": 1,
    },
)
def mechanical_recycling_pp_bottle():
    return rate_of_mechanical_recycling_pp_bottle() * domestic_recycling_pp_bottle()


@component.add(
    name="recycling rejects rate pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pe_ptt": 1, "sorting_pe_ptt": 1},
)
def recycling_rejects_rate_pe_ptt():
    return rate_of_recycling_reject_pe_ptt() * sorting_pe_ptt()


@component.add(
    name="recycling rejects rate pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pet_bottle": 1, "sorting_pet_bottle": 1},
)
def recycling_rejects_rate_pet_bottle():
    return rate_of_recycling_reject_pet_bottle() * sorting_pet_bottle()


@component.add(
    name="Sorting pp film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pp_film": 1},
    other_deps={
        "_integ_sorting_pp_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_pp_film": 1,
                "sent_for_recycling_pp_film": 1,
                "recycling_rejects_rate_pp_film": 1,
                "sent_for_overseas_treatment_pp_film": 1,
            },
        }
    },
)
def sorting_pp_film():
    return _integ_sorting_pp_film()


_integ_sorting_pp_film = Integ(
    lambda: sent_for_sorting_pp_film()
    - sent_for_recycling_pp_film()
    - recycling_rejects_rate_pp_film()
    - sent_for_overseas_treatment_pp_film(),
    lambda: 54383,
    "_integ_sorting_pp_film",
)


@component.add(
    name="Sent to incineration other other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_other_other": 1,
        "domestic_residual_treatment_other_other": 1,
    },
)
def sent_to_incineration_other_other():
    return incineration_rate_other_other() * domestic_residual_treatment_other_other()


@component.add(
    name="rate overseas pe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_pe_other": 1,
        "historical_overseas_rate_pe_other": 1,
    },
)
def rate_overseas_pe_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: formulation_of_overseas_rate_pe_other(),
        lambda: historical_overseas_rate_pe_other(),
    )


@component.add(
    name="recycling rejects rate pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pp_film": 1, "sorting_pp_film": 1},
)
def recycling_rejects_rate_pp_film():
    return rate_of_recycling_reject_pp_film() * sorting_pp_film()


@component.add(
    name="wmc historical ldpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ldpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="recycling rejects rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pp_bottle": 1, "sorting_pp_bottle": 1},
)
def recycling_rejects_rate_pp_bottle():
    return rate_of_recycling_reject_pp_bottle() * sorting_pp_bottle()


@component.add(
    name="wmc historical ldpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ldpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc historical ldpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ldpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_ldpe_ptt": 1, "rate_dumped_ldpe_ptt": 1},
)
def mismanagement_ldpe_ptt():
    return illegal_collection_ldpe_ptt() * rate_dumped_ldpe_ptt()


@component.add(
    name="mismanagement other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_other_bottle": 1, "rate_dumped_other_bottle": 1},
)
def mismanagement_other_bottle():
    return illegal_collection_other_bottle() * rate_dumped_other_bottle()


@component.add(
    name="Sent to incineration pp film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pp_film": 1,
        "domestic_residual_treatment_pp_film": 1,
    },
)
def sent_to_incineration_pp_film():
    return incineration_rate_pp_film() * domestic_residual_treatment_pp_film()


@component.add(
    name="wmc historical other other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_other_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc historical Other PTT",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_other_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pe_film": 1, "rate_dumped_pe_film": 1},
)
def mismanagement_pe_film():
    return illegal_collection_pe_film() * rate_dumped_pe_film()


@component.add(
    name="mismanagement pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pe_other": 1, "rate_dumped_pe_other": 1},
)
def mismanagement_pe_other():
    return illegal_collection_pe_other() * rate_dumped_pe_other()


@component.add(
    name="mismanagement pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pe_ptt": 1, "rate_dumped_pe_ptt": 1},
)
def mismanagement_pe_ptt():
    return illegal_collection_pe_ptt() * rate_dumped_pe_ptt()


@component.add(
    name="mismanagement pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pet_bottle": 1, "rate_dumped_pet_bottle": 1},
)
def mismanagement_pet_bottle():
    return illegal_collection_pet_bottle() * rate_dumped_pet_bottle()


@component.add(
    name="wmc historical pet bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pet_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="residual rate other bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_other_bottle():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="wmc historical pp film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pp_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pp_film": 1, "rate_dumped_pp_film": 1},
)
def mismanagement_pp_film():
    return illegal_collection_pp_film() * rate_dumped_pp_film()


@component.add(
    name="residual rate Other PTT",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_other_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="residual rate other other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_other_other():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="Sent for residual treatment pet bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pet_bottle": 1,
        "residual_rate_pet_bottle": 1,
    },
)
def sent_for_residual_treatment_pet_bottle():
    return formal_domestic_treatment_pet_bottle() * residual_rate_pet_bottle()


@component.add(
    name="sent for sorting pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pp_bottle": 1,
        "sent_for_sorting_rate_pp_bottle": 1,
    },
)
def sent_for_sorting_pp_bottle():
    return formal_domestic_treatment_pp_bottle() * sent_for_sorting_rate_pp_bottle()


@component.add(
    name="residual rate pet bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_pet_bottle():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="Sent to landfill Other PTT",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_other_ptt": 1,
        "domestic_residual_treatment_other_ptt": 1,
    },
)
def sent_to_landfill_other_ptt():
    return landfill_rate_other_ptt() * domestic_residual_treatment_other_ptt()


@component.add(
    name="Waste generated pe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pe_other": 1},
    other_deps={
        "_integ_waste_generated_pe_other": {
            "initial": {},
            "step": {
                "to_waste_generated_pe_other": 1,
                "illegal_collection_data_pe_other": 2,
                "littering_pe_other": 1,
                "formal_waste_collection_pe_other": 1,
            },
        }
    },
)
def waste_generated_pe_other():
    return _integ_waste_generated_pe_other()


_integ_waste_generated_pe_other = Integ(
    lambda: to_waste_generated_pe_other()
    - illegal_collection_data_pe_other()
    - littering_pe_other()
    - formal_waste_collection_pe_other()
    - illegal_collection_data_pe_other(),
    lambda: 941.493,
    "_integ_waste_generated_pe_other",
)


@component.add(
    name="rate dumped pe other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pe_other():
    return 0.006


@component.add(
    name="rate overseas pe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_pe_film": 1,
        "historical_overseas_rate_pe_film": 1,
    },
)
def rate_overseas_pe_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: formulation_of_overseas_rate_pe_film(),
        lambda: historical_overseas_rate_pe_film(),
    )


@component.add(
    name="rate dumped pet bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pet_bottle():
    return 0.006


@component.add(
    name="Overseas treament rate ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_ldpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_other_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Sent to landfill pp film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pp_film": 1, "domestic_residual_treatment_pp_film": 1},
)
def sent_to_landfill_pp_film():
    return landfill_rate_pp_film() * domestic_residual_treatment_pp_film()


@component.add(
    name="Sent to landfill pp bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pp_bottle": 1,
        "domestic_residual_treatment_pp_bottle": 1,
    },
)
def sent_to_landfill_pp_bottle():
    return landfill_rate_pp_bottle() * domestic_residual_treatment_pp_bottle()


@component.add(
    name="rate of recycling other bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_other_bottle": 1,
        "historical_on_rate_of_recycling_other_bottle": 1,
    },
)
def rate_of_recycling_other_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_other_bottle(),
        lambda: historical_on_rate_of_recycling_other_bottle(),
    )


@component.add(
    name="Waste collected pe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pe_other": 1},
    other_deps={
        "_integ_waste_collected_pe_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_pe_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pe_other": 1,
            },
        }
    },
)
def waste_collected_pe_other():
    return _integ_waste_collected_pe_other()


_integ_waste_collected_pe_other = Integ(
    lambda: formal_waste_collection_pe_other()
    - waste_collected_sent_to_formal_domestic_treatment_pe_other(),
    lambda: 898,
    "_integ_waste_collected_pe_other",
)


@component.add(
    name="Waste collected pe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pe_ptt": 1},
    other_deps={
        "_integ_waste_collected_pe_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_pe_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pe_ptt": 1,
            },
        }
    },
)
def waste_collected_pe_ptt():
    return _integ_waste_collected_pe_ptt()


_integ_waste_collected_pe_ptt = Integ(
    lambda: formal_waste_collection_pe_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_pe_ptt(),
    lambda: 10778,
    "_integ_waste_collected_pe_ptt",
)


@component.add(
    name="rate to illegal collection ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_ldpe_ptt():
    return 0.006


@component.add(
    name="rate of recycling pe film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pe_film": 1,
        "historical_on_rate_of_recycling_pe_film": 1,
    },
)
def rate_of_recycling_pe_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: formulation_for_rate_of_recycling_pe_film(),
        lambda: historical_on_rate_of_recycling_pe_film(),
    )


@component.add(
    name="rate of recycling pe other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pe_other": 1,
        "historical_on_rate_of_recycling_pe_other": 1,
    },
)
def rate_of_recycling_pe_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pe_other() < time(),
        lambda: formulation_for_rate_of_recycling_pe_other(),
        lambda: historical_on_rate_of_recycling_pe_other(),
    )


@component.add(
    name="rate of recycling pe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pe_ptt": 1,
        "historical_on_rate_of_recycling_pe_ptt": 1,
    },
)
def rate_of_recycling_pe_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pe_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_pe_ptt(),
        lambda: historical_on_rate_of_recycling_pe_ptt(),
    )


@component.add(
    name="rate of recycling pp film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pp_film": 1,
        "historical_on_rate_of_recycling_pp_film": 1,
    },
)
def rate_of_recycling_pp_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: formulation_for_rate_of_recycling_pp_film(),
        lambda: historical_on_rate_of_recycling_pp_film(),
    )


@component.add(
    name="Sorting Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_other_ptt": 1},
    other_deps={
        "_integ_sorting_other_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_other_ptt": 1,
                "sent_for_recycling_other_ptt": 1,
                "recycling_rejects_rate_other_ptt": 1,
                "sent_for_overseas_treatment_other_ptt": 1,
            },
        }
    },
)
def sorting_other_ptt():
    return _integ_sorting_other_ptt()


_integ_sorting_other_ptt = Integ(
    lambda: sent_for_sorting_other_ptt()
    - sent_for_recycling_other_ptt()
    - recycling_rejects_rate_other_ptt()
    - sent_for_overseas_treatment_other_ptt(),
    lambda: 817,
    "_integ_sorting_other_ptt",
)


@component.add(
    name="Sorting pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pe_film": 1},
    other_deps={
        "_integ_sorting_pe_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_pe_film": 1,
                "sent_for_recycling_pe_film": 1,
                "recycling_rejects_rate_pe_film": 1,
                "sent_for_overseas_treatment_pe_film": 1,
            },
        }
    },
)
def sorting_pe_film():
    return _integ_sorting_pe_film()


_integ_sorting_pe_film = Integ(
    lambda: sent_for_sorting_pe_film()
    - sent_for_recycling_pe_film()
    - recycling_rejects_rate_pe_film()
    - sent_for_overseas_treatment_pe_film(),
    lambda: 42678,
    "_integ_sorting_pe_film",
)


@component.add(
    name="Overseas treatment ldpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ldpe_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_ldpe_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ldpe_bottle": 1},
        }
    },
)
def overseas_treatment_ldpe_bottle():
    return _integ_overseas_treatment_ldpe_bottle()


_integ_overseas_treatment_ldpe_bottle = Integ(
    lambda: sent_for_overseas_treatment_ldpe_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_ldpe_bottle",
)


@component.add(
    name="Sorting pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pet_bottle": 1},
    other_deps={
        "_integ_sorting_pet_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_pet_bottle": 1,
                "sent_for_recycling_pet_bottle": 1,
                "recycling_rejects_rate_pet_bottle": 1,
                "sent_for_overseas_treatment_pet_bottle": 1,
            },
        }
    },
)
def sorting_pet_bottle():
    return _integ_sorting_pet_bottle()


_integ_sorting_pet_bottle = Integ(
    lambda: sent_for_sorting_pet_bottle()
    - sent_for_recycling_pet_bottle()
    - recycling_rejects_rate_pet_bottle()
    - sent_for_overseas_treatment_pet_bottle(),
    lambda: 180734,
    "_integ_sorting_pet_bottle",
)


@component.add(
    name="rate sent for domestic recycling pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Overseas treatment ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_ldpe_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_ldpe_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_ldpe_ptt": 1},
        }
    },
)
def overseas_treatment_ldpe_ptt():
    return _integ_overseas_treatment_ldpe_ptt()


_integ_overseas_treatment_ldpe_ptt = Integ(
    lambda: sent_for_overseas_treatment_ldpe_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_ldpe_ptt",
)


@component.add(
    name="Overseas treatment other bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_other_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_other_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_other_bottle": 1},
        }
    },
)
def overseas_treatment_other_bottle():
    return _integ_overseas_treatment_other_bottle()


_integ_overseas_treatment_other_bottle = Integ(
    lambda: sent_for_overseas_treatment_other_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_other_bottle",
)


@component.add(
    name="Sent to incineration other bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_other_bottle": 1,
        "domestic_residual_treatment_other_bottle": 1,
    },
)
def sent_to_incineration_other_bottle():
    return incineration_rate_other_bottle() * domestic_residual_treatment_other_bottle()


@component.add(
    name="Waste collected sent to formal domestic treatment pe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_pe_ptt": 1, "waste_collected_pe_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_pe_ptt():
    return sent_for_formal_domestic_pe_ptt() * waste_collected_pe_ptt()


@component.add(
    name="sent for formal domestic other bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_other_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="rate of recycling reject pe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pe_film": 1,
        "time": 1,
        "formulation_for_recycling_rate_pe_film": 1,
        "historical_on_recycling_pe_film": 2,
    },
)
def rate_of_recycling_reject_pe_film():
    return if_then_else(
        policy1_introduction_time_pe_film() < time(),
        lambda: historical_on_recycling_pe_film()
        * formulation_for_recycling_rate_pe_film(),
        lambda: historical_on_recycling_pe_film(),
    )


@component.add(
    name="Recycled chemically ldpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_ldpe_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_ldpe_ptt": {
            "initial": {},
            "step": {"chemical_recycling_ldpe_ptt": 1},
        }
    },
)
def recycled_chemically_ldpe_ptt():
    return _integ_recycled_chemically_ldpe_ptt()


_integ_recycled_chemically_ldpe_ptt = Integ(
    lambda: chemical_recycling_ldpe_ptt(),
    lambda: 0,
    "_integ_recycled_chemically_ldpe_ptt",
)


@component.add(
    name="Recycled chemically other bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_other_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_other_bottle": {
            "initial": {},
            "step": {"chemical_recycling_other_bottle": 1},
        }
    },
)
def recycled_chemically_other_bottle():
    return _integ_recycled_chemically_other_bottle()


_integ_recycled_chemically_other_bottle = Integ(
    lambda: chemical_recycling_other_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_other_bottle",
)


@component.add(
    name="rvm historical other film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_other_film():
    return 0


@component.add(
    name="rvm historical other other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_other_other():
    return 0


@component.add(
    name="rate of recycling reject pp film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pp_film": 1,
        "time": 1,
        "formulation_for_recycling_rate_pp_film": 1,
        "historical_on_recycling_pp_film": 2,
    },
)
def rate_of_recycling_reject_pp_film():
    return if_then_else(
        policy1_introduction_time_pp_film() < time(),
        lambda: historical_on_recycling_pp_film()
        * formulation_for_recycling_rate_pp_film(),
        lambda: historical_on_recycling_pp_film(),
    )


@component.add(
    name="sent for sorting pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pe_film": 1,
        "sent_for_sorting_rate_pe_film": 1,
    },
)
def sent_for_sorting_pe_film():
    return formal_domestic_treatment_pe_film() * sent_for_sorting_rate_pe_film()


@component.add(
    name="to waste generated other other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_other_other": 1},
)
def to_waste_generated_other_other():
    return total_pom_other_other()


@component.add(
    name="sent for sorting pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pet_bottle": 1,
        "sent_for_sorting_rate_pet_bottle": 1,
    },
)
def sent_for_sorting_pet_bottle():
    return formal_domestic_treatment_pet_bottle() * sent_for_sorting_rate_pet_bottle()


@component.add(
    name="rvm historical pp film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pp_film():
    return 0


@component.add(
    name="to waste generated pe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pe_ptt": 1},
)
def to_waste_generated_pe_ptt():
    return total_pom_pe_ptt()


@component.add(
    name="Sent for residual treatment pe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pe_ptt": 1, "residual_rate_pe_ptt": 1},
)
def sent_for_residual_treatment_pe_ptt():
    return formal_domestic_treatment_pe_ptt() * residual_rate_pe_ptt()


@component.add(
    name="to waste generated pet bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pet_bottle": 1},
)
def to_waste_generated_pet_bottle():
    return total_pom_pet_bottle()


@component.add(
    name="Waste generated pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pe_film": 1},
    other_deps={
        "_integ_waste_generated_pe_film": {
            "initial": {},
            "step": {
                "to_waste_generated_pe_film": 1,
                "illegal_collection_data_pe_film": 2,
                "littering_pe_film": 1,
                "formal_waste_collection_pe_film": 1,
            },
        }
    },
)
def waste_generated_pe_film():
    return _integ_waste_generated_pe_film()


_integ_waste_generated_pe_film = Integ(
    lambda: to_waste_generated_pe_film()
    - illegal_collection_data_pe_film()
    - littering_pe_film()
    - formal_waste_collection_pe_film()
    - illegal_collection_data_pe_film(),
    lambda: 96973.8,
    "_integ_waste_generated_pe_film",
)


@component.add(
    name="rate overseas other bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_other_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_other_bottle": 1,
        "historical_overseas_rate_other_bottle": 1,
    },
)
def rate_overseas_other_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_other_bottle() < time(),
        lambda: formulation_of_overseas_rate_other_bottle(),
        lambda: historical_overseas_rate_other_bottle(),
    )


@component.add(
    name="Sent for overseas treatment other bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_other_bottle": 1, "sorting_other_bottle": 1},
)
def sent_for_overseas_treatment_other_bottle():
    return overseas_treament_rate_other_bottle() * sorting_other_bottle()


@component.add(
    name="rate dumped pe film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pe_film():
    return 0.006


@component.add(
    name="to waste generated pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pp_bottle": 1},
)
def to_waste_generated_pp_bottle():
    return total_pom_pp_bottle()


@component.add(
    name="Waste generated pet bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pet_bottle": 1},
    other_deps={
        "_integ_waste_generated_pet_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_pet_bottle": 1,
                "illegal_collection_data_pet_bottle": 2,
                "littering_pet_bottle": 1,
                "formal_waste_collection_pet_bottle": 1,
            },
        }
    },
)
def waste_generated_pet_bottle():
    return _integ_waste_generated_pet_bottle()


_integ_waste_generated_pet_bottle = Integ(
    lambda: to_waste_generated_pet_bottle()
    - illegal_collection_data_pet_bottle()
    - littering_pet_bottle()
    - formal_waste_collection_pet_bottle()
    - illegal_collection_data_pet_bottle(),
    lambda: 416140,
    "_integ_waste_generated_pet_bottle",
)


@component.add(
    name="Recycling rejects other film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_other_film": 1},
    other_deps={
        "_integ_recycling_rejects_other_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_other_film": 1},
        }
    },
)
def recycling_rejects_other_film():
    return _integ_recycling_rejects_other_film()


_integ_recycling_rejects_other_film = Integ(
    lambda: recycling_rejects_rate_other_film(),
    lambda: 0,
    "_integ_recycling_rejects_other_film",
)


@component.add(
    name="sent for formal domestic other film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_other_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic other other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_other_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Sent for recycling pp bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pp_bottle": 1,
        "rate_sent_for_domestic_recycling_pp_bottle": 1,
    },
)
def sent_for_recycling_pp_bottle():
    return sorting_pp_bottle() * rate_sent_for_domestic_recycling_pp_bottle()


@component.add(
    name="Waste collected pe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pe_film": 1},
    other_deps={
        "_integ_waste_collected_pe_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_pe_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pe_film": 1,
            },
        }
    },
)
def waste_collected_pe_film():
    return _integ_waste_collected_pe_film()


_integ_waste_collected_pe_film = Integ(
    lambda: formal_waste_collection_pe_film()
    - waste_collected_sent_to_formal_domestic_treatment_pe_film(),
    lambda: 92513,
    "_integ_waste_collected_pe_film",
)


@component.add(
    name="Sent for overseas treatment pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pp_film": 1, "sorting_pp_film": 1},
)
def sent_for_overseas_treatment_pp_film():
    return overseas_treament_rate_pp_film() * sorting_pp_film()


@component.add(
    name="rate to illegal collection other film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_other_film():
    return 0.006


@component.add(
    name="sent for formal domestic pp film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pp_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="wmc collected formulation pp bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pp_bottle():
    return 0.25


@component.add(
    name="wmc collected formulation Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_other_ptt():
    return 0.25


@component.add(
    name="wmc collected formulation pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pe_film():
    return 0.25


@component.add(
    name="rate sent for domestic recycling other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_other_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Rate of chemical recycling pe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pe_film():
    return 0


@component.add(
    name="Waste collected sent to formal domestic treatment idpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_ldpe_other": 1,
        "waste_collected_ldpe_other": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_idpe_other():
    return sent_for_formal_domestic_ldpe_other() * waste_collected_ldpe_other()


@component.add(
    name="rate sent for domestic recycling pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="recycling rejects rate pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pe_other": 1, "sorting_pe_other": 1},
)
def recycling_rejects_rate_pe_other():
    return rate_of_recycling_reject_pe_other() * sorting_pe_other()


@component.add(
    name="wmc historical pe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="Sent for recycling pp film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pp_film": 1, "rate_sent_for_domestic_recycling_pp_film": 1},
)
def sent_for_recycling_pp_film():
    return sorting_pp_film() * rate_sent_for_domestic_recycling_pp_film()


@component.add(
    name="Recycling rejects pe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pe_film": 1},
    other_deps={
        "_integ_recycling_rejects_pe_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_pe_film": 1},
        }
    },
)
def recycling_rejects_pe_film():
    return _integ_recycling_rejects_pe_film()


_integ_recycling_rejects_pe_film = Integ(
    lambda: recycling_rejects_rate_pe_film(),
    lambda: 0,
    "_integ_recycling_rejects_pe_film",
)


@component.add(
    name="Sent for residual treatment pe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pe_other": 1, "residual_rate_pe_other": 1},
)
def sent_for_residual_treatment_pe_other():
    return formal_domestic_treatment_pe_other() * residual_rate_pe_other()


@component.add(
    name="Recycled chemically other other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_other_other": 1},
    other_deps={
        "_integ_recycled_chemically_other_other": {
            "initial": {},
            "step": {"chemical_recycling_other_other": 1},
        }
    },
)
def recycled_chemically_other_other():
    return _integ_recycled_chemically_other_other()


_integ_recycled_chemically_other_other = Integ(
    lambda: chemical_recycling_other_other(),
    lambda: 0,
    "_integ_recycled_chemically_other_other",
)


@component.add(
    name="wmc historical ldpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_ldpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate to illegal collection other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_other_other():
    return 0.006


@component.add(
    name="Waste generated pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pe_ptt": 1},
    other_deps={
        "_integ_waste_generated_pe_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_pe_ptt": 1,
                "illegal_collection_data_pe_ptt": 2,
                "littering_pe_ptt": 1,
                "formal_waste_collection_pe_ptt": 1,
            },
        }
    },
)
def waste_generated_pe_ptt():
    return _integ_waste_generated_pe_ptt()


_integ_waste_generated_pe_ptt = Integ(
    lambda: to_waste_generated_pe_ptt()
    - illegal_collection_data_pe_ptt()
    - littering_pe_ptt()
    - formal_waste_collection_pe_ptt()
    - illegal_collection_data_pe_ptt(),
    lambda: 11297.9,
    "_integ_waste_generated_pe_ptt",
)


@component.add(
    name="rate of mechanical recycling pe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pe_ptt():
    return 1


@component.add(
    name="rate sent for reuse pe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pe_film():
    return 0


@component.add(
    name="rate to illegal collection pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pet_bottle():
    return 0.006


@component.add(
    name="Sent for residual treatment Other PTT",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_other_ptt": 1, "residual_rate_other_ptt": 1},
)
def sent_for_residual_treatment_other_ptt():
    return formal_domestic_treatment_other_ptt() * residual_rate_other_ptt()


@component.add(
    name="Sent for residual treatment pe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_pe_film": 1, "residual_rate_pe_film": 1},
)
def sent_for_residual_treatment_pe_film():
    return formal_domestic_treatment_pe_film() * residual_rate_pe_film()


@component.add(
    name="wmc collected formulation pe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pe_other():
    return 0.25


@component.add(
    name="Waste collected sent to formal domestic treatment other bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_other_bottle": 1,
        "waste_collected_other_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_other_bottle():
    return sent_for_formal_domestic_other_bottle() * waste_collected_other_bottle()


@component.add(
    name="Rate of chemical recycling pet bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pet_bottle():
    return 0


@component.add(
    name="rate to illegal collection other bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_other_bottle():
    return 0.006


@component.add(
    name="wmc historical other bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_other_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="recycling rejects rate pe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pe_film": 1, "sorting_pe_film": 1},
)
def recycling_rejects_rate_pe_film():
    return rate_of_recycling_reject_pe_film() * sorting_pe_film()


@component.add(
    name="rate of mechanical recycling other film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_other_film():
    return 1


@component.add(
    name="Rate of chemical recycling ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ldpe_other():
    return 0


@component.add(
    name="Recycling rejects other other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_other_other": 1},
    other_deps={
        "_integ_recycling_rejects_other_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_other_other": 1},
        }
    },
)
def recycling_rejects_other_other():
    return _integ_recycling_rejects_other_other()


_integ_recycling_rejects_other_other = Integ(
    lambda: recycling_rejects_rate_other_other(),
    lambda: 0,
    "_integ_recycling_rejects_other_other",
)


@component.add(
    name="Recycling rejects Other PTT",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_other_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_other_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_other_ptt": 1},
        }
    },
)
def recycling_rejects_other_ptt():
    return _integ_recycling_rejects_other_ptt()


_integ_recycling_rejects_other_ptt = Integ(
    lambda: recycling_rejects_rate_other_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_other_ptt",
)


@component.add(
    name="rate sent for reuse other other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_other_other():
    return 0


@component.add(
    name="rate dumped ldpe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_ldpe_bottle():
    return 0.006


@component.add(
    name="Rate of chemical recycling Other PTT",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_other_ptt():
    return 0


@component.add(
    name="rate of mechanical recycling pet bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pet_bottle():
    return 1


@component.add(
    name="Waste generated ldpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ldpe_other": 1},
    other_deps={
        "_integ_waste_generated_ldpe_other": {
            "initial": {},
            "step": {
                "to_waste_generated_idpe_other": 1,
                "illegal_collection_data_ldpe_other": 2,
                "littering_ldpe_other": 1,
                "formal_waste_collection_ldpe_other": 1,
            },
        }
    },
)
def waste_generated_ldpe_other():
    return _integ_waste_generated_ldpe_other()


_integ_waste_generated_ldpe_other = Integ(
    lambda: to_waste_generated_idpe_other()
    - illegal_collection_data_ldpe_other()
    - littering_ldpe_other()
    - formal_waste_collection_ldpe_other()
    - illegal_collection_data_ldpe_other(),
    lambda: 21654.3,
    "_integ_waste_generated_ldpe_other",
)


@component.add(
    name="wmc collected formulation pe ptt", comp_type="Constant", comp_subtype="Normal"
)
def wmc_collected_formulation_pe_ptt():
    return 0.25


@component.add(
    name="Sorting pe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pe_ptt": 1},
    other_deps={
        "_integ_sorting_pe_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_pe_ptt": 1,
                "sent_for_recycling_pe_ptt": 1,
                "recycling_rejects_rate_pe_ptt": 1,
                "sent_for_overseas_treatment_pe_ptt": 1,
            },
        }
    },
)
def sorting_pe_ptt():
    return _integ_sorting_pe_ptt()


_integ_sorting_pe_ptt = Integ(
    lambda: sent_for_sorting_pe_ptt()
    - sent_for_recycling_pe_ptt()
    - recycling_rejects_rate_pe_ptt()
    - sent_for_overseas_treatment_pe_ptt(),
    lambda: 4929,
    "_integ_sorting_pe_ptt",
)


@component.add(
    name="wmc collected formulation other other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_other_other():
    return 0.25


@component.add(
    name="Waste generated ldpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_ldpe_ptt": 1},
    other_deps={
        "_integ_waste_generated_ldpe_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_ldpe_ptt": 1,
                "illegal_collection_data_ldpe_ptt": 2,
                "littering_ldpe_ptt": 1,
                "formal_waste_collection_ldpe_ptt": 1,
            },
        }
    },
)
def waste_generated_ldpe_ptt():
    return _integ_waste_generated_ldpe_ptt()


_integ_waste_generated_ldpe_ptt = Integ(
    lambda: to_waste_generated_ldpe_ptt()
    - illegal_collection_data_ldpe_ptt()
    - littering_ldpe_ptt()
    - formal_waste_collection_ldpe_ptt()
    - illegal_collection_data_ldpe_ptt(),
    lambda: 941.493,
    "_integ_waste_generated_ldpe_ptt",
)


@component.add(
    name="Sent for residual treatment other other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_other_other": 1,
        "residual_rate_other_other": 1,
    },
)
def sent_for_residual_treatment_other_other():
    return formal_domestic_treatment_other_other() * residual_rate_other_other()


@component.add(
    name="rate of mechanical recycling other other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_other_other():
    return 1


@component.add(
    name="rate to illegal collection pe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pe_ptt():
    return 0.006


@component.add(
    name="sent for sorting rate pp bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pp_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Rate of chemical recycling ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_ldpe_ptt():
    return 0


@component.add(
    name="Waste collected pp film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pp_film": 1},
    other_deps={
        "_integ_waste_collected_pp_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_pp_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pp_film": 1,
            },
        }
    },
)
def waste_collected_pp_film():
    return _integ_waste_collected_pp_film()


_integ_waste_collected_pp_film = Integ(
    lambda: formal_waste_collection_pp_film()
    - waste_collected_sent_to_formal_domestic_treatment_pp_film(),
    lambda: 119458,
    "_integ_waste_collected_pp_film",
)


@component.add(
    name="sent for sorting pe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pe_other": 1,
        "sent_for_sorting_rate_pe_other": 1,
    },
)
def sent_for_sorting_pe_other():
    return formal_domestic_treatment_pe_other() * sent_for_sorting_rate_pe_other()


@component.add(
    name="wmc historical pe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc collected formulation ldpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ldpe_other():
    return 0.25


@component.add(
    name="Waste collected pp bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pp_bottle": 1},
    other_deps={
        "_integ_waste_collected_pp_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_pp_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pp_bottle": 1,
            },
        }
    },
)
def waste_collected_pp_bottle():
    return _integ_waste_collected_pp_bottle()


_integ_waste_collected_pp_bottle = Integ(
    lambda: formal_waste_collection_pp_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_pp_bottle(),
    lambda: 15269,
    "_integ_waste_collected_pp_bottle",
)


@component.add(
    name="wmc historical pe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate of recycling pet bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pet_bottle": 1,
        "historical_on_rate_of_recycling_pet_bottle": 1,
    },
)
def rate_of_recycling_pet_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pet_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_pet_bottle(),
        lambda: historical_on_rate_of_recycling_pet_bottle(),
    )


@component.add(
    name="wmc collected formulation ldpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_ldpe_ptt():
    return 0.25


@component.add(
    name="Overseas treament rate pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pet_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_pet_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="historical on rate of recycling hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="Actual la collected hdpe bottle",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "formulation_for_la_collected_hdpe_bottle": 1,
        "historical_data_for_la_collected_hdpe_bottle": 1,
    },
)
def actual_la_collected_hdpe_bottle():
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: formulation_for_la_collected_hdpe_bottle(),
        lambda: historical_data_for_la_collected_hdpe_bottle(),
    )


@component.add(
    name="Actual la collected hdpe film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "formulation_for_la_collected_hdpe_film": 1,
        "historical_data_for_la_collected_hdpe_film": 1,
    },
)
def actual_la_collected_hdpe_film():
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: formulation_for_la_collected_hdpe_film(),
        lambda: historical_data_for_la_collected_hdpe_film(),
    )


@component.add(
    name="Actual la collected hdpe other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "formulation_for_la_collected_hdpe_other": 1,
        "historical_data_for_la_collected_hdpe_other": 1,
    },
)
def actual_la_collected_hdpe_other():
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: formulation_for_la_collected_hdpe_other(),
        lambda: historical_data_for_la_collected_hdpe_other(),
    )


@component.add(
    name="Actual la collected hdpe ptt",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "formulation_for_la_collected_hdpe_ptt": 1,
        "historical_data_for_la_collected_hdpe_ptt": 1,
    },
)
def actual_la_collected_hdpe_ptt():
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: formulation_for_la_collected_hdpe_ptt(),
        lambda: historical_data_for_la_collected_hdpe_ptt(),
    )


@component.add(
    name="Actual la collected pet film",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "formulation_for_la_collected_pet_film": 1,
        "historical_data_for_la_collected_pet_film": 1,
    },
)
def actual_la_collected_pet_film():
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: formulation_for_la_collected_pet_film(),
        lambda: historical_data_for_la_collected_pet_film(),
    )


@component.add(
    name="Actual la collected Pet Other",
    units="Dmnl",
    limits=(np.nan, 0.5),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "formulation_for_la_collected_pet_other": 1,
        "historical_data_for_la_collected_pet_other": 1,
    },
)
def actual_la_collected_pet_other():
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: formulation_for_la_collected_pet_other(),
        lambda: historical_data_for_la_collected_pet_other(),
    )


@component.add(
    name="Overseas treatment pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pet_film": 1},
    other_deps={
        "_integ_overseas_treatment_pet_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pet_film": 1},
        }
    },
)
def overseas_treatment_pet_film():
    return _integ_overseas_treatment_pet_film()


_integ_overseas_treatment_pet_film = Integ(
    lambda: sent_for_overseas_treatment_pet_film(),
    lambda: 0,
    "_integ_overseas_treatment_pet_film",
)


@component.add(
    name="Overseas treatment Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_pet_other": 1},
    other_deps={
        "_integ_overseas_treatment_pet_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_pet_other": 1},
        }
    },
)
def overseas_treatment_pet_other():
    return _integ_overseas_treatment_pet_other()


_integ_overseas_treatment_pet_other = Integ(
    lambda: sent_for_overseas_treatment_pet_other(),
    lambda: 0,
    "_integ_overseas_treatment_pet_other",
)


@component.add(
    name="historical on recycling hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_hdpe_film():
    return 0.103


@component.add(
    name="Actual rvm collected hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "rvm_collected_formulation_hdpe_bottle": 1,
        "rvm_historical_hdpe_bottle": 1,
    },
)
def actual_rvm_collected_hdpe_bottle():
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: rvm_collected_formulation_hdpe_bottle(),
        lambda: rvm_historical_hdpe_bottle(),
    )


@component.add(
    name="Actual rvm collected hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "rvm_collected_formulation_hdpe_film": 1,
        "rvm_historical_hdpe_film": 1,
    },
)
def actual_rvm_collected_hdpe_film():
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: rvm_collected_formulation_hdpe_film(),
        lambda: rvm_historical_hdpe_film(),
    )


@component.add(
    name="Actual rvm collected hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "rvm_collected_formulation_hdpe_other": 1,
        "rvm_historical_hdpe_other": 1,
    },
)
def actual_rvm_collected_hdpe_other():
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: rvm_collected_formulation_hdpe_other(),
        lambda: rvm_historical_hdpe_other(),
    )


@component.add(
    name="Actual rvm collected hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "rvm_collected_formulation_hdpe_ptt": 1,
        "rvm_historical_hdpe_ptt": 1,
    },
)
def actual_rvm_collected_hdpe_ptt():
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: rvm_collected_formulation_hdpe_ptt(),
        lambda: rvm_historical_hdpe_ptt(),
    )


@component.add(
    name="Actual rvm collected pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "rvm_collected_formulation_pet_film": 1,
        "rvm_historical_pet_film": 1,
    },
)
def actual_rvm_collected_pet_film():
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: rvm_collected_formulation_pet_film(),
        lambda: rvm_historical_pet_film(),
    )


@component.add(
    name="Actual rvm collected Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "rvm_collected_formulation_pet_other": 1,
        "rvm_historical_pet_other": 1,
    },
)
def actual_rvm_collected_pet_other():
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: rvm_collected_formulation_pet_other(),
        lambda: rvm_historical_pet_other(),
    )


@component.add(
    name="historical overseas rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="Actual wmc collected hdpe bottle",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "wmc_collected_formulation_hdpe_bottle": 1,
        "wmc_historical_hdpe_bottle": 1,
    },
)
def actual_wmc_collected_hdpe_bottle():
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: wmc_collected_formulation_hdpe_bottle(),
        lambda: wmc_historical_hdpe_bottle(),
    )


@component.add(
    name="Actual wmc collected hdpe film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "wmc_collected_formulation_hdpe_film": 1,
        "wmc_historical_hdpe_film": 1,
    },
)
def actual_wmc_collected_hdpe_film():
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: wmc_collected_formulation_hdpe_film(),
        lambda: wmc_historical_hdpe_film(),
    )


@component.add(
    name="Actual wmc collected hdpe other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "wmc_collected_formulation_hdpe_other": 1,
        "wmc_historical_hdpe_other": 1,
    },
)
def actual_wmc_collected_hdpe_other():
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: wmc_collected_formulation_hdpe_other(),
        lambda: wmc_historical_hdpe_other(),
    )


@component.add(
    name="Actual wmc collected hdpe ptt",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "wmc_collected_formulation_hdpe_ptt": 1,
        "wmc_historical_hdpe_ptt": 1,
    },
)
def actual_wmc_collected_hdpe_ptt():
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: wmc_collected_formulation_hdpe_ptt(),
        lambda: wmc_historical_hdpe_ptt(),
    )


@component.add(
    name="Actual wmc collected pet film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "wmc_collected_formulation_pet_film": 1,
        "wmc_historical_pet_film": 1,
    },
)
def actual_wmc_collected_pet_film():
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: wmc_collected_formulation_pet_film(),
        lambda: wmc_historical_pet_film(),
    )


@component.add(
    name="Actual wmc collected Pet Other",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "wmc_collected_formulation_pet_other": 1,
        "wmc_historical_pet_other": 1,
    },
)
def actual_wmc_collected_pet_other():
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: wmc_collected_formulation_pet_other(),
        lambda: wmc_historical_pet_other(),
    )


@component.add(
    name="historical rate for domestic hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Chemical recycling hdpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_hdpe_bottle": 1,
        "domestic_recycling_hdpe_bottle": 1,
    },
)
def chemical_recycling_hdpe_bottle():
    return rate_of_chemical_recycling_hdpe_bottle() * domestic_recycling_hdpe_bottle()


@component.add(
    name="Chemical recycling hdpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_hdpe_film": 1,
        "domestic_recycling_hdpe_film": 1,
    },
)
def chemical_recycling_hdpe_film():
    return rate_of_chemical_recycling_hdpe_film() * domestic_recycling_hdpe_film()


@component.add(
    name="Chemical recycling hdpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_hdpe_other": 1,
        "domestic_recycling_hdpe_other": 1,
    },
)
def chemical_recycling_hdpe_other():
    return rate_of_chemical_recycling_hdpe_other() * domestic_recycling_hdpe_other()


@component.add(
    name="Chemical recycling hdpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_hdpe_ptt": 1,
        "domestic_recycling_hdpe_ptt": 1,
    },
)
def chemical_recycling_hdpe_ptt():
    return rate_of_chemical_recycling_hdpe_ptt() * domestic_recycling_hdpe_ptt()


@component.add(
    name="Chemical recycling pet film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pet_film": 1,
        "domestic_recycling_pet_film": 1,
    },
)
def chemical_recycling_pet_film():
    return rate_of_chemical_recycling_pet_film() * domestic_recycling_pet_film()


@component.add(
    name="Chemical recycling Pet Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_chemical_recycling_pet_other": 1,
        "domestic_recycling_pet_other": 1,
    },
)
def chemical_recycling_pet_other():
    return rate_of_chemical_recycling_pet_other() * domestic_recycling_pet_other()


@component.add(
    name="Sent for recycling pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_pet_film": 1, "rate_sent_for_domestic_recycling_pet_film": 1},
)
def sent_for_recycling_pet_film():
    return sorting_pet_film() * rate_sent_for_domestic_recycling_pet_film()


@component.add(
    name="illegal collection data hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_hdpe_bottle": 1,
        "waste_generated_hdpe_bottle": 1,
    },
)
def illegal_collection_data_hdpe_bottle():
    return rate_to_illegal_collection_hdpe_bottle() * waste_generated_hdpe_bottle()


@component.add(
    name="illegal collection data hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_hdpe_other": 1,
        "waste_generated_hdpe_other": 1,
    },
)
def illegal_collection_data_hdpe_other():
    return rate_to_illegal_collection_hdpe_other() * waste_generated_hdpe_other()


@component.add(
    name="rate dumped Pet Other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pet_other():
    return 0.006


@component.add(
    name="Rate of chemical recycling hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_hdpe_film():
    return 0


@component.add(
    name="Domestic production recycled hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_hdpe_bottle": 1},
)
def domestic_production_recycled_hdpe_bottle():
    return mechanical_recycling_hdpe_bottle()


@component.add(
    name="Domestic production recycled hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_hdpe_film": 1},
)
def domestic_production_recycled_hdpe_film():
    return mechanical_recycling_hdpe_film()


@component.add(
    name="Domestic production recycled hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_hdpe_other": 1},
)
def domestic_production_recycled_hdpe_other():
    return mechanical_recycling_hdpe_other()


@component.add(
    name="Domestic production recycled hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_hdpe_ptt": 1},
)
def domestic_production_recycled_hdpe_ptt():
    return mechanical_recycling_hdpe_ptt()


@component.add(
    name="Domestic production recycled pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pet_film": 1},
)
def domestic_production_recycled_pet_film():
    return mechanical_recycling_pet_film()


@component.add(
    name="Domestic production recycled Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mechanical_recycling_pet_other": 1},
)
def domestic_production_recycled_pet_other():
    return mechanical_recycling_pet_other()


@component.add(
    name="Incineration rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_hdpe_film": 1},
)
def incineration_rate_hdpe_film():
    return 1 - landfill_rate_hdpe_film()


@component.add(
    name="rate of mechanical recycling hdpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_hdpe_bottle():
    return 1


@component.add(
    name="rate of mechanical recycling hdpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_hdpe_film():
    return 1


@component.add(
    name="rate of mechanical recycling hdpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_hdpe_other():
    return 1


@component.add(
    name="rate of mechanical recycling hdpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_hdpe_ptt():
    return 1


@component.add(
    name="Domestic Recycling hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_hdpe_bottle": 1},
    other_deps={
        "_integ_domestic_recycling_hdpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_recycling_hdpe_bottle": 1,
                "mechanical_recycling_hdpe_bottle": 1,
                "chemical_recycling_hdpe_bottle": 1,
            },
        }
    },
)
def domestic_recycling_hdpe_bottle():
    return _integ_domestic_recycling_hdpe_bottle()


_integ_domestic_recycling_hdpe_bottle = Integ(
    lambda: sent_for_recycling_hdpe_bottle()
    - mechanical_recycling_hdpe_bottle()
    - chemical_recycling_hdpe_bottle(),
    lambda: 69614,
    "_integ_domestic_recycling_hdpe_bottle",
)


@component.add(
    name="Domestic Recycling hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_hdpe_film": 1},
    other_deps={
        "_integ_domestic_recycling_hdpe_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_hdpe_film": 1,
                "mechanical_recycling_hdpe_film": 1,
                "chemical_recycling_hdpe_film": 1,
            },
        }
    },
)
def domestic_recycling_hdpe_film():
    return _integ_domestic_recycling_hdpe_film()


_integ_domestic_recycling_hdpe_film = Integ(
    lambda: sent_for_recycling_hdpe_film()
    - mechanical_recycling_hdpe_film()
    - chemical_recycling_hdpe_film(),
    lambda: 13984,
    "_integ_domestic_recycling_hdpe_film",
)


@component.add(
    name="Domestic Recycling hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_hdpe_other": 1},
    other_deps={
        "_integ_domestic_recycling_hdpe_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_hdpe_other": 1,
                "mechanical_recycling_hdpe_other": 1,
                "chemical_recycling_hdpe_other": 1,
            },
        }
    },
)
def domestic_recycling_hdpe_other():
    return _integ_domestic_recycling_hdpe_other()


_integ_domestic_recycling_hdpe_other = Integ(
    lambda: sent_for_recycling_hdpe_other()
    - mechanical_recycling_hdpe_other()
    - chemical_recycling_hdpe_other(),
    lambda: 8847,
    "_integ_domestic_recycling_hdpe_other",
)


@component.add(
    name="Domestic Recycling hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_hdpe_ptt": 1},
    other_deps={
        "_integ_domestic_recycling_hdpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_recycling_hdpe_ptt": 1,
                "mechanical_recycling_hdpe_ptt": 1,
                "chemical_recycling_hdpe_ptt": 1,
            },
        }
    },
)
def domestic_recycling_hdpe_ptt():
    return _integ_domestic_recycling_hdpe_ptt()


_integ_domestic_recycling_hdpe_ptt = Integ(
    lambda: sent_for_recycling_hdpe_ptt()
    - mechanical_recycling_hdpe_ptt()
    - chemical_recycling_hdpe_ptt(),
    lambda: 3732,
    "_integ_domestic_recycling_hdpe_ptt",
)


@component.add(
    name="Domestic Recycling pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pet_film": 1},
    other_deps={
        "_integ_domestic_recycling_pet_film": {
            "initial": {},
            "step": {
                "sent_for_recycling_pet_film": 1,
                "mechanical_recycling_pet_film": 1,
                "chemical_recycling_pet_film": 1,
            },
        }
    },
)
def domestic_recycling_pet_film():
    return _integ_domestic_recycling_pet_film()


_integ_domestic_recycling_pet_film = Integ(
    lambda: sent_for_recycling_pet_film()
    - mechanical_recycling_pet_film()
    - chemical_recycling_pet_film(),
    lambda: 0,
    "_integ_domestic_recycling_pet_film",
)


@component.add(
    name="Domestic Recycling Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_recycling_pet_other": 1},
    other_deps={
        "_integ_domestic_recycling_pet_other": {
            "initial": {},
            "step": {
                "sent_for_recycling_pet_other": 1,
                "mechanical_recycling_pet_other": 1,
                "chemical_recycling_pet_other": 1,
            },
        }
    },
)
def domestic_recycling_pet_other():
    return _integ_domestic_recycling_pet_other()


_integ_domestic_recycling_pet_other = Integ(
    lambda: sent_for_recycling_pet_other()
    - mechanical_recycling_pet_other()
    - chemical_recycling_pet_other(),
    lambda: 5733,
    "_integ_domestic_recycling_pet_other",
)


@component.add(
    name="rate of recycling hdpe film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_hdpe_film": 1,
        "historical_on_rate_of_recycling_hdpe_film": 1,
    },
)
def rate_of_recycling_hdpe_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: formulation_for_rate_of_recycling_hdpe_film(),
        lambda: historical_on_rate_of_recycling_hdpe_film(),
    )


@component.add(
    name="rate of recycling hdpe other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_hdpe_other": 1,
        "historical_on_rate_of_recycling_hdpe_other": 1,
    },
)
def rate_of_recycling_hdpe_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: formulation_for_rate_of_recycling_hdpe_other(),
        lambda: historical_on_rate_of_recycling_hdpe_other(),
    )


@component.add(
    name="rate of recycling hdpe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_hdpe_ptt": 1,
        "historical_on_rate_of_recycling_hdpe_ptt": 1,
    },
)
def rate_of_recycling_hdpe_ptt():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: formulation_for_rate_of_recycling_hdpe_ptt(),
        lambda: historical_on_rate_of_recycling_hdpe_ptt(),
    )


@component.add(
    name="Domestic Residual treatment hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_hdpe_bottle": 1},
    other_deps={
        "_integ_domestic_residual_treatment_hdpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_hdpe_bottle": 1,
                "sent_to_incineration_hdpe_bottle": 1,
                "sent_to_landfill_hdpe_bottle": 1,
            },
        }
    },
)
def domestic_residual_treatment_hdpe_bottle():
    return _integ_domestic_residual_treatment_hdpe_bottle()


_integ_domestic_residual_treatment_hdpe_bottle = Integ(
    lambda: sent_for_residual_treatment_hdpe_bottle()
    - sent_to_incineration_hdpe_bottle()
    - sent_to_landfill_hdpe_bottle(),
    lambda: 236106,
    "_integ_domestic_residual_treatment_hdpe_bottle",
)


@component.add(
    name="Domestic Residual treatment hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_hdpe_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_hdpe_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_hdpe_film": 1,
                "sent_to_incineration_hdpe_film": 1,
                "sent_to_landfill_hdpe_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_hdpe_film():
    return _integ_domestic_residual_treatment_hdpe_film()


_integ_domestic_residual_treatment_hdpe_film = Integ(
    lambda: sent_for_residual_treatment_hdpe_film()
    - sent_to_incineration_hdpe_film()
    - sent_to_landfill_hdpe_film(),
    lambda: 47421,
    "_integ_domestic_residual_treatment_hdpe_film",
)


@component.add(
    name="Domestic Residual treatment hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_hdpe_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_hdpe_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_hdpe_other": 1,
                "sent_to_incineration_hdpe_other": 1,
                "sent_to_landfill_hdpe_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_hdpe_other():
    return _integ_domestic_residual_treatment_hdpe_other()


_integ_domestic_residual_treatment_hdpe_other = Integ(
    lambda: sent_for_residual_treatment_hdpe_other()
    - sent_to_incineration_hdpe_other()
    - sent_to_landfill_hdpe_other(),
    lambda: 30000,
    "_integ_domestic_residual_treatment_hdpe_other",
)


@component.add(
    name="Domestic Residual treatment hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_hdpe_ptt": 1},
    other_deps={
        "_integ_domestic_residual_treatment_hdpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_hdpe_ptt": 1,
                "sent_to_incineration_hdpe_ptt": 1,
                "sent_to_landfill_hdpe_ptt": 1,
            },
        }
    },
)
def domestic_residual_treatment_hdpe_ptt():
    return _integ_domestic_residual_treatment_hdpe_ptt()


_integ_domestic_residual_treatment_hdpe_ptt = Integ(
    lambda: sent_for_residual_treatment_hdpe_ptt()
    - sent_to_incineration_hdpe_ptt()
    - sent_to_landfill_hdpe_ptt(),
    lambda: 12657,
    "_integ_domestic_residual_treatment_hdpe_ptt",
)


@component.add(
    name="Domestic Residual treatment pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pet_film": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pet_film": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pet_film": 1,
                "sent_to_incineration_pet_film": 1,
                "sent_to_landfill_pet_film": 1,
            },
        }
    },
)
def domestic_residual_treatment_pet_film():
    return _integ_domestic_residual_treatment_pet_film()


_integ_domestic_residual_treatment_pet_film = Integ(
    lambda: sent_for_residual_treatment_pet_film()
    - sent_to_incineration_pet_film()
    - sent_to_landfill_pet_film(),
    lambda: 15005,
    "_integ_domestic_residual_treatment_pet_film",
)


@component.add(
    name="Domestic Residual treatment Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_domestic_residual_treatment_pet_other": 1},
    other_deps={
        "_integ_domestic_residual_treatment_pet_other": {
            "initial": {},
            "step": {
                "sent_for_residual_treatment_pet_other": 1,
                "sent_to_incineration_pet_other": 1,
                "sent_to_landfill_pet_other": 1,
            },
        }
    },
)
def domestic_residual_treatment_pet_other():
    return _integ_domestic_residual_treatment_pet_other()


_integ_domestic_residual_treatment_pet_other = Integ(
    lambda: sent_for_residual_treatment_pet_other()
    - sent_to_incineration_pet_other()
    - sent_to_landfill_pet_other(),
    lambda: 19443,
    "_integ_domestic_residual_treatment_pet_other",
)


@component.add(
    name="rate of recycling reject hdpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "formulation_for_recycling_rate_hdpe_ptt": 1,
        "historical_on_recycling_hdpe_ptt": 1,
    },
)
def rate_of_recycling_reject_hdpe_ptt():
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: formulation_for_recycling_rate_hdpe_ptt(),
        lambda: historical_on_recycling_hdpe_ptt(),
    )


@component.add(
    name="rate of recycling reject pet film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "formulation_for_recycling_rate_pet_film": 1,
        "historical_on_recycling_pet_film": 1,
    },
)
def rate_of_recycling_reject_pet_film():
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: formulation_for_recycling_rate_pet_film(),
        lambda: historical_on_recycling_pet_film(),
    )


@component.add(
    name="Dumped hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_hdpe_bottle": 1},
    other_deps={
        "_integ_dumped_hdpe_bottle": {
            "initial": {},
            "step": {"mismanagement_hdpe_bottle": 1},
        }
    },
)
def dumped_hdpe_bottle():
    return _integ_dumped_hdpe_bottle()


_integ_dumped_hdpe_bottle = Integ(
    lambda: mismanagement_hdpe_bottle(), lambda: 0, "_integ_dumped_hdpe_bottle"
)


@component.add(
    name="Dumped hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_hdpe_film": 1},
    other_deps={
        "_integ_dumped_hdpe_film": {
            "initial": {},
            "step": {"mismanagement_hdpe_film": 1},
        }
    },
)
def dumped_hdpe_film():
    return _integ_dumped_hdpe_film()


_integ_dumped_hdpe_film = Integ(
    lambda: mismanagement_hdpe_film(), lambda: 0, "_integ_dumped_hdpe_film"
)


@component.add(
    name="Dumped hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_hdpe_other": 1},
    other_deps={
        "_integ_dumped_hdpe_other": {
            "initial": {},
            "step": {"mismanagement_hdpe_other": 1},
        }
    },
)
def dumped_hdpe_other():
    return _integ_dumped_hdpe_other()


_integ_dumped_hdpe_other = Integ(
    lambda: mismanagement_hdpe_other(), lambda: 0, "_integ_dumped_hdpe_other"
)


@component.add(
    name="Dumped hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_hdpe_ptt": 1},
    other_deps={
        "_integ_dumped_hdpe_ptt": {"initial": {}, "step": {"mismanagement_hdpe_ptt": 1}}
    },
)
def dumped_hdpe_ptt():
    return _integ_dumped_hdpe_ptt()


_integ_dumped_hdpe_ptt = Integ(
    lambda: mismanagement_hdpe_ptt(), lambda: 0, "_integ_dumped_hdpe_ptt"
)


@component.add(
    name="Dumped pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pet_film": 1},
    other_deps={
        "_integ_dumped_pet_film": {"initial": {}, "step": {"mismanagement_pet_film": 1}}
    },
)
def dumped_pet_film():
    return _integ_dumped_pet_film()


_integ_dumped_pet_film = Integ(
    lambda: mismanagement_pet_film(), lambda: 0, "_integ_dumped_pet_film"
)


@component.add(
    name="Dumped Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_dumped_pet_other": 1},
    other_deps={
        "_integ_dumped_pet_other": {
            "initial": {},
            "step": {"mismanagement_pet_other": 1},
        }
    },
)
def dumped_pet_other():
    return _integ_dumped_pet_other()


_integ_dumped_pet_other = Integ(
    lambda: mismanagement_pet_other(), lambda: 0, "_integ_dumped_pet_other"
)


@component.add(
    name="rate overseas hdpe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_hdpe_film": 1,
        "historical_overseas_rate_hdpe_film": 1,
    },
)
def rate_overseas_hdpe_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: formulation_of_overseas_rate_hdpe_film(),
        lambda: historical_overseas_rate_hdpe_film(),
    )


@component.add(
    name="rate overseas hdpe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_hdpe_other": 1,
        "historical_overseas_rate_hdpe_other": 1,
    },
)
def rate_overseas_hdpe_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: formulation_of_overseas_rate_hdpe_other(),
        lambda: historical_overseas_rate_hdpe_other(),
    )


@component.add(
    name="rate overseas hdpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_ptt": 1,
        "time": 1,
        "formulation_of_overseas_rate_hdpe_ptt": 1,
        "historical_overseas_rate_hdpe_ptt": 1,
    },
)
def rate_overseas_hdpe_ptt():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_hdpe_ptt() < time(),
        lambda: formulation_of_overseas_rate_hdpe_ptt(),
        lambda: historical_overseas_rate_hdpe_ptt(),
    )


@component.add(
    name="Formal domestic treatment hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_hdpe_bottle": 1},
    other_deps={
        "_integ_formal_domestic_treatment_hdpe_bottle": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_bottle": 1,
                "sent_for_sorting_hdpe_bottle": 1,
                "sent_for_residual_treatment_hdpe_bottle": 1,
            },
        }
    },
)
def formal_domestic_treatment_hdpe_bottle():
    return _integ_formal_domestic_treatment_hdpe_bottle()


_integ_formal_domestic_treatment_hdpe_bottle = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_hdpe_bottle()
    - sent_for_sorting_hdpe_bottle()
    - sent_for_residual_treatment_hdpe_bottle(),
    lambda: 435619,
    "_integ_formal_domestic_treatment_hdpe_bottle",
)


@component.add(
    name="Formal domestic treatment hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_hdpe_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_hdpe_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_film": 1,
                "sent_for_sorting_hdpe_film": 1,
                "sent_for_residual_treatment_hdpe_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_hdpe_film():
    return _integ_formal_domestic_treatment_hdpe_film()


_integ_formal_domestic_treatment_hdpe_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_hdpe_film()
    - sent_for_sorting_hdpe_film()
    - sent_for_residual_treatment_hdpe_film(),
    lambda: 87493,
    "_integ_formal_domestic_treatment_hdpe_film",
)


@component.add(
    name="Formal domestic treatment hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_hdpe_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_hdpe_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_other": 1,
                "sent_for_sorting_hdpe_other": 1,
                "sent_for_residual_treatment_hdpe_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_hdpe_other():
    return _integ_formal_domestic_treatment_hdpe_other()


_integ_formal_domestic_treatment_hdpe_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_hdpe_other()
    - sent_for_sorting_hdpe_other()
    - sent_for_residual_treatment_hdpe_other(),
    lambda: 55352,
    "_integ_formal_domestic_treatment_hdpe_other",
)


@component.add(
    name="Formal domestic treatment hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_hdpe_ptt": 1},
    other_deps={
        "_integ_formal_domestic_treatment_hdpe_ptt": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_ptt": 1,
                "sent_for_sorting_hdpe_ptt": 1,
                "sent_for_residual_treatment_hdpe_ptt": 1,
            },
        }
    },
)
def formal_domestic_treatment_hdpe_ptt():
    return _integ_formal_domestic_treatment_hdpe_ptt()


_integ_formal_domestic_treatment_hdpe_ptt = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_hdpe_ptt()
    - sent_for_sorting_hdpe_ptt()
    - sent_for_residual_treatment_hdpe_ptt(),
    lambda: 23353,
    "_integ_formal_domestic_treatment_hdpe_ptt",
)


@component.add(
    name="Formal domestic treatment pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pet_film": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pet_film": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pet_film": 1,
                "sent_for_sorting_pet_film": 1,
                "sent_for_residual_treatment_pet_film": 1,
            },
        }
    },
)
def formal_domestic_treatment_pet_film():
    return _integ_formal_domestic_treatment_pet_film()


_integ_formal_domestic_treatment_pet_film = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pet_film()
    - sent_for_sorting_pet_film()
    - sent_for_residual_treatment_pet_film(),
    lambda: 0,
    "_integ_formal_domestic_treatment_pet_film",
)


@component.add(
    name="Formal domestic treatment Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_formal_domestic_treatment_pet_other": 1},
    other_deps={
        "_integ_formal_domestic_treatment_pet_other": {
            "initial": {},
            "step": {
                "waste_collected_sent_to_formal_domestic_treatment_pet_other": 1,
                "sent_for_sorting_pet_other": 1,
                "sent_for_residual_treatment_pet_other": 1,
            },
        }
    },
)
def formal_domestic_treatment_pet_other():
    return _integ_formal_domestic_treatment_pet_other()


_integ_formal_domestic_treatment_pet_other = Integ(
    lambda: waste_collected_sent_to_formal_domestic_treatment_pet_other()
    - sent_for_sorting_pet_other()
    - sent_for_residual_treatment_pet_other(),
    lambda: 35873,
    "_integ_formal_domestic_treatment_pet_other",
)


@component.add(
    name="rate sent for domestic recycling hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_hdpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_hdpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="rate sent for domestic recycling hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_hdpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Formal Waste Collection hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_hdpe_bottle": 1,
        "actual_rvm_collected_hdpe_bottle": 1,
        "actual_wmc_collected_hdpe_bottle": 1,
        "waste_generated_hdpe_bottle": 1,
    },
)
def formal_waste_collection_hdpe_bottle():
    return (
        actual_la_collected_hdpe_bottle()
        + actual_rvm_collected_hdpe_bottle()
        + actual_wmc_collected_hdpe_bottle()
    ) * waste_generated_hdpe_bottle()


@component.add(
    name="Formal Waste Collection hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_hdpe_other": 1,
        "actual_rvm_collected_hdpe_other": 1,
        "actual_wmc_collected_hdpe_other": 1,
        "waste_generated_hdpe_other": 1,
    },
)
def formal_waste_collection_hdpe_other():
    return (
        actual_la_collected_hdpe_other()
        + actual_rvm_collected_hdpe_other()
        + actual_wmc_collected_hdpe_other()
    ) * waste_generated_hdpe_other()


@component.add(
    name="Formal Waste Collection hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_hdpe_ptt": 1,
        "actual_rvm_collected_hdpe_ptt": 1,
        "actual_wmc_collected_hdpe_ptt": 1,
        "waste_generated_hdpe_ptt": 1,
    },
)
def formal_waste_collection_hdpe_ptt():
    return (
        actual_la_collected_hdpe_ptt()
        + actual_rvm_collected_hdpe_ptt()
        + actual_wmc_collected_hdpe_ptt()
    ) * waste_generated_hdpe_ptt()


@component.add(
    name="Formal Waste Collection Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "actual_la_collected_pet_other": 1,
        "actual_rvm_collected_pet_other": 1,
        "actual_wmc_collected_pet_other": 1,
        "waste_generated_pet_other": 1,
    },
)
def formal_waste_collection_pet_other():
    return (
        actual_la_collected_pet_other()
        + actual_rvm_collected_pet_other()
        + actual_wmc_collected_pet_other()
    ) * waste_generated_pet_other()


@component.add(
    name="rate sent for reuse hdpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_hdpe_film():
    return 0


@component.add(
    name="rate sent for reuse hdpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_hdpe_other():
    return 0


@component.add(
    name="rate sent for reuse hdpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_hdpe_ptt():
    return 0


@component.add(
    name="formulation for domestic rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_bottle": 1,
        "historical_rate_for_domestic_hdpe_bottle": 1,
    },
)
def formulation_for_domestic_rate_hdpe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_bottle(),
        lambda: historical_rate_for_domestic_hdpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_film": 1,
        "historical_rate_for_domestic_hdpe_film": 1,
    },
)
def formulation_for_domestic_rate_hdpe_film():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_film(),
        lambda: historical_rate_for_domestic_hdpe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_other": 1,
        "historical_rate_for_domestic_hdpe_other": 1,
    },
)
def formulation_for_domestic_rate_hdpe_other():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_other(),
        lambda: historical_rate_for_domestic_hdpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_ptt": 1,
        "historical_rate_for_domestic_hdpe_ptt": 1,
    },
)
def formulation_for_domestic_rate_hdpe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_ptt(),
        lambda: historical_rate_for_domestic_hdpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_film": 1,
        "historical_rate_for_domestic_pet_film": 1,
    },
)
def formulation_for_domestic_rate_pet_film():
    return if_then_else(
        time() > policy1_introduction_time_pet_film(),
        lambda: historical_rate_for_domestic_pet_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for domestic rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_other": 1,
        "historical_rate_for_domestic_pet_other": 1,
    },
)
def formulation_for_domestic_rate_pet_other():
    return if_then_else(
        time() > policy1_introduction_time_pet_other(),
        lambda: historical_rate_for_domestic_pet_other(),
        lambda: 0,
    )


@component.add(
    name="rate to illegal collection hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_hdpe_bottle():
    return 0.006


@component.add(
    name="rate to illegal collection hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_hdpe_film():
    return 0.006


@component.add(
    name="rate to illegal collection hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_hdpe_other():
    return 0.006


@component.add(
    name="formulation for la collected hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_hdpe_bottle():
    return 0.15


@component.add(
    name="formulation for la collected hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_hdpe_film():
    return 0.15


@component.add(
    name="formulation for la collected hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_hdpe_other():
    return 0.15


@component.add(
    name="formulation for la collected hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_hdpe_ptt():
    return 0.15


@component.add(
    name="formulation for la collected pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pet_film():
    return 0.15


@component.add(
    name="formulation for la collected Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_la_collected_pet_other():
    return 0.15


@component.add(
    name="Recycled chemically hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_hdpe_bottle": 1},
    other_deps={
        "_integ_recycled_chemically_hdpe_bottle": {
            "initial": {},
            "step": {"chemical_recycling_hdpe_bottle": 1},
        }
    },
)
def recycled_chemically_hdpe_bottle():
    return _integ_recycled_chemically_hdpe_bottle()


_integ_recycled_chemically_hdpe_bottle = Integ(
    lambda: chemical_recycling_hdpe_bottle(),
    lambda: 0,
    "_integ_recycled_chemically_hdpe_bottle",
)


@component.add(
    name="Recycled chemically hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_hdpe_film": 1},
    other_deps={
        "_integ_recycled_chemically_hdpe_film": {
            "initial": {},
            "step": {"chemical_recycling_hdpe_film": 1},
        }
    },
)
def recycled_chemically_hdpe_film():
    return _integ_recycled_chemically_hdpe_film()


_integ_recycled_chemically_hdpe_film = Integ(
    lambda: chemical_recycling_hdpe_film(),
    lambda: 0,
    "_integ_recycled_chemically_hdpe_film",
)


@component.add(
    name="Recycled chemically hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_hdpe_other": 1},
    other_deps={
        "_integ_recycled_chemically_hdpe_other": {
            "initial": {},
            "step": {"chemical_recycling_hdpe_other": 1},
        }
    },
)
def recycled_chemically_hdpe_other():
    return _integ_recycled_chemically_hdpe_other()


_integ_recycled_chemically_hdpe_other = Integ(
    lambda: chemical_recycling_hdpe_other(),
    lambda: 0,
    "_integ_recycled_chemically_hdpe_other",
)


@component.add(
    name="formulation for rate of recycling hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_bottle": 1,
        "historical_on_rate_of_recycling_hdpe_bottle": 1,
    },
)
def formulation_for_rate_of_recycling_hdpe_bottle():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_hdpe_bottle(),
        lambda: historical_on_rate_of_recycling_hdpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_film": 1,
        "historical_on_rate_of_recycling_hdpe_film": 1,
    },
)
def formulation_for_rate_of_recycling_hdpe_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_hdpe_film(),
        lambda: historical_on_rate_of_recycling_hdpe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_other": 1,
        "historical_on_rate_of_recycling_hdpe_other": 1,
    },
)
def formulation_for_rate_of_recycling_hdpe_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_hdpe_other(),
        lambda: historical_on_rate_of_recycling_hdpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_ptt": 1,
        "historical_on_rate_of_recycling_hdpe_ptt": 1,
    },
)
def formulation_for_rate_of_recycling_hdpe_ptt():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_hdpe_ptt(),
        lambda: historical_on_rate_of_recycling_hdpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_film": 1,
        "historical_on_rate_of_recycling_pet_film": 1,
    },
)
def formulation_for_rate_of_recycling_pet_film():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pet_film(),
        lambda: historical_on_rate_of_recycling_pet_film(),
        lambda: 0,
    )


@component.add(
    name="formulation for rate of recycling Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_other": 1,
        "historical_on_rate_of_recycling_pet_other": 1,
    },
)
def formulation_for_rate_of_recycling_pet_other():
    """
    -0.0001*(simulation time difference*simulation time difference*simulation time difference) + 0.0043*(simulation time difference*simulation time difference) - 0.02*(simulation time difference) + 0.2155
    """
    return if_then_else(
        time() > policy1_introduction_time_pet_other(),
        lambda: historical_on_rate_of_recycling_pet_other(),
        lambda: 0,
    )


@component.add(
    name="Recycling rejects hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_hdpe_bottle": 1},
    other_deps={
        "_integ_recycling_rejects_hdpe_bottle": {
            "initial": {},
            "step": {"recycling_rejects_rate_hdpe_bottle": 1},
        }
    },
)
def recycling_rejects_hdpe_bottle():
    return _integ_recycling_rejects_hdpe_bottle()


_integ_recycling_rejects_hdpe_bottle = Integ(
    lambda: recycling_rejects_rate_hdpe_bottle(),
    lambda: 20549.9,
    "_integ_recycling_rejects_hdpe_bottle",
)


@component.add(
    name="Recycling rejects hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_hdpe_film": 1},
    other_deps={
        "_integ_recycling_rejects_hdpe_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_hdpe_film": 1},
        }
    },
)
def recycling_rejects_hdpe_film():
    return _integ_recycling_rejects_hdpe_film()


_integ_recycling_rejects_hdpe_film = Integ(
    lambda: recycling_rejects_rate_hdpe_film(),
    lambda: 0,
    "_integ_recycling_rejects_hdpe_film",
)


@component.add(
    name="Recycling rejects hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_hdpe_other": 1},
    other_deps={
        "_integ_recycling_rejects_hdpe_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_hdpe_other": 1},
        }
    },
)
def recycling_rejects_hdpe_other():
    return _integ_recycling_rejects_hdpe_other()


_integ_recycling_rejects_hdpe_other = Integ(
    lambda: recycling_rejects_rate_hdpe_other(),
    lambda: 0,
    "_integ_recycling_rejects_hdpe_other",
)


@component.add(
    name="formulation for recycling rate hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_hdpe_bottle():
    """
    0.03
    """
    return 0.05


@component.add(
    name="formulation for recycling rate hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_hdpe_film():
    """
    0.03
    """
    return 0.05


@component.add(
    name="formulation for recycling rate hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_hdpe_other():
    """
    0.03
    """
    return 0.05


@component.add(
    name="formulation for recycling rate hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_hdpe_ptt():
    """
    0.03
    """
    return 0.05


@component.add(
    name="formulation for recycling rate pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pet_film():
    """
    0.03
    """
    return 0.05


@component.add(
    name="formulation for recycling rate Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def formulation_for_recycling_rate_pet_other():
    """
    0.03
    """
    return 0.05


@component.add(
    name="recycling rejects rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_hdpe_other": 1, "sorting_hdpe_other": 1},
)
def recycling_rejects_rate_hdpe_other():
    return rate_of_recycling_reject_hdpe_other() * sorting_hdpe_other()


@component.add(
    name="recycling rejects rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_hdpe_ptt": 1, "sorting_hdpe_ptt": 1},
)
def recycling_rejects_rate_hdpe_ptt():
    return rate_of_recycling_reject_hdpe_ptt() * sorting_hdpe_ptt()


@component.add(
    name="recycling rejects rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pet_film": 1, "sorting_pet_film": 1},
)
def recycling_rejects_rate_pet_film():
    return rate_of_recycling_reject_pet_film() * sorting_pet_film()


@component.add(
    name="formulation of overseas rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_bottle": 1,
        "historical_overseas_rate_hdpe_bottle": 1,
    },
)
def formulation_of_overseas_rate_hdpe_bottle():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_bottle(),
        lambda: historical_overseas_rate_hdpe_bottle(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_film": 1,
        "historical_overseas_rate_hdpe_film": 1,
    },
)
def formulation_of_overseas_rate_hdpe_film():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_film(),
        lambda: historical_overseas_rate_hdpe_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_other": 1,
        "historical_overseas_rate_hdpe_other": 1,
    },
)
def formulation_of_overseas_rate_hdpe_other():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_other(),
        lambda: historical_overseas_rate_hdpe_other(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_hdpe_ptt": 1,
        "historical_overseas_rate_hdpe_ptt": 1,
    },
)
def formulation_of_overseas_rate_hdpe_ptt():
    return if_then_else(
        time() > policy1_introduction_time_hdpe_ptt(),
        lambda: historical_overseas_rate_hdpe_ptt(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_film": 1,
        "historical_overseas_rate_pet_film": 1,
    },
)
def formulation_of_overseas_rate_pet_film():
    return if_then_else(
        time() > policy1_introduction_time_pet_film(),
        lambda: historical_overseas_rate_pet_film(),
        lambda: 0,
    )


@component.add(
    name="formulation of overseas rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "policy1_introduction_time_pet_other": 1,
        "historical_overseas_rate_pet_other": 1,
    },
)
def formulation_of_overseas_rate_pet_other():
    return if_then_else(
        time() > policy1_introduction_time_pet_other(),
        lambda: historical_overseas_rate_pet_other(),
        lambda: 0,
    )


@component.add(
    name="residual rate hdpe ptt",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def residual_rate_hdpe_ptt():
    """
    0.6
    """
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.542, 0.526, 0.466, 0.448, 0.489, 0.484, 0.374, 0.392, 0.385, 0.334],
    )


@component.add(
    name="historical data for la collected hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical data for la collected Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_data_for_la_collected_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.395, 0.378, 0.384, 0.389, 0.386, 0.357, 0.378, 0.408, 0.413, 0.392, 0.392],
    )


@component.add(
    name="historical on rate of recycling hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="historical on rate of recycling Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_on_rate_of_recycling_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.195, 0.195, 0.196, 0.213, 0.231, 0.23, 0.26, 0.298, 0.324, 0.386, 0.371],
    )


@component.add(
    name="rvm historical hdpe film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_hdpe_film():
    return 0


@component.add(
    name="rvm historical hdpe other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_hdpe_other():
    return 0


@component.add(
    name="rvm historical hdpe ptt", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_hdpe_ptt():
    return 0


@component.add(
    name="historical on recycling hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_hdpe_bottle():
    return 0.103


@component.add(
    name="historical on recycling hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_hdpe_other():
    return 0.103


@component.add(
    name="historical on recycling hdpe ptt", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_hdpe_ptt():
    return 0.103


@component.add(
    name="historical on recycling pet film", comp_type="Constant", comp_subtype="Normal"
)
def historical_on_recycling_pet_film():
    return 0.103


@component.add(
    name="historical on recycling Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def historical_on_recycling_pet_other():
    return 0.103


@component.add(
    name="sent for formal domestic hdpe film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_hdpe_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic hdpe other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_hdpe_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic hdpe ptt",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_hdpe_ptt():
    """
    0.4
    """
    return 0.994


@component.add(
    name="historical overseas rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="historical overseas rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_overseas_rate_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2021.0,
            2023.0,
        ],
        [0.233, 0.233, 0.25, 0.304, 0.305, 0.276, 0.281, 0.277, 0.207, 0.239, 0.272],
    )


@component.add(
    name="Sent for overseas treatment hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_hdpe_film": 1, "sorting_hdpe_film": 1},
)
def sent_for_overseas_treatment_hdpe_film():
    return overseas_treament_rate_hdpe_film() * sorting_hdpe_film()


@component.add(
    name="Sent for overseas treatment hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_hdpe_other": 1, "sorting_hdpe_other": 1},
)
def sent_for_overseas_treatment_hdpe_other():
    return overseas_treament_rate_hdpe_other() * sorting_hdpe_other()


@component.add(
    name="Sent for overseas treatment hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_hdpe_ptt": 1, "sorting_hdpe_ptt": 1},
)
def sent_for_overseas_treatment_hdpe_ptt():
    return overseas_treament_rate_hdpe_ptt() * sorting_hdpe_ptt()


@component.add(
    name="historical rate for domestic hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="historical rate for domestic Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def historical_rate_for_domestic_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.761, 0.761, 0.744, 0.69, 0.689, 0.718, 0.713, 0.717, 0.787, 0.755, 0.722],
    )


@component.add(
    name="Sent for recycling hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_hdpe_film": 1,
        "rate_sent_for_domestic_recycling_hdpe_film": 1,
    },
)
def sent_for_recycling_hdpe_film():
    return sorting_hdpe_film() * rate_sent_for_domestic_recycling_hdpe_film()


@component.add(
    name="Sent for recycling hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_hdpe_other": 1,
        "rate_sent_for_domestic_recycling_hdpe_other": 1,
    },
)
def sent_for_recycling_hdpe_other():
    return sorting_hdpe_other() * rate_sent_for_domestic_recycling_hdpe_other()


@component.add(
    name="Sent for recycling hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sorting_hdpe_ptt": 1, "rate_sent_for_domestic_recycling_hdpe_ptt": 1},
)
def sent_for_recycling_hdpe_ptt():
    return sorting_hdpe_ptt() * rate_sent_for_domestic_recycling_hdpe_ptt()


@component.add(
    name="Sent to landfill pet film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_film": 1, "domestic_residual_treatment_pet_film": 1},
)
def sent_to_landfill_pet_film():
    return landfill_rate_pet_film() * domestic_residual_treatment_pet_film()


@component.add(
    name="Sent for recycling Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_pet_other": 1,
        "rate_sent_for_domestic_recycling_pet_other": 1,
    },
)
def sent_for_recycling_pet_other():
    return sorting_pet_other() * rate_sent_for_domestic_recycling_pet_other()


@component.add(
    name="illegal collection data hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_hdpe_ptt": 1,
        "waste_generated_hdpe_ptt": 1,
    },
)
def illegal_collection_data_hdpe_ptt():
    return rate_to_illegal_collection_hdpe_ptt() * waste_generated_hdpe_ptt()


@component.add(
    name="illegal collection data Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_to_illegal_collection_pet_other": 1,
        "waste_generated_pet_other": 1,
    },
)
def illegal_collection_data_pet_other():
    return rate_to_illegal_collection_pet_other() * waste_generated_pet_other()


@component.add(
    name="Sent for residual treatment hdpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"formal_domestic_treatment_hdpe_ptt": 1, "residual_rate_hdpe_ptt": 1},
)
def sent_for_residual_treatment_hdpe_ptt():
    return formal_domestic_treatment_hdpe_ptt() * residual_rate_hdpe_ptt()


@component.add(
    name="Illegal collection hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_hdpe_bottle": 1},
    other_deps={
        "_integ_illegal_collection_hdpe_bottle": {
            "initial": {},
            "step": {
                "illegal_collection_data_hdpe_bottle": 1,
                "mismanagement_hdpe_bottle": 1,
            },
        }
    },
)
def illegal_collection_hdpe_bottle():
    return _integ_illegal_collection_hdpe_bottle()


_integ_illegal_collection_hdpe_bottle = Integ(
    lambda: illegal_collection_data_hdpe_bottle() - mismanagement_hdpe_bottle(),
    lambda: 2739,
    "_integ_illegal_collection_hdpe_bottle",
)


@component.add(
    name="Illegal collection hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_hdpe_film": 1},
    other_deps={
        "_integ_illegal_collection_hdpe_film": {
            "initial": {},
            "step": {
                "illegal_collection_data_hdpe_film": 1,
                "mismanagement_hdpe_film": 1,
            },
        }
    },
)
def illegal_collection_hdpe_film():
    return _integ_illegal_collection_hdpe_film()


_integ_illegal_collection_hdpe_film = Integ(
    lambda: illegal_collection_data_hdpe_film() - mismanagement_hdpe_film(),
    lambda: 0,
    "_integ_illegal_collection_hdpe_film",
)


@component.add(
    name="Illegal collection hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_hdpe_other": 1},
    other_deps={
        "_integ_illegal_collection_hdpe_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_hdpe_other": 1,
                "mismanagement_hdpe_other": 1,
            },
        }
    },
)
def illegal_collection_hdpe_other():
    return _integ_illegal_collection_hdpe_other()


_integ_illegal_collection_hdpe_other = Integ(
    lambda: illegal_collection_data_hdpe_other() - mismanagement_hdpe_other(),
    lambda: 350,
    "_integ_illegal_collection_hdpe_other",
)


@component.add(
    name="Illegal collection hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_hdpe_ptt": 1},
    other_deps={
        "_integ_illegal_collection_hdpe_ptt": {
            "initial": {},
            "step": {
                "illegal_collection_data_hdpe_ptt": 1,
                "mismanagement_hdpe_ptt": 1,
            },
        }
    },
)
def illegal_collection_hdpe_ptt():
    return _integ_illegal_collection_hdpe_ptt()


_integ_illegal_collection_hdpe_ptt = Integ(
    lambda: illegal_collection_data_hdpe_ptt() - mismanagement_hdpe_ptt(),
    lambda: 146,
    "_integ_illegal_collection_hdpe_ptt",
)


@component.add(
    name="Illegal collection pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pet_film": 1},
    other_deps={
        "_integ_illegal_collection_pet_film": {
            "initial": {},
            "step": {
                "illegal_collection_data_pet_film": 1,
                "mismanagement_pet_film": 1,
            },
        }
    },
)
def illegal_collection_pet_film():
    return _integ_illegal_collection_pet_film()


_integ_illegal_collection_pet_film = Integ(
    lambda: illegal_collection_data_pet_film() - mismanagement_pet_film(),
    lambda: 0,
    "_integ_illegal_collection_pet_film",
)


@component.add(
    name="Illegal collection Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_illegal_collection_pet_other": 1},
    other_deps={
        "_integ_illegal_collection_pet_other": {
            "initial": {},
            "step": {
                "illegal_collection_data_pet_other": 1,
                "mismanagement_pet_other": 1,
            },
        }
    },
)
def illegal_collection_pet_other():
    return _integ_illegal_collection_pet_other()


_integ_illegal_collection_pet_other = Integ(
    lambda: illegal_collection_data_pet_other() - mismanagement_pet_other(),
    lambda: 225.6,
    "_integ_illegal_collection_pet_other",
)


@component.add(
    name="sent for sorting hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_hdpe_other": 1,
        "sent_for_sorting_rate_hdpe_other": 1,
    },
)
def sent_for_sorting_hdpe_other():
    return formal_domestic_treatment_hdpe_other() * sent_for_sorting_rate_hdpe_other()


@component.add(
    name="sent for sorting hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_hdpe_ptt": 1,
        "sent_for_sorting_rate_hdpe_ptt": 1,
    },
)
def sent_for_sorting_hdpe_ptt():
    return formal_domestic_treatment_hdpe_ptt() * sent_for_sorting_rate_hdpe_ptt()


@component.add(
    name="sent for sorting rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_hdpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_pet_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Incineration hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_hdpe_bottle": 1},
    other_deps={
        "_integ_incineration_hdpe_bottle": {
            "initial": {},
            "step": {"sent_to_incineration_hdpe_bottle": 1},
        }
    },
)
def incineration_hdpe_bottle():
    return _integ_incineration_hdpe_bottle()


_integ_incineration_hdpe_bottle = Integ(
    lambda: sent_to_incineration_hdpe_bottle(),
    lambda: 0,
    "_integ_incineration_hdpe_bottle",
)


@component.add(
    name="Incineration hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_hdpe_film": 1},
    other_deps={
        "_integ_incineration_hdpe_film": {
            "initial": {},
            "step": {"sent_to_incineration_hdpe_film": 1},
        }
    },
)
def incineration_hdpe_film():
    return _integ_incineration_hdpe_film()


_integ_incineration_hdpe_film = Integ(
    lambda: sent_to_incineration_hdpe_film(), lambda: 0, "_integ_incineration_hdpe_film"
)


@component.add(
    name="Incineration hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_hdpe_other": 1},
    other_deps={
        "_integ_incineration_hdpe_other": {
            "initial": {},
            "step": {"sent_to_incineration_hdpe_other": 1},
        }
    },
)
def incineration_hdpe_other():
    return _integ_incineration_hdpe_other()


_integ_incineration_hdpe_other = Integ(
    lambda: sent_to_incineration_hdpe_other(),
    lambda: 0,
    "_integ_incineration_hdpe_other",
)


@component.add(
    name="Incineration hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_hdpe_ptt": 1},
    other_deps={
        "_integ_incineration_hdpe_ptt": {
            "initial": {},
            "step": {"sent_to_incineration_hdpe_ptt": 1},
        }
    },
)
def incineration_hdpe_ptt():
    return _integ_incineration_hdpe_ptt()


_integ_incineration_hdpe_ptt = Integ(
    lambda: sent_to_incineration_hdpe_ptt(), lambda: 0, "_integ_incineration_hdpe_ptt"
)


@component.add(
    name="Incineration pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pet_film": 1},
    other_deps={
        "_integ_incineration_pet_film": {
            "initial": {},
            "step": {"sent_to_incineration_pet_film": 1},
        }
    },
)
def incineration_pet_film():
    return _integ_incineration_pet_film()


_integ_incineration_pet_film = Integ(
    lambda: sent_to_incineration_pet_film(), lambda: 0, "_integ_incineration_pet_film"
)


@component.add(
    name="Incineration Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_incineration_pet_other": 1},
    other_deps={
        "_integ_incineration_pet_other": {
            "initial": {},
            "step": {"sent_to_incineration_pet_other": 1},
        }
    },
)
def incineration_pet_other():
    return _integ_incineration_pet_other()


_integ_incineration_pet_other = Integ(
    lambda: sent_to_incineration_pet_other(), lambda: 0, "_integ_incineration_pet_other"
)


@component.add(
    name="Sent to incineration hdpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_hdpe_ptt": 1,
        "domestic_residual_treatment_hdpe_ptt": 1,
    },
)
def sent_to_incineration_hdpe_ptt():
    return incineration_rate_hdpe_ptt() * domestic_residual_treatment_hdpe_ptt()


@component.add(
    name="Incineration rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_hdpe_bottle": 1},
)
def incineration_rate_hdpe_bottle():
    return 1 - landfill_rate_hdpe_bottle()


@component.add(
    name="Incineration rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_hdpe_other": 1},
)
def incineration_rate_hdpe_other():
    return 1 - landfill_rate_hdpe_other()


@component.add(
    name="Incineration rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_hdpe_ptt": 1},
)
def incineration_rate_hdpe_ptt():
    return 1 - landfill_rate_hdpe_ptt()


@component.add(
    name="Incineration rate pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_film": 1},
)
def incineration_rate_pet_film():
    return 1 - landfill_rate_pet_film()


@component.add(
    name="Incineration rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_pet_other": 1},
)
def incineration_rate_pet_other():
    return 1 - landfill_rate_pet_other()


@component.add(
    name="Sent to landfill hdpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_hdpe_film": 1,
        "domestic_residual_treatment_hdpe_film": 1,
    },
)
def sent_to_landfill_hdpe_film():
    return landfill_rate_hdpe_film() * domestic_residual_treatment_hdpe_film()


@component.add(
    name="Sent to landfill hdpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_hdpe_other": 1,
        "domestic_residual_treatment_hdpe_other": 1,
    },
)
def sent_to_landfill_hdpe_other():
    return landfill_rate_hdpe_other() * domestic_residual_treatment_hdpe_other()


@component.add(
    name="Sent to landfill hdpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"landfill_rate_hdpe_ptt": 1, "domestic_residual_treatment_hdpe_ptt": 1},
)
def sent_to_landfill_hdpe_ptt():
    return landfill_rate_hdpe_ptt() * domestic_residual_treatment_hdpe_ptt()


@component.add(
    name="Sent to landfill Pet Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_pet_other": 1,
        "domestic_residual_treatment_pet_other": 1,
    },
)
def sent_to_landfill_pet_other():
    return landfill_rate_pet_other() * domestic_residual_treatment_pet_other()


@component.add(
    name="Landfill hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_hdpe_bottle": 1},
    other_deps={
        "_integ_landfill_hdpe_bottle": {
            "initial": {},
            "step": {"sent_to_landfill_hdpe_bottle": 1},
        }
    },
)
def landfill_hdpe_bottle():
    return _integ_landfill_hdpe_bottle()


_integ_landfill_hdpe_bottle = Integ(
    lambda: sent_to_landfill_hdpe_bottle(), lambda: 0, "_integ_landfill_hdpe_bottle"
)


@component.add(
    name="Landfill hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_hdpe_film": 1},
    other_deps={
        "_integ_landfill_hdpe_film": {
            "initial": {},
            "step": {"sent_to_landfill_hdpe_film": 1},
        }
    },
)
def landfill_hdpe_film():
    return _integ_landfill_hdpe_film()


_integ_landfill_hdpe_film = Integ(
    lambda: sent_to_landfill_hdpe_film(), lambda: 0, "_integ_landfill_hdpe_film"
)


@component.add(
    name="Landfill hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_hdpe_other": 1},
    other_deps={
        "_integ_landfill_hdpe_other": {
            "initial": {},
            "step": {"sent_to_landfill_hdpe_other": 1},
        }
    },
)
def landfill_hdpe_other():
    return _integ_landfill_hdpe_other()


_integ_landfill_hdpe_other = Integ(
    lambda: sent_to_landfill_hdpe_other(), lambda: 0, "_integ_landfill_hdpe_other"
)


@component.add(
    name="Landfill hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_hdpe_ptt": 1},
    other_deps={
        "_integ_landfill_hdpe_ptt": {
            "initial": {},
            "step": {"sent_to_landfill_hdpe_ptt": 1},
        }
    },
)
def landfill_hdpe_ptt():
    return _integ_landfill_hdpe_ptt()


_integ_landfill_hdpe_ptt = Integ(
    lambda: sent_to_landfill_hdpe_ptt(), lambda: 0, "_integ_landfill_hdpe_ptt"
)


@component.add(
    name="Landfill pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pet_film": 1},
    other_deps={
        "_integ_landfill_pet_film": {
            "initial": {},
            "step": {"sent_to_landfill_pet_film": 1},
        }
    },
)
def landfill_pet_film():
    return _integ_landfill_pet_film()


_integ_landfill_pet_film = Integ(
    lambda: sent_to_landfill_pet_film(), lambda: 0, "_integ_landfill_pet_film"
)


@component.add(
    name="Landfill Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_landfill_pet_other": 1},
    other_deps={
        "_integ_landfill_pet_other": {
            "initial": {},
            "step": {"sent_to_landfill_pet_other": 1},
        }
    },
)
def landfill_pet_other():
    return _integ_landfill_pet_other()


_integ_landfill_pet_other = Integ(
    lambda: sent_to_landfill_pet_other(), lambda: 0, "_integ_landfill_pet_other"
)


@component.add(
    name="landfill rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="landfill rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def landfill_rate_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.675, 0.449, 0.357, 0.289, 0.229, 0.197, 0.157, 0.139, 0.145, 0.128, 0.128],
    )


@component.add(
    name="to waste generated hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_hdpe_bottle": 1},
)
def to_waste_generated_hdpe_bottle():
    return total_pom_hdpe_bottle()


@component.add(
    name="to waste generated hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_hdpe_other": 1},
)
def to_waste_generated_hdpe_other():
    return total_pom_hdpe_other()


@component.add(
    name="to waste generated hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_hdpe_ptt": 1},
)
def to_waste_generated_hdpe_ptt():
    return total_pom_hdpe_ptt()


@component.add(
    name="Littered hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_hdpe_bottle": 1},
    other_deps={
        "_integ_littered_hdpe_bottle": {
            "initial": {},
            "step": {"littering_hdpe_bottle": 1},
        }
    },
)
def littered_hdpe_bottle():
    return _integ_littered_hdpe_bottle()


_integ_littered_hdpe_bottle = Integ(
    lambda: littering_hdpe_bottle(), lambda: 0, "_integ_littered_hdpe_bottle"
)


@component.add(
    name="Littered hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_hdpe_film": 1},
    other_deps={
        "_integ_littered_hdpe_film": {"initial": {}, "step": {"littering_hdpe_film": 1}}
    },
)
def littered_hdpe_film():
    return _integ_littered_hdpe_film()


_integ_littered_hdpe_film = Integ(
    lambda: littering_hdpe_film(), lambda: 0, "_integ_littered_hdpe_film"
)


@component.add(
    name="Littered hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_hdpe_other": 1},
    other_deps={
        "_integ_littered_hdpe_other": {
            "initial": {},
            "step": {"littering_hdpe_other": 1},
        }
    },
)
def littered_hdpe_other():
    return _integ_littered_hdpe_other()


_integ_littered_hdpe_other = Integ(
    lambda: littering_hdpe_other(), lambda: 0, "_integ_littered_hdpe_other"
)


@component.add(
    name="Littered hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_hdpe_ptt": 1},
    other_deps={
        "_integ_littered_hdpe_ptt": {"initial": {}, "step": {"littering_hdpe_ptt": 1}}
    },
)
def littered_hdpe_ptt():
    return _integ_littered_hdpe_ptt()


_integ_littered_hdpe_ptt = Integ(
    lambda: littering_hdpe_ptt(), lambda: 0, "_integ_littered_hdpe_ptt"
)


@component.add(
    name="Littered pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pet_film": 1},
    other_deps={
        "_integ_littered_pet_film": {"initial": {}, "step": {"littering_pet_film": 1}}
    },
)
def littered_pet_film():
    return _integ_littered_pet_film()


_integ_littered_pet_film = Integ(
    lambda: littering_pet_film(), lambda: 0, "_integ_littered_pet_film"
)


@component.add(
    name="Littered Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_littered_pet_other": 1},
    other_deps={
        "_integ_littered_pet_other": {"initial": {}, "step": {"littering_pet_other": 1}}
    },
)
def littered_pet_other():
    return _integ_littered_pet_other()


_integ_littered_pet_other = Integ(
    lambda: littering_pet_other(), lambda: 0, "_integ_littered_pet_other"
)


@component.add(
    name="littering hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_hdpe_bottle": 1, "waste_generated_hdpe_bottle": 1},
)
def littering_hdpe_bottle():
    return littering_rate_hdpe_bottle() * waste_generated_hdpe_bottle()


@component.add(
    name="littering hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_hdpe_other": 1, "waste_generated_hdpe_other": 1},
)
def littering_hdpe_other():
    return littering_rate_hdpe_other() * waste_generated_hdpe_other()


@component.add(
    name="littering hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_hdpe_ptt": 1, "waste_generated_hdpe_ptt": 1},
)
def littering_hdpe_ptt():
    return littering_rate_hdpe_ptt() * waste_generated_hdpe_ptt()


@component.add(
    name="littering Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"littering_rate_pet_other": 1, "waste_generated_pet_other": 1},
)
def littering_pet_other():
    return littering_rate_pet_other() * waste_generated_pet_other()


@component.add(
    name="littering rate formulation hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_hdpe_bottle():
    return 0.01


@component.add(
    name="littering rate formulation hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_hdpe_film():
    return 0.01


@component.add(
    name="littering rate formulation hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_hdpe_other():
    return 0.01


@component.add(
    name="littering rate formulation hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_hdpe_ptt():
    return 0.01


@component.add(
    name="littering rate formulation pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pet_film():
    return 0.01


@component.add(
    name="littering rate formulation Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_formulation_pet_other():
    return 0.01


@component.add(
    name="rate sent for reuse Pet Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pet_other():
    return 0


@component.add(
    name="Waste collected hdpe film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_hdpe_film": 1},
    other_deps={
        "_integ_waste_collected_hdpe_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_hdpe_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_film": 1,
            },
        }
    },
)
def waste_collected_hdpe_film():
    return _integ_waste_collected_hdpe_film()


_integ_waste_collected_hdpe_film = Integ(
    lambda: formal_waste_collection_hdpe_film()
    - waste_collected_sent_to_formal_domestic_treatment_hdpe_film(),
    lambda: 88022,
    "_integ_waste_collected_hdpe_film",
)


@component.add(
    name="littering rate historical data hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_hdpe_bottle():
    return 0.04


@component.add(
    name="littering rate historical data hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_hdpe_film():
    return 0.04


@component.add(
    name="littering rate historical data hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_hdpe_other():
    return 0.04


@component.add(
    name="littering rate historical data hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_hdpe_ptt():
    return 0.04


@component.add(
    name="littering rate historical data pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pet_film():
    return 0.04


@component.add(
    name="littering rate historical data Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def littering_rate_historical_data_pet_other():
    return 0.04


@component.add(
    name="Mechanical recycling Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pet_other": 1,
        "domestic_recycling_pet_other": 1,
    },
)
def mechanical_recycling_pet_other():
    return rate_of_mechanical_recycling_pet_other() * domestic_recycling_pet_other()


@component.add(
    name="Littering rate pet film",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_policy2_on_litering_pet_film": 1,
        "littering_rate_formulation_pet_film": 1,
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "littering_rate_historical_data_pet_film": 1,
    },
)
def littering_rate_pet_film():
    return impact_of_policy2_on_litering_pet_film() * if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: littering_rate_formulation_pet_film(),
        lambda: littering_rate_historical_data_pet_film(),
    )


@component.add(
    name="Recycled chemically pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pet_film": 1},
    other_deps={
        "_integ_recycled_chemically_pet_film": {
            "initial": {},
            "step": {"chemical_recycling_pet_film": 1},
        }
    },
)
def recycled_chemically_pet_film():
    return _integ_recycled_chemically_pet_film()


_integ_recycled_chemically_pet_film = Integ(
    lambda: chemical_recycling_pet_film(),
    lambda: 0,
    "_integ_recycled_chemically_pet_film",
)


@component.add(
    name="Recycled chemically Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_pet_other": 1},
    other_deps={
        "_integ_recycled_chemically_pet_other": {
            "initial": {},
            "step": {"chemical_recycling_pet_other": 1},
        }
    },
)
def recycled_chemically_pet_other():
    return _integ_recycled_chemically_pet_other()


_integ_recycled_chemically_pet_other = Integ(
    lambda: chemical_recycling_pet_other(),
    lambda: 0,
    "_integ_recycled_chemically_pet_other",
)


@component.add(
    name="Waste generated hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_hdpe_bottle": 1},
    other_deps={
        "_integ_waste_generated_hdpe_bottle": {
            "initial": {},
            "step": {
                "to_waste_generated_hdpe_bottle": 1,
                "illegal_collection_data_hdpe_bottle": 2,
                "littering_hdpe_bottle": 1,
                "formal_waste_collection_hdpe_bottle": 1,
            },
        }
    },
)
def waste_generated_hdpe_bottle():
    return _integ_waste_generated_hdpe_bottle()


_integ_waste_generated_hdpe_bottle = Integ(
    lambda: to_waste_generated_hdpe_bottle()
    - illegal_collection_data_hdpe_bottle()
    - littering_hdpe_bottle()
    - formal_waste_collection_hdpe_bottle()
    - illegal_collection_data_hdpe_bottle(),
    lambda: 456624,
    "_integ_waste_generated_hdpe_bottle",
)


@component.add(
    name="Waste generated hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_hdpe_film": 1},
    other_deps={
        "_integ_waste_generated_hdpe_film": {
            "initial": {},
            "step": {
                "to_waste_generated_hdpe_film": 1,
                "illegal_collection_data_hdpe_film": 2,
                "littering_hdpe_film": 1,
                "formal_waste_collection_hdpe_film": 1,
            },
        }
    },
)
def waste_generated_hdpe_film():
    return _integ_waste_generated_hdpe_film()


_integ_waste_generated_hdpe_film = Integ(
    lambda: to_waste_generated_hdpe_film()
    - illegal_collection_data_hdpe_film()
    - littering_hdpe_film()
    - formal_waste_collection_hdpe_film()
    - illegal_collection_data_hdpe_film(),
    lambda: 92266.3,
    "_integ_waste_generated_hdpe_film",
)


@component.add(
    name="mismanagement Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pet_other": 1, "rate_dumped_pet_other": 1},
)
def mismanagement_pet_other():
    return illegal_collection_pet_other() * rate_dumped_pet_other()


@component.add(
    name="Recycling rejects Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pet_other": 1},
    other_deps={
        "_integ_recycling_rejects_pet_other": {
            "initial": {},
            "step": {"recycling_rejects_rate_pet_other": 1},
        }
    },
)
def recycling_rejects_pet_other():
    return _integ_recycling_rejects_pet_other()


_integ_recycling_rejects_pet_other = Integ(
    lambda: recycling_rejects_rate_pet_other(),
    lambda: 0,
    "_integ_recycling_rejects_pet_other",
)


@component.add(
    name="wmc collected formulation hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_hdpe_bottle():
    return 0.25


@component.add(
    name="Mechanical recycling hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_hdpe_bottle": 1,
        "domestic_recycling_hdpe_bottle": 1,
    },
)
def mechanical_recycling_hdpe_bottle():
    return rate_of_mechanical_recycling_hdpe_bottle() * domestic_recycling_hdpe_bottle()


@component.add(
    name="Mechanical recycling hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_hdpe_film": 1,
        "domestic_recycling_hdpe_film": 1,
    },
)
def mechanical_recycling_hdpe_film():
    return rate_of_mechanical_recycling_hdpe_film() * domestic_recycling_hdpe_film()


@component.add(
    name="Mechanical recycling hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_hdpe_other": 1,
        "domestic_recycling_hdpe_other": 1,
    },
)
def mechanical_recycling_hdpe_other():
    return rate_of_mechanical_recycling_hdpe_other() * domestic_recycling_hdpe_other()


@component.add(
    name="Mechanical recycling hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_hdpe_ptt": 1,
        "domestic_recycling_hdpe_ptt": 1,
    },
)
def mechanical_recycling_hdpe_ptt():
    return rate_of_mechanical_recycling_hdpe_ptt() * domestic_recycling_hdpe_ptt()


@component.add(
    name="Mechanical recycling pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "rate_of_mechanical_recycling_pet_film": 1,
        "domestic_recycling_pet_film": 1,
    },
)
def mechanical_recycling_pet_film():
    return rate_of_mechanical_recycling_pet_film() * domestic_recycling_pet_film()


@component.add(
    name="Overseas treatment hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_hdpe_bottle": 1},
    other_deps={
        "_integ_overseas_treatment_hdpe_bottle": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_hdpe_bottle": 1},
        }
    },
)
def overseas_treatment_hdpe_bottle():
    return _integ_overseas_treatment_hdpe_bottle()


_integ_overseas_treatment_hdpe_bottle = Integ(
    lambda: sent_for_overseas_treatment_hdpe_bottle(),
    lambda: 0,
    "_integ_overseas_treatment_hdpe_bottle",
)


@component.add(
    name="Overseas treatment hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_hdpe_film": 1},
    other_deps={
        "_integ_overseas_treatment_hdpe_film": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_hdpe_film": 1},
        }
    },
)
def overseas_treatment_hdpe_film():
    return _integ_overseas_treatment_hdpe_film()


_integ_overseas_treatment_hdpe_film = Integ(
    lambda: sent_for_overseas_treatment_hdpe_film(),
    lambda: 21958,
    "_integ_overseas_treatment_hdpe_film",
)


@component.add(
    name="Sent to incineration pet film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pet_film": 1,
        "domestic_residual_treatment_pet_film": 1,
    },
)
def sent_to_incineration_pet_film():
    return incineration_rate_pet_film() * domestic_residual_treatment_pet_film()


@component.add(
    name="wmc historical hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_hdpe_bottle():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="mismanagement hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_hdpe_bottle": 1, "rate_dumped_hdpe_bottle": 1},
)
def mismanagement_hdpe_bottle():
    return illegal_collection_hdpe_bottle() * rate_dumped_hdpe_bottle()


@component.add(
    name="mismanagement hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_hdpe_film": 1, "rate_dumped_hdpe_film": 1},
)
def mismanagement_hdpe_film():
    return illegal_collection_hdpe_film() * rate_dumped_hdpe_film()


@component.add(
    name="mismanagement hdpe other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_hdpe_other": 1, "rate_dumped_hdpe_other": 1},
)
def mismanagement_hdpe_other():
    return illegal_collection_hdpe_other() * rate_dumped_hdpe_other()


@component.add(
    name="mismanagement hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_hdpe_ptt": 1, "rate_dumped_hdpe_ptt": 1},
)
def mismanagement_hdpe_ptt():
    return illegal_collection_hdpe_ptt() * rate_dumped_hdpe_ptt()


@component.add(
    name="mismanagement pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"illegal_collection_pet_film": 1, "rate_dumped_pet_film": 1},
)
def mismanagement_pet_film():
    return illegal_collection_pet_film() * rate_dumped_pet_film()


@component.add(
    name="rate of recycling hdpe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_hdpe_bottle": 1,
        "historical_on_rate_of_recycling_hdpe_bottle": 1,
    },
)
def rate_of_recycling_hdpe_bottle():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: formulation_for_rate_of_recycling_hdpe_bottle(),
        lambda: historical_on_rate_of_recycling_hdpe_bottle(),
    )


@component.add(
    name="Overseas treament rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_hdpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_hdpe_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_hdpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="Overseas treament rate hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def overseas_treament_rate_hdpe_ptt():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.548, 0.566, 0.602, 0.587, 0.564, 0.525, 0.558, 0.422, 0.382, 0.466],
    )


@component.add(
    name="rate of recycling pet film",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pet_film": 1,
        "historical_on_rate_of_recycling_pet_film": 1,
    },
)
def rate_of_recycling_pet_film():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: formulation_for_rate_of_recycling_pet_film(),
        lambda: historical_on_rate_of_recycling_pet_film(),
    )


@component.add(
    name="rate of recycling Pet Other",
    units="1/Quarter",
    limits=(np.nan, 0.4),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "formulation_for_rate_of_recycling_pet_other": 1,
        "historical_on_rate_of_recycling_pet_other": 1,
    },
)
def rate_of_recycling_pet_other():
    """
    0.4
    """
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: formulation_for_rate_of_recycling_pet_other(),
        lambda: historical_on_rate_of_recycling_pet_other(),
    )


@component.add(
    name="Sorting hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_hdpe_ptt": 1},
    other_deps={
        "_integ_sorting_hdpe_ptt": {
            "initial": {},
            "step": {
                "sent_for_sorting_hdpe_ptt": 1,
                "sent_for_recycling_hdpe_ptt": 1,
                "recycling_rejects_rate_hdpe_ptt": 1,
                "sent_for_overseas_treatment_hdpe_ptt": 1,
            },
        }
    },
)
def sorting_hdpe_ptt():
    return _integ_sorting_hdpe_ptt()


_integ_sorting_hdpe_ptt = Integ(
    lambda: sent_for_sorting_hdpe_ptt()
    - sent_for_recycling_hdpe_ptt()
    - recycling_rejects_rate_hdpe_ptt()
    - sent_for_overseas_treatment_hdpe_ptt(),
    lambda: 10695,
    "_integ_sorting_hdpe_ptt",
)


@component.add(
    name="rate of recycling reject hdpe other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_other": 1,
        "time": 1,
        "formulation_for_recycling_rate_hdpe_other": 1,
        "historical_on_recycling_hdpe_other": 1,
    },
)
def rate_of_recycling_reject_hdpe_other():
    return if_then_else(
        policy1_introduction_time_hdpe_other() < time(),
        lambda: formulation_for_recycling_rate_hdpe_other(),
        lambda: historical_on_recycling_hdpe_other(),
    )


@component.add(
    name="rate sent for domestic recycling Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pet_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Overseas treatment hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_hdpe_other": 1},
    other_deps={
        "_integ_overseas_treatment_hdpe_other": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_hdpe_other": 1},
        }
    },
)
def overseas_treatment_hdpe_other():
    return _integ_overseas_treatment_hdpe_other()


_integ_overseas_treatment_hdpe_other = Integ(
    lambda: sent_for_overseas_treatment_hdpe_other(),
    lambda: 0,
    "_integ_overseas_treatment_hdpe_other",
)


@component.add(
    name="Overseas treatment hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_overseas_treatment_hdpe_ptt": 1},
    other_deps={
        "_integ_overseas_treatment_hdpe_ptt": {
            "initial": {},
            "step": {"sent_for_overseas_treatment_hdpe_ptt": 1},
        }
    },
)
def overseas_treatment_hdpe_ptt():
    return _integ_overseas_treatment_hdpe_ptt()


_integ_overseas_treatment_hdpe_ptt = Integ(
    lambda: sent_for_overseas_treatment_hdpe_ptt(),
    lambda: 0,
    "_integ_overseas_treatment_hdpe_ptt",
)


@component.add(
    name="rate sent for reuse hdpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_hdpe_bottle():
    return 0


@component.add(
    name="rvm historical pet film", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pet_film():
    return 0


@component.add(
    name="rvm historical Pet Other", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_pet_other():
    return 0


@component.add(
    name="rate overseas hdpe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "formulation_of_overseas_rate_hdpe_bottle": 1,
        "historical_overseas_rate_hdpe_bottle": 1,
    },
)
def rate_overseas_hdpe_bottle():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: formulation_of_overseas_rate_hdpe_bottle(),
        lambda: historical_overseas_rate_hdpe_bottle(),
    )


@component.add(
    name="rate dumped hdpe ptt",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_hdpe_ptt():
    return 0.006


@component.add(
    name="rate overseas Pet Other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "formulation_of_overseas_rate_pet_other": 1,
        "historical_overseas_rate_pet_other": 1,
    },
)
def rate_overseas_pet_other():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: formulation_of_overseas_rate_pet_other(),
        lambda: historical_overseas_rate_pet_other(),
    )


@component.add(
    name="sent for formal domestic pet film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pet_film():
    """
    0.4
    """
    return 0.994


@component.add(
    name="sent for formal domestic Pet Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_pet_other():
    """
    0.4
    """
    return 0.994


@component.add(
    name="rate sent for domestic recycling hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_hdpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="Sent for overseas treatment pet film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pet_film": 1, "sorting_pet_film": 1},
)
def sent_for_overseas_treatment_pet_film():
    return overseas_treament_rate_pet_film() * sorting_pet_film()


@component.add(
    name="Sent for overseas treatment Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_pet_other": 1, "sorting_pet_other": 1},
)
def sent_for_overseas_treatment_pet_other():
    return overseas_treament_rate_pet_other() * sorting_pet_other()


@component.add(
    name="rate dumped hdpe film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_hdpe_film():
    return 0.006


@component.add(
    name="rate dumped hdpe other",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_hdpe_other():
    return 0.006


@component.add(
    name="wmc historical Pet Other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pet_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="Waste collected hdpe bottle",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_hdpe_bottle": 1},
    other_deps={
        "_integ_waste_collected_hdpe_bottle": {
            "initial": {},
            "step": {
                "formal_waste_collection_hdpe_bottle": 1,
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_bottle": 1,
            },
        }
    },
)
def waste_collected_hdpe_bottle():
    return _integ_waste_collected_hdpe_bottle()


_integ_waste_collected_hdpe_bottle = Integ(
    lambda: formal_waste_collection_hdpe_bottle()
    - waste_collected_sent_to_formal_domestic_treatment_hdpe_bottle(),
    lambda: 435619,
    "_integ_waste_collected_hdpe_bottle",
)


@component.add(
    name="Recycling rejects hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_hdpe_ptt": 1},
    other_deps={
        "_integ_recycling_rejects_hdpe_ptt": {
            "initial": {},
            "step": {"recycling_rejects_rate_hdpe_ptt": 1},
        }
    },
)
def recycling_rejects_hdpe_ptt():
    return _integ_recycling_rejects_hdpe_ptt()


_integ_recycling_rejects_hdpe_ptt = Integ(
    lambda: recycling_rejects_rate_hdpe_ptt(),
    lambda: 0,
    "_integ_recycling_rejects_hdpe_ptt",
)


@component.add(
    name="Waste collected hdpe other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_hdpe_other": 1},
    other_deps={
        "_integ_waste_collected_hdpe_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_hdpe_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_other": 1,
            },
        }
    },
)
def waste_collected_hdpe_other():
    return _integ_waste_collected_hdpe_other()


_integ_waste_collected_hdpe_other = Integ(
    lambda: formal_waste_collection_hdpe_other()
    - waste_collected_sent_to_formal_domestic_treatment_hdpe_other(),
    lambda: 55687,
    "_integ_waste_collected_hdpe_other",
)


@component.add(
    name="rate to illegal collection pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pet_film():
    return 0.006


@component.add(
    name="rate to illegal collection Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_pet_other():
    return 0.006


@component.add(
    name="Rate of chemical recycling pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pet_film():
    return 0


@component.add(
    name="Rate of chemical recycling Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_pet_other():
    return 0


@component.add(
    name="recycling rejects rate Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_pet_other": 1, "sorting_pet_other": 1},
)
def recycling_rejects_rate_pet_other():
    return rate_of_recycling_reject_pet_other() * sorting_pet_other()


@component.add(
    name="Sent to incineration Pet Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_pet_other": 1,
        "domestic_residual_treatment_pet_other": 1,
    },
)
def sent_to_incineration_pet_other():
    return incineration_rate_pet_other() * domestic_residual_treatment_pet_other()


@component.add(
    name="Recycled chemically hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycled_chemically_hdpe_ptt": 1},
    other_deps={
        "_integ_recycled_chemically_hdpe_ptt": {
            "initial": {},
            "step": {"chemical_recycling_hdpe_ptt": 1},
        }
    },
)
def recycled_chemically_hdpe_ptt():
    return _integ_recycled_chemically_hdpe_ptt()


_integ_recycled_chemically_hdpe_ptt = Integ(
    lambda: chemical_recycling_hdpe_ptt(),
    lambda: 0,
    "_integ_recycled_chemically_hdpe_ptt",
)


@component.add(
    name="wmc historical hdpe film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_hdpe_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="rate dumped hdpe bottle",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_hdpe_bottle():
    return 0.006


@component.add(
    name="rate of mechanical recycling pet film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pet_film():
    return 1


@component.add(
    name="rate of mechanical recycling Pet Other",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_mechanical_recycling_pet_other():
    return 1


@component.add(
    name="to waste generated Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_pom_pet_other": 1},
)
def to_waste_generated_pet_other():
    return total_pom_pet_other()


@component.add(
    name="rate dumped pet film",
    units="1/Quarter",
    limits=(np.nan, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_dumped_pet_film():
    return 0.006


@component.add(
    name="Recycling rejects pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_recycling_rejects_pet_film": 1},
    other_deps={
        "_integ_recycling_rejects_pet_film": {
            "initial": {},
            "step": {"recycling_rejects_rate_pet_film": 1},
        }
    },
)
def recycling_rejects_pet_film():
    return _integ_recycling_rejects_pet_film()


_integ_recycling_rejects_pet_film = Integ(
    lambda: recycling_rejects_rate_pet_film(),
    lambda: 0,
    "_integ_recycling_rejects_pet_film",
)


@component.add(
    name="Rate of chemical recycling hdpe bottle",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_hdpe_bottle():
    return 0


@component.add(
    name="recycling rejects rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_hdpe_bottle": 1, "sorting_hdpe_bottle": 1},
)
def recycling_rejects_rate_hdpe_bottle():
    return rate_of_recycling_reject_hdpe_bottle() * sorting_hdpe_bottle()


@component.add(
    name="Rate of chemical recycling hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_hdpe_other():
    return 0


@component.add(
    name="Rate of chemical recycling hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_of_chemical_recycling_hdpe_ptt():
    return 0


@component.add(
    name="rate of recycling reject hdpe film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_film": 1,
        "time": 1,
        "formulation_for_recycling_rate_hdpe_film": 1,
        "historical_on_recycling_hdpe_film": 1,
    },
)
def rate_of_recycling_reject_hdpe_film():
    return if_then_else(
        policy1_introduction_time_hdpe_film() < time(),
        lambda: formulation_for_recycling_rate_hdpe_film(),
        lambda: historical_on_recycling_hdpe_film(),
    )


@component.add(
    name="Sorting Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pet_other": 1},
    other_deps={
        "_integ_sorting_pet_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_pet_other": 1,
                "sent_for_recycling_pet_other": 1,
                "recycling_rejects_rate_pet_other": 1,
                "sent_for_overseas_treatment_pet_other": 1,
            },
        }
    },
)
def sorting_pet_other():
    return _integ_sorting_pet_other()


_integ_sorting_pet_other = Integ(
    lambda: sent_for_sorting_pet_other()
    - sent_for_recycling_pet_other()
    - recycling_rejects_rate_pet_other()
    - sent_for_overseas_treatment_pet_other(),
    lambda: 16429,
    "_integ_sorting_pet_other",
)


@component.add(
    name="Waste collected sent to formal domestic treatment hdpe ptt",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sent_for_formal_domestic_hdpe_ptt": 1, "waste_collected_hdpe_ptt": 1},
)
def waste_collected_sent_to_formal_domestic_treatment_hdpe_ptt():
    return sent_for_formal_domestic_hdpe_ptt() * waste_collected_hdpe_ptt()


@component.add(
    name="wmc collected formulation Pet Other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pet_other():
    return 0.25


@component.add(
    name="rvm historical hdpe bottle", comp_type="Constant", comp_subtype="Normal"
)
def rvm_historical_hdpe_bottle():
    return 0


@component.add(
    name="rate of recycling reject Pet Other",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_other": 1,
        "time": 1,
        "formulation_for_recycling_rate_pet_other": 1,
        "historical_on_recycling_pet_other": 1,
    },
)
def rate_of_recycling_reject_pet_other():
    return if_then_else(
        policy1_introduction_time_pet_other() < time(),
        lambda: formulation_for_recycling_rate_pet_other(),
        lambda: historical_on_recycling_pet_other(),
    )


@component.add(
    name="Waste collected sent to formal domestic treatment Pet Other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_pet_other": 1,
        "waste_collected_pet_other": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_pet_other():
    return sent_for_formal_domestic_pet_other() * waste_collected_pet_other()


@component.add(
    name="sent for sorting Pet Other",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_pet_other": 1,
        "sent_for_sorting_rate_pet_other": 1,
    },
)
def sent_for_sorting_pet_other():
    return formal_domestic_treatment_pet_other() * sent_for_sorting_rate_pet_other()


@component.add(
    name="rate sent for reuse pet film",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_sent_for_reuse_pet_film():
    return 0


@component.add(
    name="wmc historical pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_pet_film():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="sent for formal domestic hdpe bottle",
    units="1/Quarter",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sent_for_formal_domestic_hdpe_bottle():
    """
    0.4
    """
    return 0.994


@component.add(
    name="Waste generated hdpe ptt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_hdpe_ptt": 1},
    other_deps={
        "_integ_waste_generated_hdpe_ptt": {
            "initial": {},
            "step": {
                "to_waste_generated_hdpe_ptt": 1,
                "illegal_collection_data_hdpe_ptt": 2,
                "littering_hdpe_ptt": 1,
                "formal_waste_collection_hdpe_ptt": 1,
            },
        }
    },
)
def waste_generated_hdpe_ptt():
    return _integ_waste_generated_hdpe_ptt()


_integ_waste_generated_hdpe_ptt = Integ(
    lambda: to_waste_generated_hdpe_ptt()
    - illegal_collection_data_hdpe_ptt()
    - littering_hdpe_ptt()
    - formal_waste_collection_hdpe_ptt()
    - illegal_collection_data_hdpe_ptt(),
    lambda: 24478.8,
    "_integ_waste_generated_hdpe_ptt",
)


@component.add(
    name="rate overseas pet film",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_pet_film": 1,
        "time": 1,
        "formulation_of_overseas_rate_pet_film": 1,
        "historical_overseas_rate_pet_film": 1,
    },
)
def rate_overseas_pet_film():
    """
    0.55
    """
    return if_then_else(
        policy1_introduction_time_pet_film() < time(),
        lambda: formulation_of_overseas_rate_pet_film(),
        lambda: historical_overseas_rate_pet_film(),
    )


@component.add(
    name="Waste generated Pet Other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pet_other": 1},
    other_deps={
        "_integ_waste_generated_pet_other": {
            "initial": {},
            "step": {
                "to_waste_generated_pet_other": 1,
                "illegal_collection_data_pet_other": 2,
                "littering_pet_other": 1,
                "formal_waste_collection_pet_other": 1,
            },
        }
    },
)
def waste_generated_pet_other():
    return _integ_waste_generated_pet_other()


_integ_waste_generated_pet_other = Integ(
    lambda: to_waste_generated_pet_other()
    - illegal_collection_data_pet_other()
    - littering_pet_other()
    - formal_waste_collection_pet_other()
    - illegal_collection_data_pet_other(),
    lambda: 37659.7,
    "_integ_waste_generated_pet_other",
)


@component.add(
    name="Sorting hdpe film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_hdpe_film": 1},
    other_deps={
        "_integ_sorting_hdpe_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_hdpe_film": 1,
                "sent_for_recycling_hdpe_film": 1,
                "recycling_rejects_rate_hdpe_film": 1,
                "sent_for_overseas_treatment_hdpe_film": 1,
            },
        }
    },
)
def sorting_hdpe_film():
    return _integ_sorting_hdpe_film()


_integ_sorting_hdpe_film = Integ(
    lambda: sent_for_sorting_hdpe_film()
    - sent_for_recycling_hdpe_film()
    - recycling_rejects_rate_hdpe_film()
    - sent_for_overseas_treatment_hdpe_film(),
    lambda: 40071,
    "_integ_sorting_hdpe_film",
)


@component.add(
    name="Sorting hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_hdpe_other": 1},
    other_deps={
        "_integ_sorting_hdpe_other": {
            "initial": {},
            "step": {
                "sent_for_sorting_hdpe_other": 1,
                "sent_for_recycling_hdpe_other": 1,
                "recycling_rejects_rate_hdpe_other": 1,
                "sent_for_overseas_treatment_hdpe_other": 1,
            },
        }
    },
)
def sorting_hdpe_other():
    return _integ_sorting_hdpe_other()


_integ_sorting_hdpe_other = Integ(
    lambda: sent_for_sorting_hdpe_other()
    - sent_for_recycling_hdpe_other()
    - recycling_rejects_rate_hdpe_other()
    - sent_for_overseas_treatment_hdpe_other(),
    lambda: 25351,
    "_integ_sorting_hdpe_other",
)


@component.add(
    name="rate of recycling reject hdpe bottle",
    units="1/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "policy1_introduction_time_hdpe_bottle": 1,
        "time": 1,
        "formulation_for_recycling_rate_hdpe_bottle": 1,
        "historical_on_recycling_hdpe_bottle": 1,
    },
)
def rate_of_recycling_reject_hdpe_bottle():
    return if_then_else(
        policy1_introduction_time_hdpe_bottle() < time(),
        lambda: formulation_for_recycling_rate_hdpe_bottle(),
        lambda: historical_on_recycling_hdpe_bottle(),
    )


@component.add(
    name="Sent for overseas treatment hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"overseas_treament_rate_hdpe_bottle": 1, "sorting_hdpe_bottle": 1},
)
def sent_for_overseas_treatment_hdpe_bottle():
    return overseas_treament_rate_hdpe_bottle() * sorting_hdpe_bottle()


@component.add(
    name="rate sent for domestic recycling pet film",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def rate_sent_for_domestic_recycling_pet_film():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.349, 0.331, 0.295, 0.31, 0.333, 0.372, 0.339, 0.475, 0.515, 0.431],
    )


@component.add(
    name="wmc collected formulation pet film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_pet_film():
    return 0.25


@component.add(
    name="Sent to incineration hdpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_hdpe_other": 1,
        "domestic_residual_treatment_hdpe_other": 1,
    },
)
def sent_to_incineration_hdpe_other():
    return incineration_rate_hdpe_other() * domestic_residual_treatment_hdpe_other()


@component.add(
    name="Waste generated pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_pet_film": 1},
    other_deps={
        "_integ_waste_generated_pet_film": {
            "initial": {},
            "step": {
                "to_waste_generated_pet_film": 1,
                "illegal_collection_data_pet_film": 2,
                "littering_pet_film": 1,
                "formal_waste_collection_pet_film": 1,
            },
        }
    },
)
def waste_generated_pet_film():
    return _integ_waste_generated_pet_film()


_integ_waste_generated_pet_film = Integ(
    lambda: to_waste_generated_pet_film()
    - illegal_collection_data_pet_film()
    - littering_pet_film()
    - formal_waste_collection_pet_film()
    - illegal_collection_data_pet_film(),
    lambda: 14593,
    "_integ_waste_generated_pet_film",
)


@component.add(
    name="sent for sorting hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "formal_domestic_treatment_hdpe_bottle": 1,
        "sent_for_sorting_rate_hdpe_bottle": 1,
    },
)
def sent_for_sorting_hdpe_bottle():
    return formal_domestic_treatment_hdpe_bottle() * sent_for_sorting_rate_hdpe_bottle()


@component.add(
    name="Waste collected sent to formal domestic treatment hdpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_hdpe_bottle": 1,
        "waste_collected_hdpe_bottle": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_hdpe_bottle():
    return sent_for_formal_domestic_hdpe_bottle() * waste_collected_hdpe_bottle()


@component.add(
    name="Waste generated hdpe other",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_generated_hdpe_other": 1},
    other_deps={
        "_integ_waste_generated_hdpe_other": {
            "initial": {},
            "step": {
                "to_waste_generated_hdpe_other": 1,
                "illegal_collection_data_hdpe_other": 2,
                "littering_hdpe_other": 1,
                "formal_waste_collection_hdpe_other": 1,
            },
        }
    },
)
def waste_generated_hdpe_other():
    return _integ_waste_generated_hdpe_other()


_integ_waste_generated_hdpe_other = Integ(
    lambda: to_waste_generated_hdpe_other()
    - illegal_collection_data_hdpe_other()
    - littering_hdpe_other()
    - formal_waste_collection_hdpe_other()
    - illegal_collection_data_hdpe_other(),
    lambda: 58372.6,
    "_integ_waste_generated_hdpe_other",
)


@component.add(
    name="sent for sorting rate hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_hdpe_bottle():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="sent for sorting rate hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def sent_for_sorting_rate_hdpe_other():
    return np.interp(
        time(),
        [
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.458, 0.474, 0.534, 0.552, 0.511, 0.516, 0.626, 0.608, 0.615, 0.666],
    )


@component.add(
    name="Sent for recycling hdpe bottle",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sorting_hdpe_bottle": 1,
        "rate_sent_for_domestic_recycling_hdpe_bottle": 1,
    },
)
def sent_for_recycling_hdpe_bottle():
    return sorting_hdpe_bottle() * rate_sent_for_domestic_recycling_hdpe_bottle()


@component.add(
    name="Waste collected hdpe ptt",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_hdpe_ptt": 1},
    other_deps={
        "_integ_waste_collected_hdpe_ptt": {
            "initial": {},
            "step": {
                "formal_waste_collection_hdpe_ptt": 1,
                "waste_collected_sent_to_formal_domestic_treatment_hdpe_ptt": 1,
            },
        }
    },
)
def waste_collected_hdpe_ptt():
    return _integ_waste_collected_hdpe_ptt()


_integ_waste_collected_hdpe_ptt = Integ(
    lambda: formal_waste_collection_hdpe_ptt()
    - waste_collected_sent_to_formal_domestic_treatment_hdpe_ptt(),
    lambda: 23352,
    "_integ_waste_collected_hdpe_ptt",
)


@component.add(
    name="Waste collected sent to formal domestic treatment hdpe other",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sent_for_formal_domestic_hdpe_other": 1,
        "waste_collected_hdpe_other": 1,
    },
)
def waste_collected_sent_to_formal_domestic_treatment_hdpe_other():
    return sent_for_formal_domestic_hdpe_other() * waste_collected_hdpe_other()


@component.add(
    name="rate to illegal collection hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_to_illegal_collection_hdpe_ptt():
    return 0.006


@component.add(
    name="wmc collected formulation hdpe other",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_hdpe_other():
    return 0.25


@component.add(
    name="Sent to incineration hdpe film",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_hdpe_film": 1,
        "domestic_residual_treatment_hdpe_film": 1,
    },
)
def sent_to_incineration_hdpe_film():
    return incineration_rate_hdpe_film() * domestic_residual_treatment_hdpe_film()


@component.add(
    name="wmc historical hdpe ptt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_hdpe_ptt():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="wmc collected formulation hdpe film",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_hdpe_film():
    return 0.25


@component.add(
    name="Sent to landfill hdpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "landfill_rate_hdpe_bottle": 1,
        "domestic_residual_treatment_hdpe_bottle": 1,
    },
)
def sent_to_landfill_hdpe_bottle():
    return landfill_rate_hdpe_bottle() * domestic_residual_treatment_hdpe_bottle()


@component.add(
    name="Sorting hdpe bottle",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_hdpe_bottle": 1},
    other_deps={
        "_integ_sorting_hdpe_bottle": {
            "initial": {},
            "step": {
                "sent_for_sorting_hdpe_bottle": 1,
                "sent_for_recycling_hdpe_bottle": 1,
                "recycling_rejects_rate_hdpe_bottle": 1,
                "sent_for_overseas_treatment_hdpe_bottle": 1,
            },
        }
    },
)
def sorting_hdpe_bottle():
    return _integ_sorting_hdpe_bottle()


_integ_sorting_hdpe_bottle = Integ(
    lambda: sent_for_sorting_hdpe_bottle()
    - sent_for_recycling_hdpe_bottle()
    - recycling_rejects_rate_hdpe_bottle()
    - sent_for_overseas_treatment_hdpe_bottle(),
    lambda: 199514,
    "_integ_sorting_hdpe_bottle",
)


@component.add(
    name="wmc historical hdpe other",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def wmc_historical_hdpe_other():
    return np.interp(
        time(),
        [
            2012.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
        ],
        [0.601, 0.576, 0.57, 0.565, 0.586, 0.597, 0.576, 0.546, 0.541, 0.562, 0.562],
    )


@component.add(
    name="recycling rejects rate hdpe film",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rate_of_recycling_reject_hdpe_film": 1, "sorting_hdpe_film": 1},
)
def recycling_rejects_rate_hdpe_film():
    return rate_of_recycling_reject_hdpe_film() * sorting_hdpe_film()


@component.add(
    name="Waste collected Pet Other",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pet_other": 1},
    other_deps={
        "_integ_waste_collected_pet_other": {
            "initial": {},
            "step": {
                "formal_waste_collection_pet_other": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pet_other": 1,
            },
        }
    },
)
def waste_collected_pet_other():
    return _integ_waste_collected_pet_other()


_integ_waste_collected_pet_other = Integ(
    lambda: formal_waste_collection_pet_other()
    - waste_collected_sent_to_formal_domestic_treatment_pet_other(),
    lambda: 35873,
    "_integ_waste_collected_pet_other",
)


@component.add(
    name="wmc collected formulation hdpe ptt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wmc_collected_formulation_hdpe_ptt():
    return 0.25


@component.add(
    name="Sorting pet film",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_sorting_pet_film": 1},
    other_deps={
        "_integ_sorting_pet_film": {
            "initial": {},
            "step": {
                "sent_for_sorting_pet_film": 1,
                "sent_for_recycling_pet_film": 1,
                "recycling_rejects_rate_pet_film": 1,
                "sent_for_overseas_treatment_pet_film": 1,
            },
        }
    },
)
def sorting_pet_film():
    return _integ_sorting_pet_film()


_integ_sorting_pet_film = Integ(
    lambda: sent_for_sorting_pet_film()
    - sent_for_recycling_pet_film()
    - recycling_rejects_rate_pet_film()
    - sent_for_overseas_treatment_pet_film(),
    lambda: 0,
    "_integ_sorting_pet_film",
)


@component.add(
    name="Sent to incineration hdpe bottle",
    units="Tonnes/Quarter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "incineration_rate_hdpe_bottle": 1,
        "domestic_residual_treatment_hdpe_bottle": 1,
    },
)
def sent_to_incineration_hdpe_bottle():
    return incineration_rate_hdpe_bottle() * domestic_residual_treatment_hdpe_bottle()


@component.add(
    name="Waste collected pet film",
    units="Tonnes",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_waste_collected_pet_film": 1},
    other_deps={
        "_integ_waste_collected_pet_film": {
            "initial": {},
            "step": {
                "formal_waste_collection_pet_film": 1,
                "waste_collected_sent_to_formal_domestic_treatment_pet_film": 1,
            },
        }
    },
)
def waste_collected_pet_film():
    return _integ_waste_collected_pet_film()


_integ_waste_collected_pet_film = Integ(
    lambda: formal_waste_collection_pet_film()
    - waste_collected_sent_to_formal_domestic_treatment_pet_film(),
    lambda: 0,
    "_integ_waste_collected_pet_film",
)


@component.add(
    name="policy1 introduction time",
    limits=(2011.0, 2045.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def policy1_introduction_time():
    return 2030
